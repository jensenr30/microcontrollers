
Panasonic850 VU meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006b4  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000343  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014f  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f0  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000139  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000119f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	23 d0       	rcall	.+70     	; 0x72 <main>
  2c:	58 c0       	rjmp	.+176    	; 0xde <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <calculator>:
//---------------------------------------------------------------------------------------------------
// this function will pulse (turn on and off) an input to the calculator.
// the input is NOT the number you want to print. is it pin number that needs to be pulsed.
void calculator(int pin){
	// make sure the pin is valid.
	if(pin == p_clear || pin == p_1 || pin == p_3 || pin == p_8){
  30:	84 30       	cpi	r24, 0x04	; 4
  32:	91 05       	cpc	r25, r1
  34:	e8 f4       	brcc	.+58     	; 0x70 <__SREG__+0x31>
		myPort |=  (1 << pin);	// turn the pin on.
  36:	4b b3       	in	r20, 0x1b	; 27
  38:	21 e0       	ldi	r18, 0x01	; 1
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	b9 01       	movw	r22, r18
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	66 0f       	add	r22, r22
  42:	77 1f       	adc	r23, r23
  44:	8a 95       	dec	r24
  46:	e2 f7       	brpl	.-8      	; 0x40 <__SREG__+0x1>
  48:	cb 01       	movw	r24, r22
  4a:	94 2f       	mov	r25, r20
  4c:	98 2b       	or	r25, r24
  4e:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	ef e3       	ldi	r30, 0x3F	; 63
  52:	fc e9       	ldi	r31, 0x9C	; 156
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
		_delay_us(calcLatency);		// wait for some time.
		myPort &= ~(1 <<pin);	// turn the pin off.
  5c:	9b b3       	in	r25, 0x1b	; 27
  5e:	80 95       	com	r24
  60:	89 23       	and	r24, r25
  62:	8b bb       	out	0x1b, r24	; 27
  64:	8f e3       	ldi	r24, 0x3F	; 63
  66:	9c e9       	ldi	r25, 0x9C	; 156
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <__SREG__+0x2f>
  6e:	00 00       	nop
  70:	08 95       	ret

00000072 <main>:
{
	
	//---------------------------------------------------------------------------------------------------
	// SETTING INPUT/OUTPUT CHARACTERISTICS FOR THE PINS.
	//---------------------------------------------------------------------------------------------------
	myPortDDR |=  (1 << p_clear);	// clear is an output.
  72:	d0 9a       	sbi	0x1a, 0	; 26
	myPortDDR |=  (1 << p_1);		// 1	 is an output.
  74:	d1 9a       	sbi	0x1a, 1	; 26
	myPortDDR |=  (1 << p_3);		// 3	 is an output.
  76:	d2 9a       	sbi	0x1a, 2	; 26
	myPortDDR |=  (1 << p_8);		// 8	 is an output.
  78:	d3 9a       	sbi	0x1a, 3	; 26
	myPortDDR &= ~(1 << p_sig_in);	// the input audio signal is and INPUT (obviously  :P).
  7a:	d4 98       	cbi	0x1a, 4	; 26
	// MAIN CODE LOOP.
	//---------------------------------------------------------------------------------------------------
    int testDelay = 250;
	while(1)
    {
        calculator(p_clear);
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	d7 df       	rcall	.-82     	; 0x30 <calculator>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e7       	ldi	r18, 0x7F	; 127
  84:	8a e1       	ldi	r24, 0x1A	; 26
  86:	96 e0       	ldi	r25, 0x06	; 6
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x16>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x20>
  92:	00 00       	nop
		_delay_ms(testDelay);
		calculator(p_1);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	cb df       	rcall	.-106    	; 0x30 <calculator>
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	96 e0       	ldi	r25, 0x06	; 6
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x2e>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x38>
  aa:	00 00       	nop
		_delay_ms(testDelay);
		calculator(p_3);
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	bf df       	rcall	.-130    	; 0x30 <calculator>
  b2:	2f e7       	ldi	r18, 0x7F	; 127
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	96 e0       	ldi	r25, 0x06	; 6
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x46>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x50>
  c2:	00 00       	nop
		_delay_ms(testDelay);
		calculator(p_8);
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	b3 df       	rcall	.-154    	; 0x30 <calculator>
  ca:	2f e7       	ldi	r18, 0x7F	; 127
  cc:	8a e1       	ldi	r24, 0x1A	; 26
  ce:	96 e0       	ldi	r25, 0x06	; 6
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x5e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x68>
  da:	00 00       	nop
  dc:	cf cf       	rjmp	.-98     	; 0x7c <main+0xa>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
