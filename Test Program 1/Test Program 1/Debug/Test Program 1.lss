
Test Program 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001fd  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000130  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c8  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011b  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 00 	call	0xec	; 0xec <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <shift>:
		}
    }
}

//most significant bit first
void shift(int data, int datapin, int clockpin){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
	output_low(PORTB, clockpin);
  84:	75 b1       	in	r23, 0x05	; 5
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <shift+0x12>
  8e:	ee 0f       	add	r30, r30
  90:	ff 1f       	adc	r31, r31
  92:	4a 95       	dec	r20
  94:	e2 f7       	brpl	.-8      	; 0x8e <shift+0xe>
  96:	af 01       	movw	r20, r30
  98:	ce 2f       	mov	r28, r30
  9a:	c0 95       	com	r28
  9c:	7c 23       	and	r23, r28
  9e:	75 b9       	out	0x05, r23	; 5
	
	int x= 128;
	while(x>0){
		if(data&x) output_high(PORTB, datapin);
  a0:	f9 01       	movw	r30, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <shift+0x28>
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <shift+0x24>
  ac:	bf 01       	movw	r22, r30
  ae:	de 2f       	mov	r29, r30
		else         output_low (PORTB, datapin);
  b0:	60 95       	com	r22
  b2:	e8 e0       	ldi	r30, 0x08	; 8
  b4:	f0 e0       	ldi	r31, 0x00	; 0

//most significant bit first
void shift(int data, int datapin, int clockpin){
	output_low(PORTB, clockpin);
	
	int x= 128;
  b6:	20 e8       	ldi	r18, 0x80	; 128
  b8:	30 e0       	ldi	r19, 0x00	; 0
	while(x>0){
		if(data&x) output_high(PORTB, datapin);
  ba:	d9 01       	movw	r26, r18
  bc:	a8 23       	and	r26, r24
  be:	b9 23       	and	r27, r25
  c0:	ab 2b       	or	r26, r27
  c2:	21 f0       	breq	.+8      	; 0xcc <shift+0x4c>
  c4:	75 b1       	in	r23, 0x05	; 5
  c6:	7d 2b       	or	r23, r29
  c8:	75 b9       	out	0x05, r23	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <shift+0x52>
		else         output_low (PORTB, datapin);
  cc:	75 b1       	in	r23, 0x05	; 5
  ce:	76 23       	and	r23, r22
  d0:	75 b9       	out	0x05, r23	; 5
		output_high(PORTB, clockpin);
  d2:	75 b1       	in	r23, 0x05	; 5
  d4:	74 2b       	or	r23, r20
  d6:	75 b9       	out	0x05, r23	; 5
		output_low(PORTB, clockpin);
  d8:	75 b1       	in	r23, 0x05	; 5
  da:	7c 23       	and	r23, r28
  dc:	75 b9       	out	0x05, r23	; 5
		x = x>>1; // divide by two
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
//most significant bit first
void shift(int data, int datapin, int clockpin){
	output_low(PORTB, clockpin);
	
	int x= 128;
	while(x>0){
  e4:	51 f7       	brne	.-44     	; 0xba <shift+0x3a>
		output_high(PORTB, clockpin);
		output_low(PORTB, clockpin);
		x = x>>1; // divide by two
	}
	
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:
// functions
void shift(int,int,int);

int main(void)
{
	set_output(DDRB, p_shift_clock);
  ec:	21 9a       	sbi	0x04, 1	; 4
	set_output(DDRB, p_shift_data);
  ee:	22 9a       	sbi	0x04, 2	; 4
	set_output(DDRB, p_enable_matrix);
  f0:	23 9a       	sbi	0x04, 3	; 4
	set_output(DDRB, p_decade_reset);
  f2:	24 9a       	sbi	0x04, 4	; 4
	set_output(DDRB, p_decade_clock);
  f4:	25 9a       	sbi	0x04, 5	; 4
	set_output(DDRB, p_test_LED);
  f6:	20 9a       	sbi	0x04, 0	; 4
	//force all outputs to low
	output_low(PORTB,p_decade_clock);
  f8:	2d 98       	cbi	0x05, 5	; 5
	output_low(PORTB,p_decade_reset);
  fa:	2c 98       	cbi	0x05, 4	; 5
	output_low(PORTB,p_shift_data);
  fc:	2a 98       	cbi	0x05, 2	; 5
	output_low(PORTB,p_shift_clock);
  fe:	29 98       	cbi	0x05, 1	; 5
	//enable matrix
	output_high(PORTB, p_enable_matrix);
 100:	2b 9a       	sbi	0x05, 3	; 5
	//reset decade counter state
	output_low(PORTB, p_decade_reset);
 102:	2c 98       	cbi	0x05, 4	; 5
	output_high(PORTB, p_decade_reset);
 104:	2c 9a       	sbi	0x05, 4	; 5
	output_low(PORTB, p_decade_reset);
 106:	2c 98       	cbi	0x05, 4	; 5
	int i = 1;
 108:	c1 e0       	ldi	r28, 0x01	; 1
 10a:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
		//turn on the matrix and shift out i
		output_high(PORTB, p_enable_matrix);
 10c:	2b 9a       	sbi	0x05, 3	; 5
		shift(i, p_shift_data, p_shift_clock);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	ce 01       	movw	r24, r28
 118:	0e 94 40 00 	call	0x80	; 0x80 <shift>
		
		//turn on and off the LED and delay
		output_high(PORTB, p_enable_matrix);
 11c:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x38>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x42>
 12e:	00 00       	nop
		delay(100);
		output_low(PORTB, p_test_LED);
 130:	28 98       	cbi	0x05, 0	; 5
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	80 e7       	ldi	r24, 0x70	; 112
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x4c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x56>
 142:	00 00       	nop
		delay(100);
		output_high(PORTB, p_test_LED);
 144:	28 9a       	sbi	0x05, 0	; 5
		
		//increment the number being shifted variable
		i++;
 146:	21 96       	adiw	r28, 0x01	; 1
		
		//disable the matrix while switching columns.
		output_low(PORTB, p_enable_matrix);
 148:	2b 98       	cbi	0x05, 3	; 5
		
		//reset the matrix display column when necessary.
		if(i%8 == 1){
 14a:	9e 01       	movw	r18, r28
 14c:	27 70       	andi	r18, 0x07	; 7
 14e:	30 78       	andi	r19, 0x80	; 128
 150:	33 23       	and	r19, r19
 152:	34 f4       	brge	.+12     	; 0x160 <main+0x74>
 154:	21 50       	subi	r18, 0x01	; 1
 156:	31 09       	sbc	r19, r1
 158:	28 6f       	ori	r18, 0xF8	; 248
 15a:	3f 6f       	ori	r19, 0xFF	; 255
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	21 30       	cpi	r18, 0x01	; 1
 162:	31 05       	cpc	r19, r1
 164:	19 f4       	brne	.+6      	; 0x16c <main+0x80>
			output_high(PORTB, p_decade_reset);
 166:	2c 9a       	sbi	0x05, 4	; 5
			output_low(PORTB, p_decade_reset);
 168:	2c 98       	cbi	0x05, 4	; 5
 16a:	d0 cf       	rjmp	.-96     	; 0x10c <main+0x20>
		}
		//otherwise clock the decade counter
		else{
			
			output_high(PORTB, p_decade_clock);
 16c:	2d 9a       	sbi	0x05, 5	; 5
			output_low(PORTB, p_decade_clock);
 16e:	2d 98       	cbi	0x05, 5	; 5
 170:	cd cf       	rjmp	.-102    	; 0x10c <main+0x20>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
