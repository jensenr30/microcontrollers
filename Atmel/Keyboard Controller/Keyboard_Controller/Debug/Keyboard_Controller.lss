
Keyboard_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000ad4  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000766  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000333a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00003369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000049f  00000000  00000000  000033c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ed  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000281  00000000  00000000  00003a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000015c  00000000  00000000  00003cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000215  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000641  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00004682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 03 	call	0x602	; 0x602 <main>
  9e:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shift_out_328>:
	// NOTE: This function will not set the DDRx registers.
	// The clockPin and dataPin of the port need to be configured as outputs before attempting to shift out data.
// bits is the number of bits that need to be shifted out.
// data is the data to be shifted out.
// bitDirection
void shift_out_328(char port, unsigned char clockPin, unsigned char dataPin, unsigned int bits, unsigned long int data, char bitDirection){
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	f9 01       	movw	r30, r18
  be:	9c 2d       	mov	r25, r12
	
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
  c0:	9d 36       	cpi	r25, 0x6D	; 109
  c2:	41 f4       	brne	.+16     	; 0xd4 <shift_out_328+0x2e>
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
  c4:	e2 30       	cpi	r30, 0x02	; 2
  c6:	f1 05       	cpc	r31, r1
  c8:	70 f4       	brcc	.+28     	; 0xe6 <shift_out_328+0x40>
  ca:	81 2c       	mov	r8, r1
  cc:	91 2c       	mov	r9, r1
  ce:	54 01       	movw	r10, r8
  d0:	83 94       	inc	r8
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <shift_out_328+0x3a>
	
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
  d4:	9d 34       	cpi	r25, 0x4D	; 77
  d6:	b1 f3       	breq	.-20     	; 0xc4 <shift_out_328+0x1e>
// data is the data to be shifted out.
// bitDirection
void shift_out_328(char port, unsigned char clockPin, unsigned char dataPin, unsigned int bits, unsigned long int data, char bitDirection){
	
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
  d8:	81 2c       	mov	r8, r1
  da:	91 2c       	mov	r9, r1
  dc:	54 01       	movw	r10, r8
  de:	83 94       	inc	r8
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
			mask <<= 1;
	}
	
	for(i=0; i<bits; i++){
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	81 f4       	brne	.+32     	; 0x104 <shift_out_328+0x5e>
  e4:	97 c0       	rjmp	.+302    	; 0x214 <shift_out_328+0x16e>
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
  e6:	81 2c       	mov	r8, r1
  e8:	91 2c       	mov	r9, r1
  ea:	54 01       	movw	r10, r8
  ec:	83 94       	inc	r8
  ee:	a1 e0       	ldi	r26, 0x01	; 1
  f0:	b0 e0       	ldi	r27, 0x00	; 0
			mask <<= 1;
  f2:	88 0c       	add	r8, r8
  f4:	99 1c       	adc	r9, r9
  f6:	aa 1c       	adc	r10, r10
  f8:	bb 1c       	adc	r11, r11
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	ae 17       	cp	r26, r30
  fe:	bf 07       	cpc	r27, r31
 100:	c1 f7       	brne	.-16     	; 0xf2 <shift_out_328+0x4c>
 102:	ee cf       	rjmp	.-36     	; 0xe0 <shift_out_328+0x3a>
		//set data bit high if needed
		if(data&mask){
			switch(port){
			case 'b':
			case 'B':
				PORTB |=  (1 << dataPin);
 104:	a1 e0       	ldi	r26, 0x01	; 1
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	9d 01       	movw	r18, r26
 10a:	02 c0       	rjmp	.+4      	; 0x110 <shift_out_328+0x6a>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	4a 95       	dec	r20
 112:	e2 f7       	brpl	.-8      	; 0x10c <shift_out_328+0x66>
 114:	a9 01       	movw	r20, r18
 116:	32 2f       	mov	r19, r18
		// otherwise, set the data bit low
		else{
			switch(port){
				case 'b':
				case 'B':
					PORTB &= ~(1 << dataPin);
 118:	24 2f       	mov	r18, r20
 11a:	20 95       	com	r18
			
		//clock data into the register.
		switch(port){
			case 'b':
			case 'B':
				PORTD &= ~(1 << clockPin);
 11c:	ad 01       	movw	r20, r26
 11e:	02 c0       	rjmp	.+4      	; 0x124 <shift_out_328+0x7e>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <shift_out_328+0x7a>
 128:	d4 2f       	mov	r29, r20
 12a:	d0 95       	com	r29
				PORTD |=  (1 << clockPin);
 12c:	c4 2f       	mov	r28, r20
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0
	}
	
	for(i=0; i<bits; i++){
			
		//set data bit high if needed
		if(data&mask){
 132:	b5 01       	movw	r22, r10
 134:	a4 01       	movw	r20, r8
 136:	4e 21       	and	r20, r14
 138:	5f 21       	and	r21, r15
 13a:	60 23       	and	r22, r16
 13c:	71 23       	and	r23, r17
 13e:	45 2b       	or	r20, r21
 140:	46 2b       	or	r20, r22
 142:	47 2b       	or	r20, r23
 144:	d1 f0       	breq	.+52     	; 0x17a <shift_out_328+0xd4>
			switch(port){
 146:	84 34       	cpi	r24, 0x44	; 68
 148:	a1 f0       	breq	.+40     	; 0x172 <shift_out_328+0xcc>
 14a:	28 f4       	brcc	.+10     	; 0x156 <shift_out_328+0xb0>
 14c:	82 34       	cpi	r24, 0x42	; 66
 14e:	49 f0       	breq	.+18     	; 0x162 <shift_out_328+0xbc>
 150:	83 34       	cpi	r24, 0x43	; 67
 152:	61 f5       	brne	.+88     	; 0x1ac <shift_out_328+0x106>
 154:	0a c0       	rjmp	.+20     	; 0x16a <shift_out_328+0xc4>
 156:	83 36       	cpi	r24, 0x63	; 99
 158:	41 f0       	breq	.+16     	; 0x16a <shift_out_328+0xc4>
 15a:	84 36       	cpi	r24, 0x64	; 100
 15c:	51 f0       	breq	.+20     	; 0x172 <shift_out_328+0xcc>
 15e:	82 36       	cpi	r24, 0x62	; 98
 160:	29 f5       	brne	.+74     	; 0x1ac <shift_out_328+0x106>
			case 'b':
			case 'B':
				PORTB |=  (1 << dataPin);
 162:	45 b1       	in	r20, 0x05	; 5
 164:	43 2b       	or	r20, r19
 166:	45 b9       	out	0x05, r20	; 5
				break;
 168:	21 c0       	rjmp	.+66     	; 0x1ac <shift_out_328+0x106>
			case 'c':
			case 'C':
				PORTC |=  (1 << dataPin);
 16a:	48 b1       	in	r20, 0x08	; 8
 16c:	43 2b       	or	r20, r19
 16e:	48 b9       	out	0x08, r20	; 8
				break;
 170:	1d c0       	rjmp	.+58     	; 0x1ac <shift_out_328+0x106>
			case 'd':
			case 'D':
				PORTD |=  (1 << dataPin);
 172:	4b b1       	in	r20, 0x0b	; 11
 174:	43 2b       	or	r20, r19
 176:	4b b9       	out	0x0b, r20	; 11
				break;
 178:	19 c0       	rjmp	.+50     	; 0x1ac <shift_out_328+0x106>
				break;
			}
		}
		// otherwise, set the data bit low
		else{
			switch(port){
 17a:	84 34       	cpi	r24, 0x44	; 68
 17c:	a1 f0       	breq	.+40     	; 0x1a6 <shift_out_328+0x100>
 17e:	28 f4       	brcc	.+10     	; 0x18a <shift_out_328+0xe4>
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	49 f0       	breq	.+18     	; 0x196 <shift_out_328+0xf0>
 184:	83 34       	cpi	r24, 0x43	; 67
 186:	91 f4       	brne	.+36     	; 0x1ac <shift_out_328+0x106>
 188:	0a c0       	rjmp	.+20     	; 0x19e <shift_out_328+0xf8>
 18a:	83 36       	cpi	r24, 0x63	; 99
 18c:	41 f0       	breq	.+16     	; 0x19e <shift_out_328+0xf8>
 18e:	84 36       	cpi	r24, 0x64	; 100
 190:	51 f0       	breq	.+20     	; 0x1a6 <shift_out_328+0x100>
 192:	82 36       	cpi	r24, 0x62	; 98
 194:	59 f4       	brne	.+22     	; 0x1ac <shift_out_328+0x106>
				case 'b':
				case 'B':
					PORTB &= ~(1 << dataPin);
 196:	45 b1       	in	r20, 0x05	; 5
 198:	42 23       	and	r20, r18
 19a:	45 b9       	out	0x05, r20	; 5
					break;
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <shift_out_328+0x106>
				case 'c':
				case 'C':
					PORTC &= ~(1 << dataPin);
 19e:	48 b1       	in	r20, 0x08	; 8
 1a0:	42 23       	and	r20, r18
 1a2:	48 b9       	out	0x08, r20	; 8
					break;
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <shift_out_328+0x106>
				case 'd':
				case 'D':
					PORTD &= ~(1 << dataPin);
 1a6:	4b b1       	in	r20, 0x0b	; 11
 1a8:	42 23       	and	r20, r18
 1aa:	4b b9       	out	0x0b, r20	; 11
					break;
			}
		}
			
		//clock data into the register.
		switch(port){
 1ac:	84 34       	cpi	r24, 0x44	; 68
 1ae:	d1 f0       	breq	.+52     	; 0x1e4 <shift_out_328+0x13e>
 1b0:	28 f4       	brcc	.+10     	; 0x1bc <shift_out_328+0x116>
 1b2:	82 34       	cpi	r24, 0x42	; 66
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <shift_out_328+0x122>
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	d9 f4       	brne	.+54     	; 0x1f0 <shift_out_328+0x14a>
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <shift_out_328+0x130>
 1bc:	83 36       	cpi	r24, 0x63	; 99
 1be:	59 f0       	breq	.+22     	; 0x1d6 <shift_out_328+0x130>
 1c0:	84 36       	cpi	r24, 0x64	; 100
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <shift_out_328+0x13e>
 1c4:	82 36       	cpi	r24, 0x62	; 98
 1c6:	a1 f4       	brne	.+40     	; 0x1f0 <shift_out_328+0x14a>
			case 'b':
			case 'B':
				PORTD &= ~(1 << clockPin);
 1c8:	4b b1       	in	r20, 0x0b	; 11
 1ca:	4d 23       	and	r20, r29
 1cc:	4b b9       	out	0x0b, r20	; 11
				PORTD |=  (1 << clockPin);
 1ce:	4b b1       	in	r20, 0x0b	; 11
 1d0:	4c 2b       	or	r20, r28
 1d2:	4b b9       	out	0x0b, r20	; 11
				break;
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <shift_out_328+0x14a>
			case 'c':
			case 'C':
				PORTD &= ~(1 << clockPin);
 1d6:	4b b1       	in	r20, 0x0b	; 11
 1d8:	4d 23       	and	r20, r29
 1da:	4b b9       	out	0x0b, r20	; 11
				PORTD |=  (1 << clockPin);
 1dc:	4b b1       	in	r20, 0x0b	; 11
 1de:	4c 2b       	or	r20, r28
 1e0:	4b b9       	out	0x0b, r20	; 11
				break;
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <shift_out_328+0x14a>
			case 'd':
			case 'D':
				PORTD &= ~(1 << clockPin);
 1e4:	5b b1       	in	r21, 0x0b	; 11
 1e6:	5d 23       	and	r21, r29
 1e8:	5b b9       	out	0x0b, r21	; 11
				PORTD |=  (1 << clockPin);
 1ea:	5b b1       	in	r21, 0x0b	; 11
 1ec:	5c 2b       	or	r21, r28
 1ee:	5b b9       	out	0x0b, r21	; 11
			default:
				break;
		}
			
		// modify mask for the next loop iteration.
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
 1f0:	9d 36       	cpi	r25, 0x6D	; 109
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <shift_out_328+0x152>
 1f4:	9d 34       	cpi	r25, 0x4D	; 77
 1f6:	29 f4       	brne	.+10     	; 0x202 <shift_out_328+0x15c>
			mask >>= 1;										// shift the mask right (decrease the bit mask).
 1f8:	b6 94       	lsr	r11
 1fa:	a7 94       	ror	r10
 1fc:	97 94       	ror	r9
 1fe:	87 94       	ror	r8
 200:	04 c0       	rjmp	.+8      	; 0x20a <shift_out_328+0x164>
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
 202:	88 0c       	add	r8, r8
 204:	99 1c       	adc	r9, r9
 206:	aa 1c       	adc	r10, r10
 208:	bb 1c       	adc	r11, r11
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
			mask <<= 1;
	}
	
	for(i=0; i<bits; i++){
 20a:	11 96       	adiw	r26, 0x01	; 1
 20c:	ae 17       	cp	r26, r30
 20e:	bf 07       	cpc	r27, r31
 210:	09 f0       	breq	.+2      	; 0x214 <shift_out_328+0x16e>
 212:	8f cf       	rjmp	.-226    	; 0x132 <shift_out_328+0x8c>
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
			mask >>= 1;										// shift the mask right (decrease the bit mask).
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	9f 90       	pop	r9
 228:	8f 90       	pop	r8
 22a:	08 95       	ret

0000022c <keyboard_update_highest_lowest>:
// if keyHighest is -1, there is no key being pressed.
int keyHighest=	-1;


// this will update the keyLowest and keyHighest variables
void keyboard_update_highest_lowest(){
 22c:	6f ef       	ldi	r22, 0xFF	; 255
 22e:	7f ef       	ldi	r23, 0xFF	; 255
	keyLowest = -1;
 230:	af ef       	ldi	r26, 0xFF	; 255
 232:	bf ef       	ldi	r27, 0xFF	; 255
	keyHighest = -1;
	unsigned int k;
	for(k=0; k<KEYBOARD_TOTAL_KEYS; k++){
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
		if(keys[k/8]&(1<<k%8)){				// check the key gate bit
 238:	fc 01       	movw	r30, r24
 23a:	f6 95       	lsr	r31
 23c:	e7 95       	ror	r30
 23e:	f6 95       	lsr	r31
 240:	e7 95       	ror	r30
 242:	f6 95       	lsr	r31
 244:	e7 95       	ror	r30
 246:	ec 5f       	subi	r30, 0xFC	; 252
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	20 81       	ld	r18, Z
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	47 70       	andi	r20, 0x07	; 7
 252:	55 27       	eor	r21, r21
 254:	02 c0       	rjmp	.+4      	; 0x25a <keyboard_update_highest_lowest+0x2e>
 256:	35 95       	asr	r19
 258:	27 95       	ror	r18
 25a:	4a 95       	dec	r20
 25c:	e2 f7       	brpl	.-8      	; 0x256 <keyboard_update_highest_lowest+0x2a>
 25e:	20 ff       	sbrs	r18, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <keyboard_update_highest_lowest+0x42>
			if(keyLowest == -1) keyLowest = k;
 262:	6f 3f       	cpi	r22, 0xFF	; 255
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	72 07       	cpc	r23, r18
 268:	09 f4       	brne	.+2      	; 0x26c <keyboard_update_highest_lowest+0x40>
 26a:	bc 01       	movw	r22, r24
			keyHighest = k;
 26c:	dc 01       	movw	r26, r24
// this will update the keyLowest and keyHighest variables
void keyboard_update_highest_lowest(){
	keyLowest = -1;
	keyHighest = -1;
	unsigned int k;
	for(k=0; k<KEYBOARD_TOTAL_KEYS; k++){
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	8d 33       	cpi	r24, 0x3D	; 61
 272:	91 05       	cpc	r25, r1
 274:	09 f7       	brne	.-62     	; 0x238 <keyboard_update_highest_lowest+0xc>
 276:	70 93 03 01 	sts	0x0103, r23
 27a:	60 93 02 01 	sts	0x0102, r22
 27e:	b0 93 01 01 	sts	0x0101, r27
 282:	a0 93 00 01 	sts	0x0100, r26
 286:	08 95       	ret

00000288 <keyboard_process>:
// k == 1	=>		Db/G
// k == 2	=>		D /Ab
// k == 3	=>		Eb/A
// k == 4	=>		E /Bb
// k == 5	=>		F /B
void keyboard_process(unsigned char k, long unsigned int halfOctaveData){
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	// this keeps track of whether or not the current key is pressed
	bool pressed;
	
	// if the key is C or Gb, then make it 6 instead of 0.
	// This is all part of decoding the keyboard into a number from 0 to 60.
	if(k== 0) k = 6;
 290:	81 11       	cpse	r24, r1
 292:	01 c0       	rjmp	.+2      	; 0x296 <keyboard_process+0xe>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	86 50       	subi	r24, 0x06	; 6
	
	for(o=0; o<KEYBOARD_HALF_OCTS; o++){
 298:	e0 e0       	ldi	r30, 0x00	; 0
 29a:	f0 e0       	ldi	r31, 0x00	; 0
			// set the right bit high
			keys[absoluteKey>>3] |=  (1 << (absoluteKey%8));
		}
		else{
			// set the right bit low
			keys[absoluteKey>>3] &= ~(1 << (absoluteKey%8));
 29c:	c1 e0       	ldi	r28, 0x01	; 1
 29e:	d0 e0       	ldi	r29, 0x00	; 0
	// This is all part of decoding the keyboard into a number from 0 to 60.
	if(k== 0) k = 6;
	
	for(o=0; o<KEYBOARD_HALF_OCTS; o++){
		// if this specific key is pressed, then pressed=1. otherwise, pressed = 0.
		pressed = (  ( halfOctaveData & (((long unsigned int)1)<<o) ) != 0);
 2a0:	8a 01       	movw	r16, r20
 2a2:	9b 01       	movw	r18, r22
 2a4:	0e 2e       	mov	r0, r30
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <keyboard_process+0x28>
 2a8:	36 95       	lsr	r19
 2aa:	27 95       	ror	r18
 2ac:	17 95       	ror	r17
 2ae:	07 95       	ror	r16
 2b0:	0a 94       	dec	r0
 2b2:	d2 f7       	brpl	.-12     	; 0x2a8 <keyboard_process+0x20>
		// calculate the absolute key
		absoluteKey = k + 6*(o-1);
		
		// update the keys[] array that contains all of the gate signals.
		if(pressed){
 2b4:	00 ff       	sbrs	r16, 0
 2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <keyboard_process+0x58>
			// set the right bit high
			keys[absoluteKey>>3] |=  (1 << (absoluteKey%8));
 2b8:	a8 2f       	mov	r26, r24
 2ba:	a6 95       	lsr	r26
 2bc:	a6 95       	lsr	r26
 2be:	a6 95       	lsr	r26
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	ac 5f       	subi	r26, 0xFC	; 252
 2c4:	be 4f       	sbci	r27, 0xFE	; 254
 2c6:	28 2f       	mov	r18, r24
 2c8:	27 70       	andi	r18, 0x07	; 7
 2ca:	8e 01       	movw	r16, r28
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <keyboard_process+0x4a>
 2ce:	00 0f       	add	r16, r16
 2d0:	11 1f       	adc	r17, r17
 2d2:	2a 95       	dec	r18
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <keyboard_process+0x46>
 2d6:	98 01       	movw	r18, r16
 2d8:	9c 91       	ld	r25, X
 2da:	29 2b       	or	r18, r25
 2dc:	2c 93       	st	X, r18
 2de:	14 c0       	rjmp	.+40     	; 0x308 <keyboard_process+0x80>
		}
		else{
			// set the right bit low
			keys[absoluteKey>>3] &= ~(1 << (absoluteKey%8));
 2e0:	a8 2f       	mov	r26, r24
 2e2:	a6 95       	lsr	r26
 2e4:	a6 95       	lsr	r26
 2e6:	a6 95       	lsr	r26
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	ac 5f       	subi	r26, 0xFC	; 252
 2ec:	be 4f       	sbci	r27, 0xFE	; 254
 2ee:	28 2f       	mov	r18, r24
 2f0:	27 70       	andi	r18, 0x07	; 7
 2f2:	8e 01       	movw	r16, r28
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <keyboard_process+0x72>
 2f6:	00 0f       	add	r16, r16
 2f8:	11 1f       	adc	r17, r17
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <keyboard_process+0x6e>
 2fe:	98 01       	movw	r18, r16
 300:	20 95       	com	r18
 302:	9c 91       	ld	r25, X
 304:	29 23       	and	r18, r25
 306:	2c 93       	st	X, r18
	
	// if the key is C or Gb, then make it 6 instead of 0.
	// This is all part of decoding the keyboard into a number from 0 to 60.
	if(k== 0) k = 6;
	
	for(o=0; o<KEYBOARD_HALF_OCTS; o++){
 308:	31 96       	adiw	r30, 0x01	; 1
 30a:	8a 5f       	subi	r24, 0xFA	; 250
 30c:	eb 30       	cpi	r30, 0x0B	; 11
 30e:	f1 05       	cpc	r31, r1
 310:	39 f6       	brne	.-114    	; 0x2a0 <keyboard_process+0x18>
		else{
			// set the right bit low
			keys[absoluteKey>>3] &= ~(1 << (absoluteKey%8));
		}
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <shift_in_keys>:
// this shifts data in from the parallel-to-serial 16bit shift register (first 11 bits are used for the 11 rows).
// works on PORTC
unsigned int shift_in_keys(){
	
	// turn off input shift register clock
	PORTC &= ~(1 << p_shift_in_clock);
 31c:	40 98       	cbi	0x08, 0	; 8
	
	// grab (clock in) all 16 bits to the register.
	PORTC &= ~(1 << p_shift_in_grab);
 31e:	41 98       	cbi	0x08, 1	; 8
	PORTC |=  (1 << p_shift_in_grab);
 320:	41 9a       	sbi	0x08, 1	; 8
	
	
	unsigned int i;
	unsigned char temp_input_buffer;
	unsigned int data_in = 0;
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
	
	for(i=0; i<16; i++){
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
		
		// read pin c
		temp_input_buffer = PINC;
		if( temp_input_buffer & (1 << p_shift_in_data) )
		data_in |= (1 << i);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	70 e0       	ldi	r23, 0x00	; 0
	
	for(i=0; i<16; i++){
		
		// read pin c
		temp_input_buffer = PINC;
		if( temp_input_buffer & (1 << p_shift_in_data) )
 32e:	32 9b       	sbis	0x06, 2	; 6
 330:	09 c0       	rjmp	.+18     	; 0x344 <shift_in_keys+0x28>
		data_in |= (1 << i);
 332:	cb 01       	movw	r24, r22
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <shift_in_keys+0x20>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <shift_in_keys+0x1c>
 340:	48 2b       	or	r20, r24
 342:	59 2b       	or	r21, r25
		
		// clock the next bit in
		PORTC &= ~(1 << p_shift_in_clock);
 344:	40 98       	cbi	0x08, 0	; 8
		PORTC |=  (1 << p_shift_in_clock);
 346:	40 9a       	sbi	0x08, 0	; 8
	
	unsigned int i;
	unsigned char temp_input_buffer;
	unsigned int data_in = 0;
	
	for(i=0; i<16; i++){
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	20 31       	cpi	r18, 0x10	; 16
 34e:	31 05       	cpc	r19, r1
 350:	71 f7       	brne	.-36     	; 0x32e <shift_in_keys+0x12>
		PORTC |=  (1 << p_shift_in_clock);
	}
	
	// return the data that was read (16 bits) first bit is the least significant.
	return data_in;
}
 352:	84 2f       	mov	r24, r20
 354:	95 2f       	mov	r25, r21
 356:	08 95       	ret

00000358 <keyboard_grab>:
// Because there are only 11 keys that the keyboard uses, there are 5 extra digital inputs that can be read.
// bits 0-10 (the first eleven bits) are for the keyboard.
// bit_11 (the twelfth bit) is a digital signal input that will indicate if the user wants to be in calibration mode.
// if bit_11 is high, the microcontroller will switch to calibration mode.
// if bit_11 is low, the microcontroller will be out of calibration mode.
unsigned int keyboard_grab(){
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	
	
	int k;									// this is used to index through the keys
	unsigned int registerData;				// this is 16 bits that stores the value of the 16-bit parallel-in serial-out shift register.
	
	PORTD |=  (1 << p_shift_keys_data);		// set keys shift register data bit to 1
 35e:	5c 9a       	sbi	0x0b, 4	; 11
	
	PORTD &= ~(1 << p_shift_keys_clock);	// clock out a 1
 360:	5b 98       	cbi	0x0b, 3	; 11
	PORTD |=  (1 << p_shift_keys_clock);
 362:	5b 9a       	sbi	0x0b, 3	; 11
	
	PORTD &=  ~(1 << p_shift_keys_data);	// set keys shift register data bit to 0
 364:	5c 98       	cbi	0x0b, 4	; 11
 366:	10 e0       	ldi	r17, 0x00	; 0
	// Eb/A fourth,
	// E/Bb fifth,
	// F/B  sixth.
	for(k=0; k<KEYBOARD_KEYS_PER_HALF_OCT; k++){
		// process the keyboard for a given key input (C and Gb, Db and G, D and Ab, etc...)
		registerData = shift_in_keys();
 368:	0e 94 8e 01 	call	0x31c	; 0x31c <shift_in_keys>
 36c:	ec 01       	movw	r28, r24
		keyboard_process(k, registerData);
 36e:	ac 01       	movw	r20, r24
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	81 2f       	mov	r24, r17
 376:	0e 94 44 01 	call	0x288	; 0x288 <keyboard_process>
		PORTD &= ~(1 << p_shift_keys_clock);	// clock the data further down the matrix.
 37a:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |=  (1 << p_shift_keys_clock);	// this will turn on the next key input
 37c:	5b 9a       	sbi	0x0b, 3	; 11
 37e:	1f 5f       	subi	r17, 0xFF	; 255
	// Db/G second,
	// D/Ab third,
	// Eb/A fourth,
	// E/Bb fifth,
	// F/B  sixth.
	for(k=0; k<KEYBOARD_KEYS_PER_HALF_OCT; k++){
 380:	16 30       	cpi	r17, 0x06	; 6
 382:	91 f7       	brne	.-28     	; 0x368 <keyboard_grab+0x10>
		PORTD &= ~(1 << p_shift_keys_clock);	// clock the data further down the matrix.
		PORTD |=  (1 << p_shift_keys_clock);	// this will turn on the next key input
	}
	
	// update the highest and lowest keyboard keys currently pressed
	keyboard_update_highest_lowest();
 384:	0e 94 16 01 	call	0x22c	; 0x22c <keyboard_update_highest_lowest>
	return registerData;
}
 388:	8c 2f       	mov	r24, r28
 38a:	9d 2f       	mov	r25, r29
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <update_all_outputs>:



// this updates the two DACs, the gate outputs, and the two DACs' respective gate outputs
void update_all_outputs(){
 394:	8f 92       	push	r8
 396:	9f 92       	push	r9
 398:	af 92       	push	r10
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
	
	// shift in most-significant-bit-first configuration.
	
	// shift out gate information.
	shift_out_328(  'D', p_shift_master_clock, p_shift_master_data, 2, ( (keyLowest != -1)<<1 ) | (keyHighest != -1), 'M'  );
 3a8:	80 91 02 01 	lds	r24, 0x0102
 3ac:	90 91 03 01 	lds	r25, 0x0103
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	19 f0       	breq	.+6      	; 0x3ba <update_all_outputs+0x26>
 3b4:	42 e0       	ldi	r20, 0x02	; 2
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <update_all_outputs+0x2a>
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	20 91 00 01 	lds	r18, 0x0100
 3c6:	30 91 01 01 	lds	r19, 0x0101
 3ca:	2f 3f       	cpi	r18, 0xFF	; 255
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <update_all_outputs+0x40>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	7a 01       	movw	r14, r20
 3d6:	e8 2a       	or	r14, r24
 3d8:	f9 2a       	or	r15, r25
 3da:	00 27       	eor	r16, r16
 3dc:	f7 fc       	sbrc	r15, 7
 3de:	00 95       	com	r16
 3e0:	10 2f       	mov	r17, r16
 3e2:	0f 2e       	mov	r0, r31
 3e4:	fd e4       	ldi	r31, 0x4D	; 77
 3e6:	cf 2e       	mov	r12, r31
 3e8:	f0 2d       	mov	r31, r0
 3ea:	22 e0       	ldi	r18, 0x02	; 2
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	0e 94 53 00 	call	0xa6	; 0xa6 <shift_out_328>
	
	
	// for the gate key[] outputs, the bits are inverted because the outputs of the hardware are inverted. Thus, two inversions cancel each other.
	
	// shift out the highest 9 bits of the key[] gate outputs.
	shift_out_328(  'D', p_shift_master_clock, p_shift_master_data, 9, ~((((unsigned int)keys[3]&0x01)<<8)|keys[2]), 'M'  );
 3f8:	20 91 07 01 	lds	r18, 0x0107
 3fc:	92 2f       	mov	r25, r18
 3fe:	91 70       	andi	r25, 0x01	; 1
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	20 91 06 01 	lds	r18, 0x0106
 406:	7c 01       	movw	r14, r24
 408:	e2 2a       	or	r14, r18
 40a:	e0 94       	com	r14
 40c:	f0 94       	com	r15
 40e:	00 e0       	ldi	r16, 0x00	; 0
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	29 e0       	ldi	r18, 0x09	; 9
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <shift_out_328>
	// shift out the bottom 16 bits of the key[] gate outputs.
	shift_out_328(  'D', p_shift_master_clock, p_shift_master_data, 16, ~((((unsigned int)keys[1])<<8)|keys[0]), 'M'  );
 420:	90 91 05 01 	lds	r25, 0x0105
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	20 91 04 01 	lds	r18, 0x0104
 42a:	7c 01       	movw	r14, r24
 42c:	e2 2a       	or	r14, r18
 42e:	e0 94       	com	r14
 430:	f0 94       	com	r15
 432:	00 e0       	ldi	r16, 0x00	; 0
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	20 e1       	ldi	r18, 0x10	; 16
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	84 e4       	ldi	r24, 0x44	; 68
 440:	0e 94 53 00 	call	0xa6	; 0xa6 <shift_out_328>
	
	
	// calculate the DAC_A bits.
	unsigned long int DAC_A = (keyHighest != -1)*((((unsigned int)1) << 12)-1)*(keyHighest/((float)(KEYBOARD_TOTAL_KEYS-1)));
 444:	60 91 00 01 	lds	r22, 0x0100
 448:	70 91 01 01 	lds	r23, 0x0101
 44c:	6f 3f       	cpi	r22, 0xFF	; 255
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	78 07       	cpc	r23, r24
 452:	51 f0       	breq	.+20     	; 0x468 <update_all_outputs+0xd4>
 454:	0f 2e       	mov	r0, r31
 456:	c1 2c       	mov	r12, r1
 458:	f0 ef       	ldi	r31, 0xF0	; 240
 45a:	df 2e       	mov	r13, r31
 45c:	ff e7       	ldi	r31, 0x7F	; 127
 45e:	ef 2e       	mov	r14, r31
 460:	f5 e4       	ldi	r31, 0x45	; 69
 462:	ff 2e       	mov	r15, r31
 464:	f0 2d       	mov	r31, r0
 466:	03 c0       	rjmp	.+6      	; 0x46e <update_all_outputs+0xda>
 468:	c1 2c       	mov	r12, r1
 46a:	d1 2c       	mov	r13, r1
 46c:	76 01       	movw	r14, r12
 46e:	88 27       	eor	r24, r24
 470:	77 fd       	sbrc	r23, 7
 472:	80 95       	com	r24
 474:	98 2f       	mov	r25, r24
 476:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 e7       	ldi	r20, 0x70	; 112
 480:	52 e4       	ldi	r21, 0x42	; 66
 482:	0e 94 97 03 	call	0x72e	; 0x72e <__divsf3>
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	c7 01       	movw	r24, r14
 48c:	b6 01       	movw	r22, r12
 48e:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 492:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixunssfsi>
 496:	c6 2e       	mov	r12, r22
 498:	d7 2e       	mov	r13, r23
 49a:	e8 2e       	mov	r14, r24
 49c:	f9 2e       	mov	r15, r25
	unsigned long int DAC_B = (keyLowest != -1)*((((unsigned int)1) << 12)-1)*(keyLowest /((float)(KEYBOARD_TOTAL_KEYS-1)));
 49e:	60 91 02 01 	lds	r22, 0x0102
 4a2:	70 91 03 01 	lds	r23, 0x0103
 4a6:	6f 3f       	cpi	r22, 0xFF	; 255
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	72 07       	cpc	r23, r18
 4ac:	51 f0       	breq	.+20     	; 0x4c2 <update_all_outputs+0x12e>
 4ae:	0f 2e       	mov	r0, r31
 4b0:	81 2c       	mov	r8, r1
 4b2:	f0 ef       	ldi	r31, 0xF0	; 240
 4b4:	9f 2e       	mov	r9, r31
 4b6:	ff e7       	ldi	r31, 0x7F	; 127
 4b8:	af 2e       	mov	r10, r31
 4ba:	f5 e4       	ldi	r31, 0x45	; 69
 4bc:	bf 2e       	mov	r11, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <update_all_outputs+0x134>
 4c2:	81 2c       	mov	r8, r1
 4c4:	91 2c       	mov	r9, r1
 4c6:	54 01       	movw	r10, r8
 4c8:	88 27       	eor	r24, r24
 4ca:	77 fd       	sbrc	r23, 7
 4cc:	80 95       	com	r24
 4ce:	98 2f       	mov	r25, r24
 4d0:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	40 e7       	ldi	r20, 0x70	; 112
 4da:	52 e4       	ldi	r21, 0x42	; 66
 4dc:	0e 94 97 03 	call	0x72e	; 0x72e <__divsf3>
 4e0:	9b 01       	movw	r18, r22
 4e2:	ac 01       	movw	r20, r24
 4e4:	c5 01       	movw	r24, r10
 4e6:	b4 01       	movw	r22, r8
 4e8:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 4ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixunssfsi>
	// shift out the DAC information most-significant-bit-first.
	shift_out_328(  'D', p_shift_master_clock, p_shift_master_data, 2*DAC_BIT_LENGTH, (DAC_B << 12)|DAC_A, 'M'  );
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	07 2e       	mov	r0, r23
 4f6:	7c e0       	ldi	r23, 0x0C	; 12
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	aa 1f       	adc	r26, r26
 4fe:	bb 1f       	adc	r27, r27
 500:	7a 95       	dec	r23
 502:	d1 f7       	brne	.-12     	; 0x4f8 <update_all_outputs+0x164>
 504:	70 2d       	mov	r23, r0
 506:	87 01       	movw	r16, r14
 508:	76 01       	movw	r14, r12
 50a:	e8 2a       	or	r14, r24
 50c:	f9 2a       	or	r15, r25
 50e:	0a 2b       	or	r16, r26
 510:	1b 2b       	or	r17, r27
 512:	0f 2e       	mov	r0, r31
 514:	fd e4       	ldi	r31, 0x4D	; 77
 516:	cf 2e       	mov	r12, r31
 518:	f0 2d       	mov	r31, r0
 51a:	28 e1       	ldi	r18, 0x18	; 24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	84 e4       	ldi	r24, 0x44	; 68
 524:	0e 94 53 00 	call	0xa6	; 0xa6 <shift_out_328>
	
	// clock the update pin and push everything through the buffer.
	PORTD &= ~(1 << p_shift_master_update);
 528:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |=  (1 << p_shift_master_update);
 52a:	5a 9a       	sbi	0x0b, 2	; 11
	
}
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	cf 90       	pop	r12
 538:	bf 90       	pop	r11
 53a:	af 90       	pop	r10
 53c:	9f 90       	pop	r9
 53e:	8f 90       	pop	r8
 540:	08 95       	ret

00000542 <calibration_mode>:

#define CALIBRATION_STOP_VALUE ((unsigned int)1 << 12)

// calibrationResolution is from 0 to 11.
// This variable describes how fine of steps are.
void calibration_mode(int calibrationResolution){
 542:	8f 92       	push	r8
 544:	9f 92       	push	r9
 546:	af 92       	push	r10
 548:	bf 92       	push	r11
 54a:	cf 92       	push	r12
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
	unsigned int k;
	
	for(k=0; k < KEYBOARD_TOTAL_KEYS; k++){
		
		// shift out the current calibration data
		shift_out_328( 'D', p_shift_master_clock, p_shift_master_data, DAC_BIT_LENGTH, ((unsigned int)(( (1<<DAC_BIT_LENGTH)-1) * (k/((float)KEYBOARD_TOTAL_KEYS)))/((float)(1<<calibrationResolution)) + 0.5f), 'M' );
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	9b 01       	movw	r18, r22
 55e:	02 c0       	rjmp	.+4      	; 0x564 <calibration_mode+0x22>
 560:	22 0f       	add	r18, r18
 562:	33 1f       	adc	r19, r19
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <calibration_mode+0x1e>
 568:	b9 01       	movw	r22, r18
 56a:	88 27       	eor	r24, r24
 56c:	77 fd       	sbrc	r23, 7
 56e:	80 95       	com	r24
 570:	98 2f       	mov	r25, r24
 572:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
void calibration_mode(int calibrationResolution){
	
	// this variable keeps track of the data that needs to be written to the DAC
	unsigned int k;
	
	for(k=0; k < KEYBOARD_TOTAL_KEYS; k++){
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
		
		// shift out the current calibration data
		shift_out_328( 'D', p_shift_master_clock, p_shift_master_data, DAC_BIT_LENGTH, ((unsigned int)(( (1<<DAC_BIT_LENGTH)-1) * (k/((float)KEYBOARD_TOTAL_KEYS)))/((float)(1<<calibrationResolution)) + 0.5f), 'M' );
 57e:	be 01       	movw	r22, r28
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 2b 04 	call	0x856	; 0x856 <__floatunsisf>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	44 e7       	ldi	r20, 0x74	; 116
 58e:	52 e4       	ldi	r21, 0x42	; 66
 590:	0e 94 97 03 	call	0x72e	; 0x72e <__divsf3>
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 ef       	ldi	r19, 0xF0	; 240
 598:	4f e7       	ldi	r20, 0x7F	; 127
 59a:	55 e4       	ldi	r21, 0x45	; 69
 59c:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 5a0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixunssfsi>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 2b 04 	call	0x856	; 0x856 <__floatunsisf>
 5ac:	a5 01       	movw	r20, r10
 5ae:	94 01       	movw	r18, r8
 5b0:	0e 94 97 03 	call	0x72e	; 0x72e <__divsf3>
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	5f e3       	ldi	r21, 0x3F	; 63
 5bc:	0e 94 33 03 	call	0x666	; 0x666 <__addsf3>
 5c0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixunssfsi>
 5c4:	0f 2e       	mov	r0, r31
 5c6:	fd e4       	ldi	r31, 0x4D	; 77
 5c8:	cf 2e       	mov	r12, r31
 5ca:	f0 2d       	mov	r31, r0
 5cc:	7b 01       	movw	r14, r22
 5ce:	8c 01       	movw	r16, r24
 5d0:	2c e0       	ldi	r18, 0x0C	; 12
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	84 e4       	ldi	r24, 0x44	; 68
 5da:	0e 94 53 00 	call	0xa6	; 0xa6 <shift_out_328>
		
		// clock the update pin and push everything through the buffer.
		PORTD &= ~(1 << p_shift_master_update);
 5de:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |=  (1 << p_shift_master_update);
 5e0:	5a 9a       	sbi	0x0b, 2	; 11
void calibration_mode(int calibrationResolution){
	
	// this variable keeps track of the data that needs to be written to the DAC
	unsigned int k;
	
	for(k=0; k < KEYBOARD_TOTAL_KEYS; k++){
 5e2:	21 96       	adiw	r28, 0x01	; 1
 5e4:	cd 33       	cpi	r28, 0x3D	; 61
 5e6:	d1 05       	cpc	r29, r1
 5e8:	51 f6       	brne	.-108    	; 0x57e <calibration_mode+0x3c>
		
		// clock the update pin and push everything through the buffer.
		PORTD &= ~(1 << p_shift_master_update);
		PORTD |=  (1 << p_shift_master_update);
	}
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	9f 90       	pop	r9
 5fe:	8f 90       	pop	r8
 600:	08 95       	ret

00000602 <main>:
{
	
	// initialize the PORT input/output settings
	
	// outputs of the input shift register
	DDRC |=  (1 << p_shift_in_clock) | (1 << p_shift_in_grab);
 602:	87 b1       	in	r24, 0x07	; 7
 604:	83 60       	ori	r24, 0x03	; 3
 606:	87 b9       	out	0x07, r24	; 7
	// input of the input shift register
	DDRC &= ~(1 << p_shift_in_data);
 608:	3a 98       	cbi	0x07, 2	; 7
	
	// outputs of the output keys shift register
	DDRD |=  (1 << p_shift_keys_clock) | (1 << p_shift_keys_data);
 60a:	8a b1       	in	r24, 0x0a	; 10
 60c:	88 61       	ori	r24, 0x18	; 24
 60e:	8a b9       	out	0x0a, r24	; 10
	
	// outputs of the output master shift register
	DDRD |=  (1 << p_shift_master_clock) | (1 << p_shift_master_data) | (1 << p_shift_master_update);
 610:	8a b1       	in	r24, 0x0a	; 10
 612:	87 60       	ori	r24, 0x07	; 7
 614:	8a b9       	out	0x0a, r24	; 10
	
	// turn off output keys shift register  clock and data pins
	PORTD &= ~(1 << p_shift_keys_clock);
 616:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << p_shift_keys_data);
 618:	5c 98       	cbi	0x0b, 4	; 11
	
	// turn off output DAC shift register clock and data pins
	PORTD &= ~(1 << p_shift_master_clock);
 61a:	58 98       	cbi	0x0b, 0	; 11
	PORTD &= ~(1 << p_shift_master_data);
 61c:	59 98       	cbi	0x0b, 1	; 11
	
	// turn off input shift register clock
	PORTC &= ~(1 << p_shift_in_clock);
 61e:	40 98       	cbi	0x08, 0	; 8
	// turn on  input shift register grab (disabled)
	PORTC |=  (1 << p_shift_in_grab);
 620:	41 9a       	sbi	0x08, 1	; 8
	unsigned int register16Data;
	// calibration resolution keeps track of how fine the calibration mode is set to (at a constant number of steps for a constant frequency)
	// this value can range from 0 to 11.
	int calibrationResolution = 0;
	// this keeps track of whether of not the last time through the main while(1) loop was spent in calibration mode
	bool calibratedLastTime = true;
 622:	ff 24       	eor	r15, r15
 624:	f3 94       	inc	r15
	// this is the variable that will store the value read from the 16-bit shift-in register.
	// this is used for thing like enabling/disabling calibration mode.
	unsigned int register16Data;
	// calibration resolution keeps track of how fine the calibration mode is set to (at a constant number of steps for a constant frequency)
	// this value can range from 0 to 11.
	int calibrationResolution = 0;
 626:	c0 e0       	ldi	r28, 0x00	; 0
 628:	d0 e0       	ldi	r29, 0x00	; 0
				calibrationResolution++;
				// and if the calibration resolution is too high, the resolution rolls over to the coarsest setting
				if(calibrationResolution >= DAC_BIT_LENGTH) calibrationResolution = 0;
			}
			// record that calibration has taken place
			calibratedLastTime = true;
 62a:	dd 24       	eor	r13, r13
 62c:	d3 94       	inc	r13
			// if this is the beginning of a calibration session,
			if(!calibratedLastTime){
				// then increase the calibration count
				calibrationResolution++;
				// and if the calibration resolution is too high, the resolution rolls over to the coarsest setting
				if(calibrationResolution >= DAC_BIT_LENGTH) calibrationResolution = 0;
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	10 e0       	ldi	r17, 0x00	; 0
		// otherwise,
		else{
			// update all of the outputs off of the master shift register
			update_all_outputs();
			// record that calibration has not taken place
			calibratedLastTime = false;
 632:	e1 2c       	mov	r14, r1
 634:	04 c0       	rjmp	.+8      	; 0x63e <main+0x3c>
				calibrationResolution++;
				// and if the calibration resolution is too high, the resolution rolls over to the coarsest setting
				if(calibrationResolution >= DAC_BIT_LENGTH) calibrationResolution = 0;
			}
			// record that calibration has taken place
			calibratedLastTime = true;
 636:	fd 2c       	mov	r15, r13
 638:	02 c0       	rjmp	.+4      	; 0x63e <main+0x3c>
 63a:	fd 2c       	mov	r15, r13
			// if this is the beginning of a calibration session,
			if(!calibratedLastTime){
				// then increase the calibration count
				calibrationResolution++;
				// and if the calibration resolution is too high, the resolution rolls over to the coarsest setting
				if(calibrationResolution >= DAC_BIT_LENGTH) calibrationResolution = 0;
 63c:	e8 01       	movw	r28, r16
	
    while(1)
    {
		
		// update the keyboard variables keys[], keyHighest, and keyLowest
		register16Data = keyboard_grab();
 63e:	0e 94 ac 01 	call	0x358	; 0x358 <keyboard_grab>
		
		// if calibrate mode is enabled,
		if(  register16Data & (  ((unsigned int)1) << b_calibrate_enable)  ){
 642:	93 ff       	sbrs	r25, 3
 644:	0b c0       	rjmp	.+22     	; 0x65c <main+0x5a>
			// run the calibration sequence and allow the user to manually calibrate the machine
			calibration_mode(calibrationResolution);
 646:	ce 01       	movw	r24, r28
 648:	0e 94 a1 02 	call	0x542	; 0x542 <calibration_mode>
			// if this is the beginning of a calibration session,
			if(!calibratedLastTime){
 64c:	f1 10       	cpse	r15, r1
 64e:	f3 cf       	rjmp	.-26     	; 0x636 <main+0x34>
				// then increase the calibration count
				calibrationResolution++;
 650:	21 96       	adiw	r28, 0x01	; 1
				// and if the calibration resolution is too high, the resolution rolls over to the coarsest setting
				if(calibrationResolution >= DAC_BIT_LENGTH) calibrationResolution = 0;
 652:	cc 30       	cpi	r28, 0x0C	; 12
 654:	d1 05       	cpc	r29, r1
 656:	8c f7       	brge	.-30     	; 0x63a <main+0x38>
			}
			// record that calibration has taken place
			calibratedLastTime = true;
 658:	fd 2c       	mov	r15, r13
 65a:	f1 cf       	rjmp	.-30     	; 0x63e <main+0x3c>
		}
		// otherwise,
		else{
			// update all of the outputs off of the master shift register
			update_all_outputs();
 65c:	0e 94 ca 01 	call	0x394	; 0x394 <update_all_outputs>
			// record that calibration has not taken place
			calibratedLastTime = false;
 660:	fe 2c       	mov	r15, r14
 662:	ed cf       	rjmp	.-38     	; 0x63e <main+0x3c>

00000664 <__subsf3>:
 664:	50 58       	subi	r21, 0x80	; 128

00000666 <__addsf3>:
 666:	bb 27       	eor	r27, r27
 668:	aa 27       	eor	r26, r26
 66a:	0e d0       	rcall	.+28     	; 0x688 <__addsf3x>
 66c:	48 c1       	rjmp	.+656    	; 0x8fe <__fp_round>
 66e:	39 d1       	rcall	.+626    	; 0x8e2 <__fp_pscA>
 670:	30 f0       	brcs	.+12     	; 0x67e <__addsf3+0x18>
 672:	3e d1       	rcall	.+636    	; 0x8f0 <__fp_pscB>
 674:	20 f0       	brcs	.+8      	; 0x67e <__addsf3+0x18>
 676:	31 f4       	brne	.+12     	; 0x684 <__addsf3+0x1e>
 678:	9f 3f       	cpi	r25, 0xFF	; 255
 67a:	11 f4       	brne	.+4      	; 0x680 <__addsf3+0x1a>
 67c:	1e f4       	brtc	.+6      	; 0x684 <__addsf3+0x1e>
 67e:	2e c1       	rjmp	.+604    	; 0x8dc <__fp_nan>
 680:	0e f4       	brtc	.+2      	; 0x684 <__addsf3+0x1e>
 682:	e0 95       	com	r30
 684:	e7 fb       	bst	r30, 7
 686:	24 c1       	rjmp	.+584    	; 0x8d0 <__fp_inf>

00000688 <__addsf3x>:
 688:	e9 2f       	mov	r30, r25
 68a:	4a d1       	rcall	.+660    	; 0x920 <__fp_split3>
 68c:	80 f3       	brcs	.-32     	; 0x66e <__addsf3+0x8>
 68e:	ba 17       	cp	r27, r26
 690:	62 07       	cpc	r22, r18
 692:	73 07       	cpc	r23, r19
 694:	84 07       	cpc	r24, r20
 696:	95 07       	cpc	r25, r21
 698:	18 f0       	brcs	.+6      	; 0x6a0 <__addsf3x+0x18>
 69a:	71 f4       	brne	.+28     	; 0x6b8 <__addsf3x+0x30>
 69c:	9e f5       	brtc	.+102    	; 0x704 <__addsf3x+0x7c>
 69e:	62 c1       	rjmp	.+708    	; 0x964 <__fp_zero>
 6a0:	0e f4       	brtc	.+2      	; 0x6a4 <__addsf3x+0x1c>
 6a2:	e0 95       	com	r30
 6a4:	0b 2e       	mov	r0, r27
 6a6:	ba 2f       	mov	r27, r26
 6a8:	a0 2d       	mov	r26, r0
 6aa:	0b 01       	movw	r0, r22
 6ac:	b9 01       	movw	r22, r18
 6ae:	90 01       	movw	r18, r0
 6b0:	0c 01       	movw	r0, r24
 6b2:	ca 01       	movw	r24, r20
 6b4:	a0 01       	movw	r20, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	ff 27       	eor	r31, r31
 6ba:	59 1b       	sub	r21, r25
 6bc:	99 f0       	breq	.+38     	; 0x6e4 <__addsf3x+0x5c>
 6be:	59 3f       	cpi	r21, 0xF9	; 249
 6c0:	50 f4       	brcc	.+20     	; 0x6d6 <__addsf3x+0x4e>
 6c2:	50 3e       	cpi	r21, 0xE0	; 224
 6c4:	68 f1       	brcs	.+90     	; 0x720 <__addsf3x+0x98>
 6c6:	1a 16       	cp	r1, r26
 6c8:	f0 40       	sbci	r31, 0x00	; 0
 6ca:	a2 2f       	mov	r26, r18
 6cc:	23 2f       	mov	r18, r19
 6ce:	34 2f       	mov	r19, r20
 6d0:	44 27       	eor	r20, r20
 6d2:	58 5f       	subi	r21, 0xF8	; 248
 6d4:	f3 cf       	rjmp	.-26     	; 0x6bc <__addsf3x+0x34>
 6d6:	46 95       	lsr	r20
 6d8:	37 95       	ror	r19
 6da:	27 95       	ror	r18
 6dc:	a7 95       	ror	r26
 6de:	f0 40       	sbci	r31, 0x00	; 0
 6e0:	53 95       	inc	r21
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__addsf3x+0x4e>
 6e4:	7e f4       	brtc	.+30     	; 0x704 <__addsf3x+0x7c>
 6e6:	1f 16       	cp	r1, r31
 6e8:	ba 0b       	sbc	r27, r26
 6ea:	62 0b       	sbc	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	ba f0       	brmi	.+46     	; 0x720 <__addsf3x+0x98>
 6f2:	91 50       	subi	r25, 0x01	; 1
 6f4:	a1 f0       	breq	.+40     	; 0x71e <__addsf3x+0x96>
 6f6:	ff 0f       	add	r31, r31
 6f8:	bb 1f       	adc	r27, r27
 6fa:	66 1f       	adc	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	88 1f       	adc	r24, r24
 700:	c2 f7       	brpl	.-16     	; 0x6f2 <__addsf3x+0x6a>
 702:	0e c0       	rjmp	.+28     	; 0x720 <__addsf3x+0x98>
 704:	ba 0f       	add	r27, r26
 706:	62 1f       	adc	r22, r18
 708:	73 1f       	adc	r23, r19
 70a:	84 1f       	adc	r24, r20
 70c:	48 f4       	brcc	.+18     	; 0x720 <__addsf3x+0x98>
 70e:	87 95       	ror	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f7 95       	ror	r31
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	08 f0       	brcs	.+2      	; 0x71e <__addsf3x+0x96>
 71c:	b3 cf       	rjmp	.-154    	; 0x684 <__addsf3+0x1e>
 71e:	93 95       	inc	r25
 720:	88 0f       	add	r24, r24
 722:	08 f0       	brcs	.+2      	; 0x726 <__addsf3x+0x9e>
 724:	99 27       	eor	r25, r25
 726:	ee 0f       	add	r30, r30
 728:	97 95       	ror	r25
 72a:	87 95       	ror	r24
 72c:	08 95       	ret

0000072e <__divsf3>:
 72e:	0c d0       	rcall	.+24     	; 0x748 <__divsf3x>
 730:	e6 c0       	rjmp	.+460    	; 0x8fe <__fp_round>
 732:	de d0       	rcall	.+444    	; 0x8f0 <__fp_pscB>
 734:	40 f0       	brcs	.+16     	; 0x746 <__divsf3+0x18>
 736:	d5 d0       	rcall	.+426    	; 0x8e2 <__fp_pscA>
 738:	30 f0       	brcs	.+12     	; 0x746 <__divsf3+0x18>
 73a:	21 f4       	brne	.+8      	; 0x744 <__divsf3+0x16>
 73c:	5f 3f       	cpi	r21, 0xFF	; 255
 73e:	19 f0       	breq	.+6      	; 0x746 <__divsf3+0x18>
 740:	c7 c0       	rjmp	.+398    	; 0x8d0 <__fp_inf>
 742:	51 11       	cpse	r21, r1
 744:	10 c1       	rjmp	.+544    	; 0x966 <__fp_szero>
 746:	ca c0       	rjmp	.+404    	; 0x8dc <__fp_nan>

00000748 <__divsf3x>:
 748:	eb d0       	rcall	.+470    	; 0x920 <__fp_split3>
 74a:	98 f3       	brcs	.-26     	; 0x732 <__divsf3+0x4>

0000074c <__divsf3_pse>:
 74c:	99 23       	and	r25, r25
 74e:	c9 f3       	breq	.-14     	; 0x742 <__divsf3+0x14>
 750:	55 23       	and	r21, r21
 752:	b1 f3       	breq	.-20     	; 0x740 <__divsf3+0x12>
 754:	95 1b       	sub	r25, r21
 756:	55 0b       	sbc	r21, r21
 758:	bb 27       	eor	r27, r27
 75a:	aa 27       	eor	r26, r26
 75c:	62 17       	cp	r22, r18
 75e:	73 07       	cpc	r23, r19
 760:	84 07       	cpc	r24, r20
 762:	38 f0       	brcs	.+14     	; 0x772 <__divsf3_pse+0x26>
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	5f 4f       	sbci	r21, 0xFF	; 255
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	44 1f       	adc	r20, r20
 76e:	aa 1f       	adc	r26, r26
 770:	a9 f3       	breq	.-22     	; 0x75c <__divsf3_pse+0x10>
 772:	33 d0       	rcall	.+102    	; 0x7da <__divsf3_pse+0x8e>
 774:	0e 2e       	mov	r0, r30
 776:	3a f0       	brmi	.+14     	; 0x786 <__divsf3_pse+0x3a>
 778:	e0 e8       	ldi	r30, 0x80	; 128
 77a:	30 d0       	rcall	.+96     	; 0x7dc <__divsf3_pse+0x90>
 77c:	91 50       	subi	r25, 0x01	; 1
 77e:	50 40       	sbci	r21, 0x00	; 0
 780:	e6 95       	lsr	r30
 782:	00 1c       	adc	r0, r0
 784:	ca f7       	brpl	.-14     	; 0x778 <__divsf3_pse+0x2c>
 786:	29 d0       	rcall	.+82     	; 0x7da <__divsf3_pse+0x8e>
 788:	fe 2f       	mov	r31, r30
 78a:	27 d0       	rcall	.+78     	; 0x7da <__divsf3_pse+0x8e>
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	bb 1f       	adc	r27, r27
 794:	26 17       	cp	r18, r22
 796:	37 07       	cpc	r19, r23
 798:	48 07       	cpc	r20, r24
 79a:	ab 07       	cpc	r26, r27
 79c:	b0 e8       	ldi	r27, 0x80	; 128
 79e:	09 f0       	breq	.+2      	; 0x7a2 <__divsf3_pse+0x56>
 7a0:	bb 0b       	sbc	r27, r27
 7a2:	80 2d       	mov	r24, r0
 7a4:	bf 01       	movw	r22, r30
 7a6:	ff 27       	eor	r31, r31
 7a8:	93 58       	subi	r25, 0x83	; 131
 7aa:	5f 4f       	sbci	r21, 0xFF	; 255
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__divsf3_pse+0x6c>
 7ae:	9e 3f       	cpi	r25, 0xFE	; 254
 7b0:	51 05       	cpc	r21, r1
 7b2:	68 f0       	brcs	.+26     	; 0x7ce <__divsf3_pse+0x82>
 7b4:	8d c0       	rjmp	.+282    	; 0x8d0 <__fp_inf>
 7b6:	d7 c0       	rjmp	.+430    	; 0x966 <__fp_szero>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	ec f3       	brlt	.-6      	; 0x7b6 <__divsf3_pse+0x6a>
 7bc:	98 3e       	cpi	r25, 0xE8	; 232
 7be:	dc f3       	brlt	.-10     	; 0x7b6 <__divsf3_pse+0x6a>
 7c0:	86 95       	lsr	r24
 7c2:	77 95       	ror	r23
 7c4:	67 95       	ror	r22
 7c6:	b7 95       	ror	r27
 7c8:	f7 95       	ror	r31
 7ca:	9f 5f       	subi	r25, 0xFF	; 255
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__divsf3_pse+0x74>
 7ce:	88 0f       	add	r24, r24
 7d0:	91 1d       	adc	r25, r1
 7d2:	96 95       	lsr	r25
 7d4:	87 95       	ror	r24
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret
 7da:	e1 e0       	ldi	r30, 0x01	; 1
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	bb 1f       	adc	r27, r27
 7e4:	62 17       	cp	r22, r18
 7e6:	73 07       	cpc	r23, r19
 7e8:	84 07       	cpc	r24, r20
 7ea:	ba 07       	cpc	r27, r26
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__divsf3_pse+0xaa>
 7ee:	62 1b       	sub	r22, r18
 7f0:	73 0b       	sbc	r23, r19
 7f2:	84 0b       	sbc	r24, r20
 7f4:	ba 0b       	sbc	r27, r26
 7f6:	ee 1f       	adc	r30, r30
 7f8:	88 f7       	brcc	.-30     	; 0x7dc <__divsf3_pse+0x90>
 7fa:	e0 95       	com	r30
 7fc:	08 95       	ret

000007fe <__fixunssfsi>:
 7fe:	98 d0       	rcall	.+304    	; 0x930 <__fp_splitA>
 800:	88 f0       	brcs	.+34     	; 0x824 <__fixunssfsi+0x26>
 802:	9f 57       	subi	r25, 0x7F	; 127
 804:	90 f0       	brcs	.+36     	; 0x82a <__fixunssfsi+0x2c>
 806:	b9 2f       	mov	r27, r25
 808:	99 27       	eor	r25, r25
 80a:	b7 51       	subi	r27, 0x17	; 23
 80c:	a0 f0       	brcs	.+40     	; 0x836 <__fixunssfsi+0x38>
 80e:	d1 f0       	breq	.+52     	; 0x844 <__fixunssfsi+0x46>
 810:	66 0f       	add	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	1a f0       	brmi	.+6      	; 0x820 <__fixunssfsi+0x22>
 81a:	ba 95       	dec	r27
 81c:	c9 f7       	brne	.-14     	; 0x810 <__fixunssfsi+0x12>
 81e:	12 c0       	rjmp	.+36     	; 0x844 <__fixunssfsi+0x46>
 820:	b1 30       	cpi	r27, 0x01	; 1
 822:	81 f0       	breq	.+32     	; 0x844 <__fixunssfsi+0x46>
 824:	9f d0       	rcall	.+318    	; 0x964 <__fp_zero>
 826:	b1 e0       	ldi	r27, 0x01	; 1
 828:	08 95       	ret
 82a:	9c c0       	rjmp	.+312    	; 0x964 <__fp_zero>
 82c:	67 2f       	mov	r22, r23
 82e:	78 2f       	mov	r23, r24
 830:	88 27       	eor	r24, r24
 832:	b8 5f       	subi	r27, 0xF8	; 248
 834:	39 f0       	breq	.+14     	; 0x844 <__fixunssfsi+0x46>
 836:	b9 3f       	cpi	r27, 0xF9	; 249
 838:	cc f3       	brlt	.-14     	; 0x82c <__fixunssfsi+0x2e>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b3 95       	inc	r27
 842:	d9 f7       	brne	.-10     	; 0x83a <__fixunssfsi+0x3c>
 844:	3e f4       	brtc	.+14     	; 0x854 <__fixunssfsi+0x56>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__floatunsisf>:
 856:	e8 94       	clt
 858:	09 c0       	rjmp	.+18     	; 0x86c <__floatsisf+0x12>

0000085a <__floatsisf>:
 85a:	97 fb       	bst	r25, 7
 85c:	3e f4       	brtc	.+14     	; 0x86c <__floatsisf+0x12>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	99 23       	and	r25, r25
 86e:	a9 f0       	breq	.+42     	; 0x89a <__floatsisf+0x40>
 870:	f9 2f       	mov	r31, r25
 872:	96 e9       	ldi	r25, 0x96	; 150
 874:	bb 27       	eor	r27, r27
 876:	93 95       	inc	r25
 878:	f6 95       	lsr	r31
 87a:	87 95       	ror	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f1 11       	cpse	r31, r1
 884:	f8 cf       	rjmp	.-16     	; 0x876 <__floatsisf+0x1c>
 886:	fa f4       	brpl	.+62     	; 0x8c6 <__floatsisf+0x6c>
 888:	bb 0f       	add	r27, r27
 88a:	11 f4       	brne	.+4      	; 0x890 <__floatsisf+0x36>
 88c:	60 ff       	sbrs	r22, 0
 88e:	1b c0       	rjmp	.+54     	; 0x8c6 <__floatsisf+0x6c>
 890:	6f 5f       	subi	r22, 0xFF	; 255
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <__floatsisf+0x6c>
 89a:	88 23       	and	r24, r24
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__floatsisf+0x48>
 89e:	96 e9       	ldi	r25, 0x96	; 150
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <__floatsisf+0x6a>
 8a2:	77 23       	and	r23, r23
 8a4:	21 f0       	breq	.+8      	; 0x8ae <__floatsisf+0x54>
 8a6:	9e e8       	ldi	r25, 0x8E	; 142
 8a8:	87 2f       	mov	r24, r23
 8aa:	76 2f       	mov	r23, r22
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__floatsisf+0x5e>
 8ae:	66 23       	and	r22, r22
 8b0:	71 f0       	breq	.+28     	; 0x8ce <__floatsisf+0x74>
 8b2:	96 e8       	ldi	r25, 0x86	; 134
 8b4:	86 2f       	mov	r24, r22
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	2a f0       	brmi	.+10     	; 0x8c6 <__floatsisf+0x6c>
 8bc:	9a 95       	dec	r25
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	da f7       	brpl	.-10     	; 0x8bc <__floatsisf+0x62>
 8c6:	88 0f       	add	r24, r24
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__fp_inf>:
 8d0:	97 f9       	bld	r25, 7
 8d2:	9f 67       	ori	r25, 0x7F	; 127
 8d4:	80 e8       	ldi	r24, 0x80	; 128
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	08 95       	ret

000008dc <__fp_nan>:
 8dc:	9f ef       	ldi	r25, 0xFF	; 255
 8de:	80 ec       	ldi	r24, 0xC0	; 192
 8e0:	08 95       	ret

000008e2 <__fp_pscA>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	16 16       	cp	r1, r22
 8e8:	17 06       	cpc	r1, r23
 8ea:	18 06       	cpc	r1, r24
 8ec:	09 06       	cpc	r0, r25
 8ee:	08 95       	ret

000008f0 <__fp_pscB>:
 8f0:	00 24       	eor	r0, r0
 8f2:	0a 94       	dec	r0
 8f4:	12 16       	cp	r1, r18
 8f6:	13 06       	cpc	r1, r19
 8f8:	14 06       	cpc	r1, r20
 8fa:	05 06       	cpc	r0, r21
 8fc:	08 95       	ret

000008fe <__fp_round>:
 8fe:	09 2e       	mov	r0, r25
 900:	03 94       	inc	r0
 902:	00 0c       	add	r0, r0
 904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
 906:	88 23       	and	r24, r24
 908:	52 f0       	brmi	.+20     	; 0x91e <__stack+0x1f>
 90a:	bb 0f       	add	r27, r27
 90c:	40 f4       	brcc	.+16     	; 0x91e <__stack+0x1f>
 90e:	bf 2b       	or	r27, r31
 910:	11 f4       	brne	.+4      	; 0x916 <__stack+0x17>
 912:	60 ff       	sbrs	r22, 0
 914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
 916:	6f 5f       	subi	r22, 0xFF	; 255
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__fp_split3>:
 920:	57 fd       	sbrc	r21, 7
 922:	90 58       	subi	r25, 0x80	; 128
 924:	44 0f       	add	r20, r20
 926:	55 1f       	adc	r21, r21
 928:	59 f0       	breq	.+22     	; 0x940 <__fp_splitA+0x10>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	71 f0       	breq	.+28     	; 0x94a <__fp_splitA+0x1a>
 92e:	47 95       	ror	r20

00000930 <__fp_splitA>:
 930:	88 0f       	add	r24, r24
 932:	97 fb       	bst	r25, 7
 934:	99 1f       	adc	r25, r25
 936:	61 f0       	breq	.+24     	; 0x950 <__fp_splitA+0x20>
 938:	9f 3f       	cpi	r25, 0xFF	; 255
 93a:	79 f0       	breq	.+30     	; 0x95a <__fp_splitA+0x2a>
 93c:	87 95       	ror	r24
 93e:	08 95       	ret
 940:	12 16       	cp	r1, r18
 942:	13 06       	cpc	r1, r19
 944:	14 06       	cpc	r1, r20
 946:	55 1f       	adc	r21, r21
 948:	f2 cf       	rjmp	.-28     	; 0x92e <__fp_split3+0xe>
 94a:	46 95       	lsr	r20
 94c:	f1 df       	rcall	.-30     	; 0x930 <__fp_splitA>
 94e:	08 c0       	rjmp	.+16     	; 0x960 <__fp_splitA+0x30>
 950:	16 16       	cp	r1, r22
 952:	17 06       	cpc	r1, r23
 954:	18 06       	cpc	r1, r24
 956:	99 1f       	adc	r25, r25
 958:	f1 cf       	rjmp	.-30     	; 0x93c <__fp_splitA+0xc>
 95a:	86 95       	lsr	r24
 95c:	71 05       	cpc	r23, r1
 95e:	61 05       	cpc	r22, r1
 960:	08 94       	sec
 962:	08 95       	ret

00000964 <__fp_zero>:
 964:	e8 94       	clt

00000966 <__fp_szero>:
 966:	bb 27       	eor	r27, r27
 968:	66 27       	eor	r22, r22
 96a:	77 27       	eor	r23, r23
 96c:	cb 01       	movw	r24, r22
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__mulsf3>:
 972:	0b d0       	rcall	.+22     	; 0x98a <__mulsf3x>
 974:	c4 cf       	rjmp	.-120    	; 0x8fe <__fp_round>
 976:	b5 df       	rcall	.-150    	; 0x8e2 <__fp_pscA>
 978:	28 f0       	brcs	.+10     	; 0x984 <__mulsf3+0x12>
 97a:	ba df       	rcall	.-140    	; 0x8f0 <__fp_pscB>
 97c:	18 f0       	brcs	.+6      	; 0x984 <__mulsf3+0x12>
 97e:	95 23       	and	r25, r21
 980:	09 f0       	breq	.+2      	; 0x984 <__mulsf3+0x12>
 982:	a6 cf       	rjmp	.-180    	; 0x8d0 <__fp_inf>
 984:	ab cf       	rjmp	.-170    	; 0x8dc <__fp_nan>
 986:	11 24       	eor	r1, r1
 988:	ee cf       	rjmp	.-36     	; 0x966 <__fp_szero>

0000098a <__mulsf3x>:
 98a:	ca df       	rcall	.-108    	; 0x920 <__fp_split3>
 98c:	a0 f3       	brcs	.-24     	; 0x976 <__mulsf3+0x4>

0000098e <__mulsf3_pse>:
 98e:	95 9f       	mul	r25, r21
 990:	d1 f3       	breq	.-12     	; 0x986 <__mulsf3+0x14>
 992:	95 0f       	add	r25, r21
 994:	50 e0       	ldi	r21, 0x00	; 0
 996:	55 1f       	adc	r21, r21
 998:	62 9f       	mul	r22, r18
 99a:	f0 01       	movw	r30, r0
 99c:	72 9f       	mul	r23, r18
 99e:	bb 27       	eor	r27, r27
 9a0:	f0 0d       	add	r31, r0
 9a2:	b1 1d       	adc	r27, r1
 9a4:	63 9f       	mul	r22, r19
 9a6:	aa 27       	eor	r26, r26
 9a8:	f0 0d       	add	r31, r0
 9aa:	b1 1d       	adc	r27, r1
 9ac:	aa 1f       	adc	r26, r26
 9ae:	64 9f       	mul	r22, r20
 9b0:	66 27       	eor	r22, r22
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	66 1f       	adc	r22, r22
 9b8:	82 9f       	mul	r24, r18
 9ba:	22 27       	eor	r18, r18
 9bc:	b0 0d       	add	r27, r0
 9be:	a1 1d       	adc	r26, r1
 9c0:	62 1f       	adc	r22, r18
 9c2:	73 9f       	mul	r23, r19
 9c4:	b0 0d       	add	r27, r0
 9c6:	a1 1d       	adc	r26, r1
 9c8:	62 1f       	adc	r22, r18
 9ca:	83 9f       	mul	r24, r19
 9cc:	a0 0d       	add	r26, r0
 9ce:	61 1d       	adc	r22, r1
 9d0:	22 1f       	adc	r18, r18
 9d2:	74 9f       	mul	r23, r20
 9d4:	33 27       	eor	r19, r19
 9d6:	a0 0d       	add	r26, r0
 9d8:	61 1d       	adc	r22, r1
 9da:	23 1f       	adc	r18, r19
 9dc:	84 9f       	mul	r24, r20
 9de:	60 0d       	add	r22, r0
 9e0:	21 1d       	adc	r18, r1
 9e2:	82 2f       	mov	r24, r18
 9e4:	76 2f       	mov	r23, r22
 9e6:	6a 2f       	mov	r22, r26
 9e8:	11 24       	eor	r1, r1
 9ea:	9f 57       	subi	r25, 0x7F	; 127
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	8a f0       	brmi	.+34     	; 0xa12 <__mulsf3_pse+0x84>
 9f0:	e1 f0       	breq	.+56     	; 0xa2a <__mulsf3_pse+0x9c>
 9f2:	88 23       	and	r24, r24
 9f4:	4a f0       	brmi	.+18     	; 0xa08 <__mulsf3_pse+0x7a>
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	bb 1f       	adc	r27, r27
 9fc:	66 1f       	adc	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	91 50       	subi	r25, 0x01	; 1
 a04:	50 40       	sbci	r21, 0x00	; 0
 a06:	a9 f7       	brne	.-22     	; 0x9f2 <__mulsf3_pse+0x64>
 a08:	9e 3f       	cpi	r25, 0xFE	; 254
 a0a:	51 05       	cpc	r21, r1
 a0c:	70 f0       	brcs	.+28     	; 0xa2a <__mulsf3_pse+0x9c>
 a0e:	60 cf       	rjmp	.-320    	; 0x8d0 <__fp_inf>
 a10:	aa cf       	rjmp	.-172    	; 0x966 <__fp_szero>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	ec f3       	brlt	.-6      	; 0xa10 <__mulsf3_pse+0x82>
 a16:	98 3e       	cpi	r25, 0xE8	; 232
 a18:	dc f3       	brlt	.-10     	; 0xa10 <__mulsf3_pse+0x82>
 a1a:	86 95       	lsr	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f7 95       	ror	r31
 a24:	e7 95       	ror	r30
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	c1 f7       	brne	.-16     	; 0xa1a <__mulsf3_pse+0x8c>
 a2a:	fe 2b       	or	r31, r30
 a2c:	88 0f       	add	r24, r24
 a2e:	91 1d       	adc	r25, r1
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
