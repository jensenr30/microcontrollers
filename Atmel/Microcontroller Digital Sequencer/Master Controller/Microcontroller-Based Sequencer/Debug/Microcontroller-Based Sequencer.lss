
Microcontroller-Based Sequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d46  00000dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  00800102  00800102  00000ddc  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000763  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000030e7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00003116  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000492  00000000  00000000  0000317e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000233  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003b5  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000134  00000000  00000000  00003bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000236  00000000  00000000  00003d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c61  00000000  00000000  00003f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00004bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_14>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  68:	b6 00       	.word	0x00b6	; ????
  6a:	73 02       	muls	r23, r19
  6c:	bb 00       	.word	0x00bb	; ????
  6e:	c0 00       	.word	0x00c0	; ????
  70:	c5 00       	.word	0x00c5	; ????
  72:	ca 00       	.word	0x00ca	; ????
  74:	cf 00       	.word	0x00cf	; ????
  76:	d4 00       	.word	0x00d4	; ????
  78:	d9 00       	.word	0x00d9	; ????
  7a:	de 00       	.word	0x00de	; ????
  7c:	e3 00       	.word	0x00e3	; ????
  7e:	e8 00       	.word	0x00e8	; ????
  80:	ed 00       	.word	0x00ed	; ????
  82:	f2 00       	.word	0x00f2	; ????
  84:	f7 00       	.word	0x00f7	; ????
  86:	fc 00       	.word	0x00fc	; ????
  88:	01 01       	movw	r0, r2
  8a:	06 01       	movw	r0, r12
  8c:	0b 01       	movw	r0, r22
  8e:	10 01       	movw	r2, r0
  90:	15 01       	movw	r2, r10
  92:	1a 01       	movw	r2, r20
  94:	1f 01       	movw	r2, r30
  96:	24 01       	movw	r4, r8
  98:	29 01       	movw	r4, r18
  9a:	2e 01       	movw	r4, r28
  9c:	33 01       	movw	r6, r6
  9e:	38 01       	movw	r6, r16
  a0:	3d 01       	movw	r6, r26
  a2:	42 01       	movw	r8, r4
  a4:	47 01       	movw	r8, r14
  a6:	4c 01       	movw	r8, r24
  a8:	51 01       	movw	r10, r2
  aa:	56 01       	movw	r10, r12
  ac:	5b 01       	movw	r10, r22
  ae:	60 01       	movw	r12, r0
  b0:	65 01       	movw	r12, r10
  b2:	6a 01       	movw	r12, r20
  b4:	6f 01       	movw	r12, r30
  b6:	74 01       	movw	r14, r8
  b8:	79 01       	movw	r14, r18
  ba:	7e 01       	movw	r14, r28
  bc:	83 01       	movw	r16, r6
  be:	88 01       	movw	r16, r16
  c0:	8d 01       	movw	r16, r26
  c2:	92 01       	movw	r18, r4
  c4:	97 01       	movw	r18, r14
  c6:	9c 01       	movw	r18, r24
  c8:	a1 01       	movw	r20, r2
  ca:	a6 01       	movw	r20, r12
  cc:	ab 01       	movw	r20, r22
  ce:	b0 01       	movw	r22, r0
  d0:	b5 01       	movw	r22, r10
  d2:	ba 01       	movw	r22, r20
  d4:	bf 01       	movw	r22, r30
  d6:	c4 01       	movw	r24, r8
  d8:	c9 01       	movw	r24, r18
  da:	ce 01       	movw	r24, r28
  dc:	d3 01       	movw	r26, r6
  de:	d8 01       	movw	r26, r16
  e0:	dd 01       	movw	r26, r26
  e2:	e2 01       	movw	r28, r4
  e4:	e7 01       	movw	r28, r14
  e6:	ec 01       	movw	r28, r24
  e8:	f1 01       	movw	r30, r2
  ea:	f6 01       	movw	r30, r12
  ec:	fb 01       	movw	r30, r22
  ee:	00 02       	muls	r16, r16
  f0:	05 02       	muls	r16, r21
  f2:	0a 02       	muls	r16, r26
  f4:	0f 02       	muls	r16, r31
  f6:	14 02       	muls	r17, r20
  f8:	19 02       	muls	r17, r25
  fa:	1e 02       	muls	r17, r30
  fc:	23 02       	muls	r18, r19
  fe:	28 02       	muls	r18, r24
 100:	2d 02       	muls	r18, r29
 102:	32 02       	muls	r19, r18
 104:	37 02       	muls	r19, r23
 106:	3c 02       	muls	r19, r28
 108:	41 02       	muls	r20, r17
 10a:	46 02       	muls	r20, r22
 10c:	4b 02       	muls	r20, r27
 10e:	50 02       	muls	r21, r16
 110:	55 02       	muls	r21, r21
 112:	5a 02       	muls	r21, r26
 114:	5f 02       	muls	r21, r31
 116:	64 02       	muls	r22, r20
 118:	69 02       	muls	r22, r25

0000011a <__ctors_end>:
 11a:	11 24       	eor	r1, r1
 11c:	1f be       	out	0x3f, r1	; 63
 11e:	cf ef       	ldi	r28, 0xFF	; 255
 120:	d8 e0       	ldi	r29, 0x08	; 8
 122:	de bf       	out	0x3e, r29	; 62
 124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
 126:	11 e0       	ldi	r17, 0x01	; 1
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	e6 e4       	ldi	r30, 0x46	; 70
 12e:	fd e0       	ldi	r31, 0x0D	; 13
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
 132:	05 90       	lpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a2 30       	cpi	r26, 0x02	; 2
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
 13c:	23 e0       	ldi	r18, 0x03	; 3
 13e:	a2 e0       	ldi	r26, 0x02	; 2
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a5 30       	cpi	r26, 0x05	; 5
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	0e 94 47 04 	call	0x88e	; 0x88e <main>
 150:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <_exit>

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <get_freq>:



float get_freq(unsigned char keyNumber){
	
	switch(keyNumber){
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e9 35       	cpi	r30, 0x59	; 89
 15e:	f1 05       	cpc	r31, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <get_freq+0xc>
 162:	bc c1       	rjmp	.+888    	; 0x4dc <get_freq+0x384>
 164:	ec 5c       	subi	r30, 0xCC	; 204
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__tablejump2__>
		case n_same: return f_same;
 16c:	73 ea       	ldi	r23, 0xA3	; 163
 16e:	69 e7       	ldi	r22, 0x79	; 121
 170:	9b ee       	ldi	r25, 0xEB	; 235
 172:	8c e4       	ldi	r24, 0x4C	; 76
 174:	bc c1       	rjmp	.+888    	; 0x4ee <get_freq+0x396>
		case n_A0:  return f_A0;
		case n_A0s: return f_A0s;
 176:	76 ef       	ldi	r23, 0xF6	; 246
 178:	64 e1       	ldi	r22, 0x14	; 20
 17a:	99 ee       	ldi	r25, 0xE9	; 233
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	b7 c1       	rjmp	.+878    	; 0x4ee <get_freq+0x396>
		case n_B0:  return f_B0;
 180:	70 e1       	ldi	r23, 0x10	; 16
 182:	61 ef       	ldi	r22, 0xF1	; 241
 184:	96 ef       	ldi	r25, 0xF6	; 246
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	b2 c1       	rjmp	.+868    	; 0x4ee <get_freq+0x396>
		case n_C1:  return f_C1;
 18a:	73 e1       	ldi	r23, 0x13	; 19
 18c:	60 ed       	ldi	r22, 0xD0	; 208
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	ad c1       	rjmp	.+858    	; 0x4ee <get_freq+0x396>
		case n_C1s: return f_C1s;
 194:	70 e6       	ldi	r23, 0x60	; 96
 196:	67 e9       	ldi	r22, 0x97	; 151
 198:	9a e0       	ldi	r25, 0x0A	; 10
 19a:	82 e4       	ldi	r24, 0x42	; 66
 19c:	a8 c1       	rjmp	.+848    	; 0x4ee <get_freq+0x396>
		case n_D1:  return f_D1;
 19e:	77 e1       	ldi	r23, 0x17	; 23
 1a0:	65 ed       	ldi	r22, 0xD5	; 213
 1a2:	92 e1       	ldi	r25, 0x12	; 18
 1a4:	82 e4       	ldi	r24, 0x42	; 66
 1a6:	a3 c1       	rjmp	.+838    	; 0x4ee <get_freq+0x396>
		case n_D1s: return f_D1s;
 1a8:	71 e4       	ldi	r23, 0x41	; 65
 1aa:	60 e9       	ldi	r22, 0x90	; 144
 1ac:	9b e1       	ldi	r25, 0x1B	; 27
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	9e c1       	rjmp	.+828    	; 0x4ee <get_freq+0x396>
		case n_E1:  return f_E1;
 1b2:	74 e5       	ldi	r23, 0x54	; 84
 1b4:	60 ed       	ldi	r22, 0xD0	; 208
 1b6:	94 e2       	ldi	r25, 0x24	; 36
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	99 c1       	rjmp	.+818    	; 0x4ee <get_freq+0x396>
		case n_F1:  return f_F1;
 1bc:	77 e3       	ldi	r23, 0x37	; 55
 1be:	6d e9       	ldi	r22, 0x9D	; 157
 1c0:	9e e2       	ldi	r25, 0x2E	; 46
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	94 c1       	rjmp	.+808    	; 0x4ee <get_freq+0x396>
		case n_F1s: return f_F1s;
 1c6:	79 e4       	ldi	r23, 0x49	; 73
 1c8:	6f ef       	ldi	r22, 0xFF	; 255
 1ca:	98 e3       	ldi	r25, 0x38	; 56
 1cc:	82 e4       	ldi	r24, 0x42	; 66
 1ce:	8f c1       	rjmp	.+798    	; 0x4ee <get_freq+0x396>
		case n_G1:  return f_G1;
 1d0:	7a e6       	ldi	r23, 0x6A	; 106
 1d2:	6f ef       	ldi	r22, 0xFF	; 255
 1d4:	93 e4       	ldi	r25, 0x43	; 67
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	8a c1       	rjmp	.+788    	; 0x4ee <get_freq+0x396>
		case n_G1s: return f_G1s;
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	67 ea       	ldi	r22, 0xA7	; 167
 1de:	9f e4       	ldi	r25, 0x4F	; 79
 1e0:	82 e4       	ldi	r24, 0x42	; 66
 1e2:	85 c1       	rjmp	.+778    	; 0x4ee <get_freq+0x396>
		case n_A1:  return f_A1;
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	9c e5       	ldi	r25, 0x5C	; 92
 1ea:	82 e4       	ldi	r24, 0x42	; 66
 1ec:	80 c1       	rjmp	.+768    	; 0x4ee <get_freq+0x396>
		case n_A1s: return f_A1s;
 1ee:	76 ef       	ldi	r23, 0xF6	; 246
 1f0:	64 e1       	ldi	r22, 0x14	; 20
 1f2:	99 e6       	ldi	r25, 0x69	; 105
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	7b c1       	rjmp	.+758    	; 0x4ee <get_freq+0x396>
		case n_B1:  return f_B1;
 1f8:	70 e1       	ldi	r23, 0x10	; 16
 1fa:	61 ef       	ldi	r22, 0xF1	; 241
 1fc:	96 e7       	ldi	r25, 0x76	; 118
 1fe:	82 e4       	ldi	r24, 0x42	; 66
 200:	76 c1       	rjmp	.+748    	; 0x4ee <get_freq+0x396>
		case n_C2:  return f_C2;
 202:	73 e1       	ldi	r23, 0x13	; 19
 204:	60 ed       	ldi	r22, 0xD0	; 208
 206:	92 e8       	ldi	r25, 0x82	; 130
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	71 c1       	rjmp	.+738    	; 0x4ee <get_freq+0x396>
		case n_C2s: return f_C2s;
 20c:	70 e6       	ldi	r23, 0x60	; 96
 20e:	67 e9       	ldi	r22, 0x97	; 151
 210:	9a e8       	ldi	r25, 0x8A	; 138
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	6c c1       	rjmp	.+728    	; 0x4ee <get_freq+0x396>
		case n_D2:  return f_D2;
 216:	77 e1       	ldi	r23, 0x17	; 23
 218:	65 ed       	ldi	r22, 0xD5	; 213
 21a:	92 e9       	ldi	r25, 0x92	; 146
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	67 c1       	rjmp	.+718    	; 0x4ee <get_freq+0x396>
		case n_D2s: return f_D2s;
 220:	71 e4       	ldi	r23, 0x41	; 65
 222:	60 e9       	ldi	r22, 0x90	; 144
 224:	9b e9       	ldi	r25, 0x9B	; 155
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	62 c1       	rjmp	.+708    	; 0x4ee <get_freq+0x396>
		case n_E2:  return f_E2;
 22a:	74 e5       	ldi	r23, 0x54	; 84
 22c:	60 ed       	ldi	r22, 0xD0	; 208
 22e:	94 ea       	ldi	r25, 0xA4	; 164
 230:	82 e4       	ldi	r24, 0x42	; 66
 232:	5d c1       	rjmp	.+698    	; 0x4ee <get_freq+0x396>
		case n_F2:  return f_F2;
 234:	77 e3       	ldi	r23, 0x37	; 55
 236:	6d e9       	ldi	r22, 0x9D	; 157
 238:	9e ea       	ldi	r25, 0xAE	; 174
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	58 c1       	rjmp	.+688    	; 0x4ee <get_freq+0x396>
		case n_F2s: return f_F2s;
 23e:	79 e4       	ldi	r23, 0x49	; 73
 240:	6f ef       	ldi	r22, 0xFF	; 255
 242:	98 eb       	ldi	r25, 0xB8	; 184
 244:	82 e4       	ldi	r24, 0x42	; 66
 246:	53 c1       	rjmp	.+678    	; 0x4ee <get_freq+0x396>
		case n_G2:  return f_G2;
 248:	7a e6       	ldi	r23, 0x6A	; 106
 24a:	6f ef       	ldi	r22, 0xFF	; 255
 24c:	93 ec       	ldi	r25, 0xC3	; 195
 24e:	82 e4       	ldi	r24, 0x42	; 66
 250:	4e c1       	rjmp	.+668    	; 0x4ee <get_freq+0x396>
		case n_G2s: return f_G2s;
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	67 ea       	ldi	r22, 0xA7	; 167
 256:	9f ec       	ldi	r25, 0xCF	; 207
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	49 c1       	rjmp	.+658    	; 0x4ee <get_freq+0x396>
		case n_A2:  return f_A2;
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	9c ed       	ldi	r25, 0xDC	; 220
 262:	82 e4       	ldi	r24, 0x42	; 66
 264:	44 c1       	rjmp	.+648    	; 0x4ee <get_freq+0x396>
		case n_A2s: return f_A2s;
 266:	76 ef       	ldi	r23, 0xF6	; 246
 268:	64 e1       	ldi	r22, 0x14	; 20
 26a:	99 ee       	ldi	r25, 0xE9	; 233
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	3f c1       	rjmp	.+638    	; 0x4ee <get_freq+0x396>
		case n_B2:  return f_B2;
 270:	70 e1       	ldi	r23, 0x10	; 16
 272:	61 ef       	ldi	r22, 0xF1	; 241
 274:	96 ef       	ldi	r25, 0xF6	; 246
 276:	82 e4       	ldi	r24, 0x42	; 66
 278:	3a c1       	rjmp	.+628    	; 0x4ee <get_freq+0x396>
		case n_C3:  return f_C3;
 27a:	73 e1       	ldi	r23, 0x13	; 19
 27c:	60 ed       	ldi	r22, 0xD0	; 208
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	83 e4       	ldi	r24, 0x43	; 67
 282:	35 c1       	rjmp	.+618    	; 0x4ee <get_freq+0x396>
		case n_C3s: return f_C3s;
 284:	70 e6       	ldi	r23, 0x60	; 96
 286:	67 e9       	ldi	r22, 0x97	; 151
 288:	9a e0       	ldi	r25, 0x0A	; 10
 28a:	83 e4       	ldi	r24, 0x43	; 67
 28c:	30 c1       	rjmp	.+608    	; 0x4ee <get_freq+0x396>
		case n_D3:  return f_D3;
 28e:	77 e1       	ldi	r23, 0x17	; 23
 290:	65 ed       	ldi	r22, 0xD5	; 213
 292:	92 e1       	ldi	r25, 0x12	; 18
 294:	83 e4       	ldi	r24, 0x43	; 67
 296:	2b c1       	rjmp	.+598    	; 0x4ee <get_freq+0x396>
		case n_D3s: return f_D3s;
 298:	71 e4       	ldi	r23, 0x41	; 65
 29a:	60 e9       	ldi	r22, 0x90	; 144
 29c:	9b e1       	ldi	r25, 0x1B	; 27
 29e:	83 e4       	ldi	r24, 0x43	; 67
 2a0:	26 c1       	rjmp	.+588    	; 0x4ee <get_freq+0x396>
		case n_E3:  return f_E3;
 2a2:	74 e5       	ldi	r23, 0x54	; 84
 2a4:	60 ed       	ldi	r22, 0xD0	; 208
 2a6:	94 e2       	ldi	r25, 0x24	; 36
 2a8:	83 e4       	ldi	r24, 0x43	; 67
 2aa:	21 c1       	rjmp	.+578    	; 0x4ee <get_freq+0x396>
		case n_F3:  return f_F3;
 2ac:	77 e3       	ldi	r23, 0x37	; 55
 2ae:	6d e9       	ldi	r22, 0x9D	; 157
 2b0:	9e e2       	ldi	r25, 0x2E	; 46
 2b2:	83 e4       	ldi	r24, 0x43	; 67
 2b4:	1c c1       	rjmp	.+568    	; 0x4ee <get_freq+0x396>
		case n_F3s: return f_F3s;
 2b6:	79 e4       	ldi	r23, 0x49	; 73
 2b8:	6f ef       	ldi	r22, 0xFF	; 255
 2ba:	98 e3       	ldi	r25, 0x38	; 56
 2bc:	83 e4       	ldi	r24, 0x43	; 67
 2be:	17 c1       	rjmp	.+558    	; 0x4ee <get_freq+0x396>
		case n_G3:  return f_G3;
 2c0:	7a e6       	ldi	r23, 0x6A	; 106
 2c2:	6f ef       	ldi	r22, 0xFF	; 255
 2c4:	93 e4       	ldi	r25, 0x43	; 67
 2c6:	83 e4       	ldi	r24, 0x43	; 67
 2c8:	12 c1       	rjmp	.+548    	; 0x4ee <get_freq+0x396>
		case n_G3s: return f_G3s;
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	67 ea       	ldi	r22, 0xA7	; 167
 2ce:	9f e4       	ldi	r25, 0x4F	; 79
 2d0:	83 e4       	ldi	r24, 0x43	; 67
 2d2:	0d c1       	rjmp	.+538    	; 0x4ee <get_freq+0x396>
		case n_A3:  return f_A3;
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	9c e5       	ldi	r25, 0x5C	; 92
 2da:	83 e4       	ldi	r24, 0x43	; 67
 2dc:	08 c1       	rjmp	.+528    	; 0x4ee <get_freq+0x396>
		case n_A3s: return f_A3s;
 2de:	76 ef       	ldi	r23, 0xF6	; 246
 2e0:	64 e1       	ldi	r22, 0x14	; 20
 2e2:	99 e6       	ldi	r25, 0x69	; 105
 2e4:	83 e4       	ldi	r24, 0x43	; 67
 2e6:	03 c1       	rjmp	.+518    	; 0x4ee <get_freq+0x396>
		case n_B3:  return f_B3;
 2e8:	70 e1       	ldi	r23, 0x10	; 16
 2ea:	61 ef       	ldi	r22, 0xF1	; 241
 2ec:	96 e7       	ldi	r25, 0x76	; 118
 2ee:	83 e4       	ldi	r24, 0x43	; 67
 2f0:	fe c0       	rjmp	.+508    	; 0x4ee <get_freq+0x396>
		case n_C4:  return f_C4;
 2f2:	73 e1       	ldi	r23, 0x13	; 19
 2f4:	60 ed       	ldi	r22, 0xD0	; 208
 2f6:	92 e8       	ldi	r25, 0x82	; 130
 2f8:	83 e4       	ldi	r24, 0x43	; 67
 2fa:	f9 c0       	rjmp	.+498    	; 0x4ee <get_freq+0x396>
		case n_C4s: return f_C4s;
 2fc:	70 e6       	ldi	r23, 0x60	; 96
 2fe:	67 e9       	ldi	r22, 0x97	; 151
 300:	9a e8       	ldi	r25, 0x8A	; 138
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	f4 c0       	rjmp	.+488    	; 0x4ee <get_freq+0x396>
		case n_D4:  return f_D4;
 306:	77 e1       	ldi	r23, 0x17	; 23
 308:	65 ed       	ldi	r22, 0xD5	; 213
 30a:	92 e9       	ldi	r25, 0x92	; 146
 30c:	83 e4       	ldi	r24, 0x43	; 67
 30e:	ef c0       	rjmp	.+478    	; 0x4ee <get_freq+0x396>
		case n_D4s: return f_D4s;
 310:	71 e4       	ldi	r23, 0x41	; 65
 312:	60 e9       	ldi	r22, 0x90	; 144
 314:	9b e9       	ldi	r25, 0x9B	; 155
 316:	83 e4       	ldi	r24, 0x43	; 67
 318:	ea c0       	rjmp	.+468    	; 0x4ee <get_freq+0x396>
		case n_E4:  return f_E4;
 31a:	74 e5       	ldi	r23, 0x54	; 84
 31c:	60 ed       	ldi	r22, 0xD0	; 208
 31e:	94 ea       	ldi	r25, 0xA4	; 164
 320:	83 e4       	ldi	r24, 0x43	; 67
 322:	e5 c0       	rjmp	.+458    	; 0x4ee <get_freq+0x396>
		case n_F4:  return f_F4;
 324:	77 e3       	ldi	r23, 0x37	; 55
 326:	6d e9       	ldi	r22, 0x9D	; 157
 328:	9e ea       	ldi	r25, 0xAE	; 174
 32a:	83 e4       	ldi	r24, 0x43	; 67
 32c:	e0 c0       	rjmp	.+448    	; 0x4ee <get_freq+0x396>
		case n_F4s: return f_F4s;
 32e:	79 e4       	ldi	r23, 0x49	; 73
 330:	6f ef       	ldi	r22, 0xFF	; 255
 332:	98 eb       	ldi	r25, 0xB8	; 184
 334:	83 e4       	ldi	r24, 0x43	; 67
 336:	db c0       	rjmp	.+438    	; 0x4ee <get_freq+0x396>
		case n_G4:  return f_G4;
 338:	7a e6       	ldi	r23, 0x6A	; 106
 33a:	6f ef       	ldi	r22, 0xFF	; 255
 33c:	93 ec       	ldi	r25, 0xC3	; 195
 33e:	83 e4       	ldi	r24, 0x43	; 67
 340:	d6 c0       	rjmp	.+428    	; 0x4ee <get_freq+0x396>
		case n_G4s: return f_G4s;
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	67 ea       	ldi	r22, 0xA7	; 167
 346:	9f ec       	ldi	r25, 0xCF	; 207
 348:	83 e4       	ldi	r24, 0x43	; 67
 34a:	d1 c0       	rjmp	.+418    	; 0x4ee <get_freq+0x396>
		case n_A4:  return f_A4;
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	9c ed       	ldi	r25, 0xDC	; 220
 352:	83 e4       	ldi	r24, 0x43	; 67
 354:	cc c0       	rjmp	.+408    	; 0x4ee <get_freq+0x396>
		case n_A4s: return f_A4s;
 356:	76 ef       	ldi	r23, 0xF6	; 246
 358:	64 e1       	ldi	r22, 0x14	; 20
 35a:	99 ee       	ldi	r25, 0xE9	; 233
 35c:	83 e4       	ldi	r24, 0x43	; 67
 35e:	c7 c0       	rjmp	.+398    	; 0x4ee <get_freq+0x396>
		case n_B4:  return f_B4;
 360:	70 e1       	ldi	r23, 0x10	; 16
 362:	61 ef       	ldi	r22, 0xF1	; 241
 364:	96 ef       	ldi	r25, 0xF6	; 246
 366:	83 e4       	ldi	r24, 0x43	; 67
 368:	c2 c0       	rjmp	.+388    	; 0x4ee <get_freq+0x396>
		case n_C5:  return f_C5;
 36a:	73 e1       	ldi	r23, 0x13	; 19
 36c:	60 ed       	ldi	r22, 0xD0	; 208
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	84 e4       	ldi	r24, 0x44	; 68
 372:	bd c0       	rjmp	.+378    	; 0x4ee <get_freq+0x396>
		case n_C5s: return f_C5s;
 374:	70 e6       	ldi	r23, 0x60	; 96
 376:	67 e9       	ldi	r22, 0x97	; 151
 378:	9a e0       	ldi	r25, 0x0A	; 10
 37a:	84 e4       	ldi	r24, 0x44	; 68
 37c:	b8 c0       	rjmp	.+368    	; 0x4ee <get_freq+0x396>
		case n_D5:  return f_D5;
 37e:	77 e1       	ldi	r23, 0x17	; 23
 380:	65 ed       	ldi	r22, 0xD5	; 213
 382:	92 e1       	ldi	r25, 0x12	; 18
 384:	84 e4       	ldi	r24, 0x44	; 68
 386:	b3 c0       	rjmp	.+358    	; 0x4ee <get_freq+0x396>
		case n_D5s: return f_D5s;
 388:	71 e4       	ldi	r23, 0x41	; 65
 38a:	60 e9       	ldi	r22, 0x90	; 144
 38c:	9b e1       	ldi	r25, 0x1B	; 27
 38e:	84 e4       	ldi	r24, 0x44	; 68
 390:	ae c0       	rjmp	.+348    	; 0x4ee <get_freq+0x396>
		case n_E5:  return f_E5;
 392:	74 e5       	ldi	r23, 0x54	; 84
 394:	60 ed       	ldi	r22, 0xD0	; 208
 396:	94 e2       	ldi	r25, 0x24	; 36
 398:	84 e4       	ldi	r24, 0x44	; 68
 39a:	a9 c0       	rjmp	.+338    	; 0x4ee <get_freq+0x396>
		case n_F5:  return f_F5;
 39c:	77 e3       	ldi	r23, 0x37	; 55
 39e:	6d e9       	ldi	r22, 0x9D	; 157
 3a0:	9e e2       	ldi	r25, 0x2E	; 46
 3a2:	84 e4       	ldi	r24, 0x44	; 68
 3a4:	a4 c0       	rjmp	.+328    	; 0x4ee <get_freq+0x396>
		case n_F5s: return f_F5s;
 3a6:	79 e4       	ldi	r23, 0x49	; 73
 3a8:	6f ef       	ldi	r22, 0xFF	; 255
 3aa:	98 e3       	ldi	r25, 0x38	; 56
 3ac:	84 e4       	ldi	r24, 0x44	; 68
 3ae:	9f c0       	rjmp	.+318    	; 0x4ee <get_freq+0x396>
		case n_G5:  return f_G5;
 3b0:	7a e6       	ldi	r23, 0x6A	; 106
 3b2:	6f ef       	ldi	r22, 0xFF	; 255
 3b4:	93 e4       	ldi	r25, 0x43	; 67
 3b6:	84 e4       	ldi	r24, 0x44	; 68
 3b8:	9a c0       	rjmp	.+308    	; 0x4ee <get_freq+0x396>
		case n_G5s: return f_G5s;
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	67 ea       	ldi	r22, 0xA7	; 167
 3be:	9f e4       	ldi	r25, 0x4F	; 79
 3c0:	84 e4       	ldi	r24, 0x44	; 68
 3c2:	95 c0       	rjmp	.+298    	; 0x4ee <get_freq+0x396>
		case n_A5:  return f_A5;
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	9c e5       	ldi	r25, 0x5C	; 92
 3ca:	84 e4       	ldi	r24, 0x44	; 68
 3cc:	90 c0       	rjmp	.+288    	; 0x4ee <get_freq+0x396>
		case n_A5s: return f_A5s;
 3ce:	76 ef       	ldi	r23, 0xF6	; 246
 3d0:	64 e1       	ldi	r22, 0x14	; 20
 3d2:	99 e6       	ldi	r25, 0x69	; 105
 3d4:	84 e4       	ldi	r24, 0x44	; 68
 3d6:	8b c0       	rjmp	.+278    	; 0x4ee <get_freq+0x396>
		case n_B5:  return f_B5;
 3d8:	70 e1       	ldi	r23, 0x10	; 16
 3da:	61 ef       	ldi	r22, 0xF1	; 241
 3dc:	96 e7       	ldi	r25, 0x76	; 118
 3de:	84 e4       	ldi	r24, 0x44	; 68
 3e0:	86 c0       	rjmp	.+268    	; 0x4ee <get_freq+0x396>
		case n_C6:  return f_C6;
 3e2:	73 e1       	ldi	r23, 0x13	; 19
 3e4:	60 ed       	ldi	r22, 0xD0	; 208
 3e6:	92 e8       	ldi	r25, 0x82	; 130
 3e8:	84 e4       	ldi	r24, 0x44	; 68
 3ea:	81 c0       	rjmp	.+258    	; 0x4ee <get_freq+0x396>
		case n_C6s: return f_C6s;
 3ec:	70 e6       	ldi	r23, 0x60	; 96
 3ee:	67 e9       	ldi	r22, 0x97	; 151
 3f0:	9a e8       	ldi	r25, 0x8A	; 138
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	7c c0       	rjmp	.+248    	; 0x4ee <get_freq+0x396>
		case n_D6:  return f_D6;
 3f6:	77 e1       	ldi	r23, 0x17	; 23
 3f8:	65 ed       	ldi	r22, 0xD5	; 213
 3fa:	92 e9       	ldi	r25, 0x92	; 146
 3fc:	84 e4       	ldi	r24, 0x44	; 68
 3fe:	77 c0       	rjmp	.+238    	; 0x4ee <get_freq+0x396>
		case n_D6s: return f_D6s;
 400:	71 e4       	ldi	r23, 0x41	; 65
 402:	60 e9       	ldi	r22, 0x90	; 144
 404:	9b e9       	ldi	r25, 0x9B	; 155
 406:	84 e4       	ldi	r24, 0x44	; 68
 408:	72 c0       	rjmp	.+228    	; 0x4ee <get_freq+0x396>
		case n_E6:  return f_E6;
 40a:	74 e5       	ldi	r23, 0x54	; 84
 40c:	60 ed       	ldi	r22, 0xD0	; 208
 40e:	94 ea       	ldi	r25, 0xA4	; 164
 410:	84 e4       	ldi	r24, 0x44	; 68
 412:	6d c0       	rjmp	.+218    	; 0x4ee <get_freq+0x396>
		case n_F6:  return f_F6;
 414:	77 e3       	ldi	r23, 0x37	; 55
 416:	6d e9       	ldi	r22, 0x9D	; 157
 418:	9e ea       	ldi	r25, 0xAE	; 174
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	68 c0       	rjmp	.+208    	; 0x4ee <get_freq+0x396>
		case n_F6s: return f_F6s;
 41e:	79 e4       	ldi	r23, 0x49	; 73
 420:	6f ef       	ldi	r22, 0xFF	; 255
 422:	98 eb       	ldi	r25, 0xB8	; 184
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	63 c0       	rjmp	.+198    	; 0x4ee <get_freq+0x396>
		case n_G6:  return f_G6;
 428:	7a e6       	ldi	r23, 0x6A	; 106
 42a:	6f ef       	ldi	r22, 0xFF	; 255
 42c:	93 ec       	ldi	r25, 0xC3	; 195
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	5e c0       	rjmp	.+188    	; 0x4ee <get_freq+0x396>
		case n_G6s: return f_G6s;
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	67 ea       	ldi	r22, 0xA7	; 167
 436:	9f ec       	ldi	r25, 0xCF	; 207
 438:	84 e4       	ldi	r24, 0x44	; 68
 43a:	59 c0       	rjmp	.+178    	; 0x4ee <get_freq+0x396>
		case n_A6:  return f_A6;
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	9c ed       	ldi	r25, 0xDC	; 220
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	54 c0       	rjmp	.+168    	; 0x4ee <get_freq+0x396>
		case n_A6s: return f_A6s;
 446:	76 ef       	ldi	r23, 0xF6	; 246
 448:	64 e1       	ldi	r22, 0x14	; 20
 44a:	99 ee       	ldi	r25, 0xE9	; 233
 44c:	84 e4       	ldi	r24, 0x44	; 68
 44e:	4f c0       	rjmp	.+158    	; 0x4ee <get_freq+0x396>
		case n_B6:  return f_B6;
 450:	70 e1       	ldi	r23, 0x10	; 16
 452:	61 ef       	ldi	r22, 0xF1	; 241
 454:	96 ef       	ldi	r25, 0xF6	; 246
 456:	84 e4       	ldi	r24, 0x44	; 68
 458:	4a c0       	rjmp	.+148    	; 0x4ee <get_freq+0x396>
		case n_C7:  return f_C7;
 45a:	73 e1       	ldi	r23, 0x13	; 19
 45c:	60 ed       	ldi	r22, 0xD0	; 208
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	85 e4       	ldi	r24, 0x45	; 69
 462:	45 c0       	rjmp	.+138    	; 0x4ee <get_freq+0x396>
		case n_C7s: return f_C7s;
 464:	70 e6       	ldi	r23, 0x60	; 96
 466:	67 e9       	ldi	r22, 0x97	; 151
 468:	9a e0       	ldi	r25, 0x0A	; 10
 46a:	85 e4       	ldi	r24, 0x45	; 69
 46c:	40 c0       	rjmp	.+128    	; 0x4ee <get_freq+0x396>
		case n_D7:  return f_D7;
 46e:	77 e1       	ldi	r23, 0x17	; 23
 470:	65 ed       	ldi	r22, 0xD5	; 213
 472:	92 e1       	ldi	r25, 0x12	; 18
 474:	85 e4       	ldi	r24, 0x45	; 69
 476:	3b c0       	rjmp	.+118    	; 0x4ee <get_freq+0x396>
		case n_D7s: return f_D7s;
 478:	71 e4       	ldi	r23, 0x41	; 65
 47a:	60 e9       	ldi	r22, 0x90	; 144
 47c:	9b e1       	ldi	r25, 0x1B	; 27
 47e:	85 e4       	ldi	r24, 0x45	; 69
 480:	36 c0       	rjmp	.+108    	; 0x4ee <get_freq+0x396>
		case n_E7:  return f_E7;
 482:	74 e5       	ldi	r23, 0x54	; 84
 484:	60 ed       	ldi	r22, 0xD0	; 208
 486:	94 e2       	ldi	r25, 0x24	; 36
 488:	85 e4       	ldi	r24, 0x45	; 69
 48a:	31 c0       	rjmp	.+98     	; 0x4ee <get_freq+0x396>
		case n_F7:  return f_F7;
 48c:	77 e3       	ldi	r23, 0x37	; 55
 48e:	6d e9       	ldi	r22, 0x9D	; 157
 490:	9e e2       	ldi	r25, 0x2E	; 46
 492:	85 e4       	ldi	r24, 0x45	; 69
 494:	2c c0       	rjmp	.+88     	; 0x4ee <get_freq+0x396>
		case n_F7s: return f_F7s;
 496:	79 e4       	ldi	r23, 0x49	; 73
 498:	6f ef       	ldi	r22, 0xFF	; 255
 49a:	98 e3       	ldi	r25, 0x38	; 56
 49c:	85 e4       	ldi	r24, 0x45	; 69
 49e:	27 c0       	rjmp	.+78     	; 0x4ee <get_freq+0x396>
		case n_G7:  return f_G7;
 4a0:	7a e6       	ldi	r23, 0x6A	; 106
 4a2:	6f ef       	ldi	r22, 0xFF	; 255
 4a4:	93 e4       	ldi	r25, 0x43	; 67
 4a6:	85 e4       	ldi	r24, 0x45	; 69
 4a8:	22 c0       	rjmp	.+68     	; 0x4ee <get_freq+0x396>
		case n_G7s: return f_G7s;
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	67 ea       	ldi	r22, 0xA7	; 167
 4ae:	9f e4       	ldi	r25, 0x4F	; 79
 4b0:	85 e4       	ldi	r24, 0x45	; 69
 4b2:	1d c0       	rjmp	.+58     	; 0x4ee <get_freq+0x396>
		case n_A7:  return f_A7;
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	9c e5       	ldi	r25, 0x5C	; 92
 4ba:	85 e4       	ldi	r24, 0x45	; 69
 4bc:	18 c0       	rjmp	.+48     	; 0x4ee <get_freq+0x396>
		case n_A7s: return f_A7s;
 4be:	76 ef       	ldi	r23, 0xF6	; 246
 4c0:	64 e1       	ldi	r22, 0x14	; 20
 4c2:	99 e6       	ldi	r25, 0x69	; 105
 4c4:	85 e4       	ldi	r24, 0x45	; 69
 4c6:	13 c0       	rjmp	.+38     	; 0x4ee <get_freq+0x396>
		case n_B7:  return f_B7;
 4c8:	70 e1       	ldi	r23, 0x10	; 16
 4ca:	61 ef       	ldi	r22, 0xF1	; 241
 4cc:	96 e7       	ldi	r25, 0x76	; 118
 4ce:	85 e4       	ldi	r24, 0x45	; 69
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <get_freq+0x396>
		case n_C8:  return f_C8;
 4d2:	73 e1       	ldi	r23, 0x13	; 19
 4d4:	60 ed       	ldi	r22, 0xD0	; 208
 4d6:	92 e8       	ldi	r25, 0x82	; 130
 4d8:	85 e4       	ldi	r24, 0x45	; 69
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <get_freq+0x396>
		default:    return f_none;
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <get_freq+0x396>

float get_freq(unsigned char keyNumber){
	
	switch(keyNumber){
		case n_same: return f_same;
		case n_A0:  return f_A0;
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	9c ed       	ldi	r25, 0xDC	; 220
 4ec:	81 e4       	ldi	r24, 0x41	; 65
		case n_A7s: return f_A7s;
		case n_B7:  return f_B7;
		case n_C8:  return f_C8;
		default:    return f_none;
	}
}
 4ee:	46 2f       	mov	r20, r22
 4f0:	28 2f       	mov	r18, r24
 4f2:	67 2f       	mov	r22, r23
 4f4:	74 2f       	mov	r23, r20
 4f6:	89 2f       	mov	r24, r25
 4f8:	92 2f       	mov	r25, r18
 4fa:	08 95       	ret

000004fc <timer0_init>:
	//----------------------------------------------------------------------------------------------
	// timer 0
	//----------------------------------------------------------------------------------------------
	// set up timer with prescaler = 1024
	// if the clock speed is 8MHz, then the clock speed Timer0 gets a source clock of 7.81 kHz
	TCCR0B |= (1 << CS02) | (1 << CS00);
 4fc:	85 b5       	in	r24, 0x25	; 37
 4fe:	85 60       	ori	r24, 0x05	; 5
 500:	85 bd       	out	0x25, r24	; 37
	
	// initialize counter
	TCNT0 = 0;
 502:	16 bc       	out	0x26, r1	; 38
	
	// enable compare interrupt
	TIMSK0 |= (1 << OCIE0A);
 504:	ee e6       	ldi	r30, 0x6E	; 110
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	80 83       	st	Z, r24
	
	// set the initial compare value of timer0 to max. now there will be an interrupt about 30.5 times per second.
	OCR0A = 0xff;
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	87 bd       	out	0x27, r24	; 39
	
	// enable global interrupts
	sei();
 512:	78 94       	sei
	
	// initialize overflow counter variable
	timer0_overflow = 0;
 514:	10 92 04 02 	sts	0x0204, r1
 518:	08 95       	ret

0000051a <timer1_init>:
}

void timer1_init(){
	
	TCCR1A |= (1 << COM1A0);	// timer1 toggles OC1A (pin 1 on PORTB) when TCNT1 reaches OCR1A
 51a:	e0 e8       	ldi	r30, 0x80	; 128
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	80 64       	ori	r24, 0x40	; 64
 522:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);		// timer1 has a prescaler of 8
 524:	e1 e8       	ldi	r30, 0x81	; 129
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);		// timer1 works in CTC mode. (Clear Timer on Compare Match)
 52e:	80 81       	ld	r24, Z
 530:	88 60       	ori	r24, 0x08	; 8
 532:	80 83       	st	Z, r24
	TCNT1H = TCNT1L = 0;		// reset the timer1 count.
 534:	10 92 84 00 	sts	0x0084, r1
 538:	10 92 85 00 	sts	0x0085, r1
	OCR1AH = 0x8e;				// set initial high byte of the output compare register
 53c:	8e e8       	ldi	r24, 0x8E	; 142
 53e:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0x08;				// set initial low  byte of the output compare register
 542:	88 e0       	ldi	r24, 0x08	; 8
 544:	80 93 88 00 	sts	0x0088, r24
	OCR1BH = 0xff;				// set timerB to max so it doesn't interfere with timer A.
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xff;				// ^
 54e:	80 93 8a 00 	sts	0x008A, r24
 552:	08 95       	ret

00000554 <tone>:
}

// this function sets timer1's output-compare registers so that pin PB1 will play the intended tone.
void tone(float freq){
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	6b 01       	movw	r12, r22
 55e:	7c 01       	movw	r14, r24
	if(freq == f_same) return;						// if there is no change in the frequency, don't make a change.
 560:	23 ea       	ldi	r18, 0xA3	; 163
 562:	39 e7       	ldi	r19, 0x79	; 121
 564:	4b ee       	ldi	r20, 0xEB	; 235
 566:	5c e4       	ldi	r21, 0x4C	; 76
 568:	0e 94 89 05 	call	0xb12	; 0xb12 <__cmpsf2>
 56c:	88 23       	and	r24, r24
 56e:	09 f4       	brne	.+2      	; 0x572 <tone+0x1e>
 570:	41 c0       	rjmp	.+130    	; 0x5f4 <tone+0xa0>
	if(freq == f_none){
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	a9 01       	movw	r20, r18
 578:	c7 01       	movw	r24, r14
 57a:	b6 01       	movw	r22, r12
 57c:	0e 94 89 05 	call	0xb12	; 0xb12 <__cmpsf2>
 580:	81 11       	cpse	r24, r1
 582:	06 c0       	rjmp	.+12     	; 0x590 <tone+0x3c>
		TCCR1A &= ~(1 << COM1A0);					// doesn't output anymore
 584:	e0 e8       	ldi	r30, 0x80	; 128
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	8f 7b       	andi	r24, 0xBF	; 191
 58c:	80 83       	st	Z, r24
		return;
 58e:	32 c0       	rjmp	.+100    	; 0x5f4 <tone+0xa0>
	}
	TCNT1H = 0;										// reset the timer1 count
 590:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
 594:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A0);						// timer1 toggles OC1A (pin 1 on PORTB) when TCNT1 reaches OCR1A
 598:	e0 e8       	ldi	r30, 0x80	; 128
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	80 83       	st	Z, r24
	static float basePeriod = 1/((float)F_CPU);		// calculate timer1's base period
	float halfPeriod = 1/(2.0*freq);				// calculate the halfperiod of the target sound to be synthesized
 5a2:	a7 01       	movw	r20, r14
 5a4:	96 01       	movw	r18, r12
 5a6:	c7 01       	movw	r24, r14
 5a8:	b6 01       	movw	r22, r12
 5aa:	0e 94 25 05 	call	0xa4a	; 0xa4a <__addsf3>
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	80 e8       	ldi	r24, 0x80	; 128
 5b8:	9f e3       	ldi	r25, 0x3F	; 63
 5ba:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__divsf3>
	float cycles = halfPeriod/basePeriod;			// calculate how many cycles timer1 has to iterate through
 5be:	2d eb       	ldi	r18, 0xBD	; 189
 5c0:	37 e3       	ldi	r19, 0x37	; 55
 5c2:	46 e0       	ldi	r20, 0x06	; 6
 5c4:	54 e3       	ldi	r21, 0x34	; 52
 5c6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__divsf3>
	int cyclesInt= (int)cycles;						// convert cycles to an integer type
 5ca:	0e 94 f5 05 	call	0xbea	; 0xbea <__fixsfsi>
 5ce:	9b 01       	movw	r18, r22
	
	OCR1AH = cyclesInt / 0x100;						// set high byte of the output compare register
 5d0:	77 23       	and	r23, r23
 5d2:	14 f4       	brge	.+4      	; 0x5d8 <tone+0x84>
 5d4:	61 50       	subi	r22, 0x01	; 1
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	67 2f       	mov	r22, r23
 5da:	77 0f       	add	r23, r23
 5dc:	77 0b       	sbc	r23, r23
 5de:	60 93 89 00 	sts	0x0089, r22
	OCR1AL = cyclesInt % 0x100;						// set low  byte of the output compare register
 5e2:	c9 01       	movw	r24, r18
 5e4:	90 78       	andi	r25, 0x80	; 128
 5e6:	99 23       	and	r25, r25
 5e8:	1c f4       	brge	.+6      	; 0x5f0 <tone+0x9c>
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	9f 6f       	ori	r25, 0xFF	; 255
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	80 93 88 00 	sts	0x0088, r24
}
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	08 95       	ret

000005fe <init_song_data>:
}

//----------------------------------------------------------------------------------------------
// initialize the song data
//----------------------------------------------------------------------------------------------
void init_song_data(){
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
	tones[0] = n_A4;
 602:	81 e3       	ldi	r24, 0x31	; 49
 604:	80 93 05 02 	sts	0x0205, r24
	tones[1] = n_B4;
 608:	23 e3       	ldi	r18, 0x33	; 51
 60a:	20 93 06 02 	sts	0x0206, r18
	tones[2] = n_C5;
 60e:	94 e3       	ldi	r25, 0x34	; 52
 610:	90 93 07 02 	sts	0x0207, r25
	tones[3] = n_A4;
 614:	80 93 08 02 	sts	0x0208, r24
	tones[4] = n_E5;
 618:	38 e3       	ldi	r19, 0x38	; 56
 61a:	30 93 09 02 	sts	0x0209, r19
	tones[5] = n_A4;
 61e:	80 93 0a 02 	sts	0x020A, r24
	tones[6] = n_B4;
 622:	20 93 0b 02 	sts	0x020B, r18
	tones[7] = n_C5;
 626:	90 93 0c 02 	sts	0x020C, r25
	
	tones[8]  = n_A4;
 62a:	80 93 0d 02 	sts	0x020D, r24
	tones[9]  = n_B4;
 62e:	20 93 0e 02 	sts	0x020E, r18
	tones[10] = n_C5;
 632:	90 93 0f 02 	sts	0x020F, r25
	tones[11] = n_A4;
 636:	80 93 10 02 	sts	0x0210, r24
	tones[12] = n_F5;
 63a:	39 e3       	ldi	r19, 0x39	; 57
 63c:	30 93 11 02 	sts	0x0211, r19
	tones[13] = n_A4;
 640:	80 93 12 02 	sts	0x0212, r24
	tones[14] = n_B4;
 644:	20 93 13 02 	sts	0x0213, r18
	tones[15] = n_C5;
 648:	90 93 14 02 	sts	0x0214, r25
	
	tones[16] = n_A4;
 64c:	80 93 15 02 	sts	0x0215, r24
	tones[17] = n_B4;
 650:	20 93 16 02 	sts	0x0216, r18
	tones[18] = n_C5;
 654:	90 93 17 02 	sts	0x0217, r25
	tones[19] = n_A4;
 658:	80 93 18 02 	sts	0x0218, r24
	tones[20] = n_G5;
 65c:	3b e3       	ldi	r19, 0x3B	; 59
 65e:	30 93 19 02 	sts	0x0219, r19
	tones[21] = n_A4;
 662:	80 93 1a 02 	sts	0x021A, r24
	tones[22] = n_B4;
 666:	20 93 1b 02 	sts	0x021B, r18
	tones[23] = n_C5;
 66a:	90 93 1c 02 	sts	0x021C, r25
	
	tones[24] = n_A4;
 66e:	80 93 1d 02 	sts	0x021D, r24
	tones[25] = n_B4;
 672:	20 93 1e 02 	sts	0x021E, r18
	tones[26] = n_C5;
 676:	90 93 1f 02 	sts	0x021F, r25
	tones[27] = n_A4;
 67a:	80 93 20 02 	sts	0x0220, r24
	tones[28] = n_A5;
 67e:	3d e3       	ldi	r19, 0x3D	; 61
 680:	30 93 21 02 	sts	0x0221, r19
	tones[29] = n_A4;
 684:	80 93 22 02 	sts	0x0222, r24
	tones[30] = n_B4;
 688:	20 93 23 02 	sts	0x0223, r18
	tones[31] = n_C5;
 68c:	90 93 24 02 	sts	0x0224, r25
 690:	c5 e0       	ldi	r28, 0x05	; 5
 692:	d2 e0       	ldi	r29, 0x02	; 2
 694:	e5 e2       	ldi	r30, 0x25	; 37
 696:	f2 e0       	ldi	r31, 0x02	; 2
 698:	de 01       	movw	r26, r28
	
	//copy and manipulate the song data
	int i = 1;
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
		tones[i+32] = tones[i];
 69e:	4d 91       	ld	r20, X+
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
 6a0:	9c 01       	movw	r18, r24
 6a2:	27 70       	andi	r18, 0x07	; 7
 6a4:	33 27       	eor	r19, r19
 6a6:	23 2b       	or	r18, r19
 6a8:	99 f0       	breq	.+38     	; 0x6d0 <init_song_data+0xd2>
 6aa:	9c 01       	movw	r18, r24
 6ac:	27 70       	andi	r18, 0x07	; 7
 6ae:	30 78       	andi	r19, 0x80	; 128
 6b0:	33 23       	and	r19, r19
 6b2:	34 f4       	brge	.+12     	; 0x6c0 <init_song_data+0xc2>
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	31 09       	sbc	r19, r1
 6b8:	28 6f       	ori	r18, 0xF8	; 248
 6ba:	3f 6f       	ori	r19, 0xFF	; 255
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	23 30       	cpi	r18, 0x03	; 3
 6c2:	31 05       	cpc	r19, r1
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <init_song_data+0xd2>
 6c6:	25 30       	cpi	r18, 0x05	; 5
 6c8:	31 05       	cpc	r19, r1
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <init_song_data+0xd2>
	tones[31] = n_C5;
	
	//copy and manipulate the song data
	int i = 1;
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
		tones[i+32] = tones[i];
 6cc:	40 83       	st	Z, r20
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <init_song_data+0xd6>
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+32] -= 2;
 6d0:	42 50       	subi	r20, 0x02	; 2
 6d2:	40 83       	st	Z, r20
	tones[30] = n_B4;
	tones[31] = n_C5;
	
	//copy and manipulate the song data
	int i = 1;
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	31 96       	adiw	r30, 0x01	; 1
 6d8:	80 32       	cpi	r24, 0x20	; 32
 6da:	91 05       	cpc	r25, r1
 6dc:	01 f7       	brne	.-64     	; 0x69e <init_song_data+0xa0>
 6de:	e5 e4       	ldi	r30, 0x45	; 69
 6e0:	f2 e0       	ldi	r31, 0x02	; 2
 6e2:	a5 e0       	ldi	r26, 0x05	; 5
 6e4:	b2 e0       	ldi	r27, 0x02	; 2
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
		tones[i+32] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+32] -= 2;
	}
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
		tones[i+64] = tones[i];
 6ea:	4d 91       	ld	r20, X+
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
 6ec:	9c 01       	movw	r18, r24
 6ee:	27 70       	andi	r18, 0x07	; 7
 6f0:	33 27       	eor	r19, r19
 6f2:	23 2b       	or	r18, r19
 6f4:	99 f0       	breq	.+38     	; 0x71c <init_song_data+0x11e>
 6f6:	9c 01       	movw	r18, r24
 6f8:	27 70       	andi	r18, 0x07	; 7
 6fa:	30 78       	andi	r19, 0x80	; 128
 6fc:	33 23       	and	r19, r19
 6fe:	34 f4       	brge	.+12     	; 0x70c <init_song_data+0x10e>
 700:	21 50       	subi	r18, 0x01	; 1
 702:	31 09       	sbc	r19, r1
 704:	28 6f       	ori	r18, 0xF8	; 248
 706:	3f 6f       	ori	r19, 0xFF	; 255
 708:	2f 5f       	subi	r18, 0xFF	; 255
 70a:	3f 4f       	sbci	r19, 0xFF	; 255
 70c:	23 30       	cpi	r18, 0x03	; 3
 70e:	31 05       	cpc	r19, r1
 710:	29 f0       	breq	.+10     	; 0x71c <init_song_data+0x11e>
 712:	25 30       	cpi	r18, 0x05	; 5
 714:	31 05       	cpc	r19, r1
 716:	11 f0       	breq	.+4      	; 0x71c <init_song_data+0x11e>
		tones[i+32] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+32] -= 2;
	}
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
		tones[i+64] = tones[i];
 718:	40 83       	st	Z, r20
 71a:	02 c0       	rjmp	.+4      	; 0x720 <init_song_data+0x122>
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+64] -= 4;
 71c:	44 50       	subi	r20, 0x04	; 4
 71e:	40 83       	st	Z, r20
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
		tones[i+32] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+32] -= 2;
	}
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	31 96       	adiw	r30, 0x01	; 1
 724:	80 32       	cpi	r24, 0x20	; 32
 726:	91 05       	cpc	r25, r1
 728:	01 f7       	brne	.-64     	; 0x6ea <init_song_data+0xec>
 72a:	e5 e6       	ldi	r30, 0x65	; 101
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
		tones[i+64] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+64] -= 4;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
		tones[i+96] = tones[i];
 732:	49 91       	ld	r20, Y+
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
 734:	9c 01       	movw	r18, r24
 736:	27 70       	andi	r18, 0x07	; 7
 738:	33 27       	eor	r19, r19
 73a:	23 2b       	or	r18, r19
 73c:	99 f0       	breq	.+38     	; 0x764 <init_song_data+0x166>
 73e:	9c 01       	movw	r18, r24
 740:	27 70       	andi	r18, 0x07	; 7
 742:	30 78       	andi	r19, 0x80	; 128
 744:	33 23       	and	r19, r19
 746:	34 f4       	brge	.+12     	; 0x754 <init_song_data+0x156>
 748:	21 50       	subi	r18, 0x01	; 1
 74a:	31 09       	sbc	r19, r1
 74c:	28 6f       	ori	r18, 0xF8	; 248
 74e:	3f 6f       	ori	r19, 0xFF	; 255
 750:	2f 5f       	subi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	23 30       	cpi	r18, 0x03	; 3
 756:	31 05       	cpc	r19, r1
 758:	29 f0       	breq	.+10     	; 0x764 <init_song_data+0x166>
 75a:	25 30       	cpi	r18, 0x05	; 5
 75c:	31 05       	cpc	r19, r1
 75e:	11 f0       	breq	.+4      	; 0x764 <init_song_data+0x166>
		tones[i+64] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+64] -= 4;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
		tones[i+96] = tones[i];
 760:	40 83       	st	Z, r20
 762:	02 c0       	rjmp	.+4      	; 0x768 <init_song_data+0x16a>
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+96] -= 7;
 764:	47 50       	subi	r20, 0x07	; 7
 766:	40 83       	st	Z, r20
	for(i=0; i<32 && i<TOTAL_BEATS; i++){
		tones[i+64] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+64] -= 4;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	31 96       	adiw	r30, 0x01	; 1
 76c:	80 31       	cpi	r24, 0x10	; 16
 76e:	91 05       	cpc	r25, r1
 770:	01 f7       	brne	.-64     	; 0x732 <init_song_data+0x134>
 772:	a5 e1       	ldi	r26, 0x15	; 21
 774:	b2 e0       	ldi	r27, 0x02	; 2
 776:	e5 e7       	ldi	r30, 0x75	; 117
 778:	f2 e0       	ldi	r31, 0x02	; 2
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
		tones[i+96] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+96] -= 7;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
		tones[i+96+16] = tones[i+16];
 77e:	4d 91       	ld	r20, X+
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
 780:	9c 01       	movw	r18, r24
 782:	27 70       	andi	r18, 0x07	; 7
 784:	33 27       	eor	r19, r19
 786:	23 2b       	or	r18, r19
 788:	99 f0       	breq	.+38     	; 0x7b0 <init_song_data+0x1b2>
 78a:	9c 01       	movw	r18, r24
 78c:	27 70       	andi	r18, 0x07	; 7
 78e:	30 78       	andi	r19, 0x80	; 128
 790:	33 23       	and	r19, r19
 792:	34 f4       	brge	.+12     	; 0x7a0 <init_song_data+0x1a2>
 794:	21 50       	subi	r18, 0x01	; 1
 796:	31 09       	sbc	r19, r1
 798:	28 6f       	ori	r18, 0xF8	; 248
 79a:	3f 6f       	ori	r19, 0xFF	; 255
 79c:	2f 5f       	subi	r18, 0xFF	; 255
 79e:	3f 4f       	sbci	r19, 0xFF	; 255
 7a0:	23 30       	cpi	r18, 0x03	; 3
 7a2:	31 05       	cpc	r19, r1
 7a4:	29 f0       	breq	.+10     	; 0x7b0 <init_song_data+0x1b2>
 7a6:	25 30       	cpi	r18, 0x05	; 5
 7a8:	31 05       	cpc	r19, r1
 7aa:	11 f0       	breq	.+4      	; 0x7b0 <init_song_data+0x1b2>
		tones[i+96] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+96] -= 7;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
		tones[i+96+16] = tones[i+16];
 7ac:	40 83       	st	Z, r20
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <init_song_data+0x1b6>
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+96+16] -= 5;
 7b0:	45 50       	subi	r20, 0x05	; 5
 7b2:	40 83       	st	Z, r20
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
		tones[i+96] = tones[i];
		if(i%8 == 0 || i%8 == 3 || i%8 == 5)
		tones[i+96] -= 7;
	}
	for(i=0; i<16 && i<TOTAL_BEATS; i++){
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	31 96       	adiw	r30, 0x01	; 1
 7b8:	80 31       	cpi	r24, 0x10	; 16
 7ba:	91 05       	cpc	r25, r1
 7bc:	01 f7       	brne	.-64     	; 0x77e <init_song_data+0x180>
	//tones[9] = n_;
	//tones[10] = n_;
	//tones[11] = n_;
	
	//play first tone
	tone(get_freq(tones[0]));	// play a certain tone
 7be:	80 91 05 02 	lds	r24, 0x0205
 7c2:	0e 94 ac 00 	call	0x158	; 0x158 <get_freq>
 7c6:	0e 94 aa 02 	call	0x554	; 0x554 <tone>
}
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <shift>:
	}
	
}

//most significant bit first
void shift(int data, int datapin, int clockpin){
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
//void shift(int data, int datapin, int dataport, int clockpin, int clockport){
	low(PORTC, clockpin);
 7d4:	78 b1       	in	r23, 0x08	; 8
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	f9 01       	movw	r30, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <shift+0x12>
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	4a 95       	dec	r20
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <shift+0xe>
 7e6:	af 01       	movw	r20, r30
 7e8:	ce 2f       	mov	r28, r30
 7ea:	c0 95       	com	r28
 7ec:	7c 23       	and	r23, r28
 7ee:	78 b9       	out	0x08, r23	; 8
	
	int x= 128;
	while(x>0){
		if(data&x) high(PORTC, datapin);
 7f0:	f9 01       	movw	r30, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <shift+0x28>
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <shift+0x24>
 7fc:	bf 01       	movw	r22, r30
 7fe:	de 2f       	mov	r29, r30
		else         low (PORTC, datapin);
 800:	60 95       	com	r22
 802:	e8 e0       	ldi	r30, 0x08	; 8
 804:	f0 e0       	ldi	r31, 0x00	; 0
//most significant bit first
void shift(int data, int datapin, int clockpin){
//void shift(int data, int datapin, int dataport, int clockpin, int clockport){
	low(PORTC, clockpin);
	
	int x= 128;
 806:	20 e8       	ldi	r18, 0x80	; 128
 808:	30 e0       	ldi	r19, 0x00	; 0
	while(x>0){
		if(data&x) high(PORTC, datapin);
 80a:	d9 01       	movw	r26, r18
 80c:	a8 23       	and	r26, r24
 80e:	b9 23       	and	r27, r25
 810:	ab 2b       	or	r26, r27
 812:	21 f0       	breq	.+8      	; 0x81c <shift+0x4c>
 814:	78 b1       	in	r23, 0x08	; 8
 816:	7d 2b       	or	r23, r29
 818:	78 b9       	out	0x08, r23	; 8
 81a:	03 c0       	rjmp	.+6      	; 0x822 <shift+0x52>
		else         low (PORTC, datapin);
 81c:	78 b1       	in	r23, 0x08	; 8
 81e:	76 23       	and	r23, r22
 820:	78 b9       	out	0x08, r23	; 8
		high(PORTC, clockpin);
 822:	78 b1       	in	r23, 0x08	; 8
 824:	74 2b       	or	r23, r20
 826:	78 b9       	out	0x08, r23	; 8
		low(PORTC, clockpin);
 828:	78 b1       	in	r23, 0x08	; 8
 82a:	7c 23       	and	r23, r28
 82c:	78 b9       	out	0x08, r23	; 8
		x = x>>1; // divide by two
 82e:	35 95       	asr	r19
 830:	27 95       	ror	r18
 832:	31 97       	sbiw	r30, 0x01	; 1
void shift(int data, int datapin, int clockpin){
//void shift(int data, int datapin, int dataport, int clockpin, int clockport){
	low(PORTC, clockpin);
	
	int x= 128;
	while(x>0){
 834:	51 f7       	brne	.-44     	; 0x80a <shift+0x3a>
		high(PORTC, clockpin);
		low(PORTC, clockpin);
		x = x>>1; // divide by two
	}
	
}
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <matrix_print>:


// This will print data to the 8x8 LED Matrix. the "int offset" input is what BEAT the user is on.
// the offset integer is used to index into the song[] array.
// this matrix print function will display a measure line as well
void matrix_print(int songOffset){
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
	
	matrix_off();								// display matrix
 840:	42 98       	cbi	0x08, 2	; 8
	matrix_reset_decade();						// reset decade counter state
 842:	43 9a       	sbi	0x08, 3	; 8
 844:	43 98       	cbi	0x08, 3	; 8
 846:	c0 e0       	ldi	r28, 0x00	; 0
 848:	d0 e0       	ldi	r29, 0x00	; 0
	
	unsigned char i;							// this increments through the song[] array
	// loop through each column
	for(i=0; i<BEATS_PER_MEASURE; i++){
		shift(song[offset+i], p_shift_data, p_shift_clock);	// shift out the data for this column
 84a:	80 91 02 01 	lds	r24, 0x0102
 84e:	90 91 03 01 	lds	r25, 0x0103
 852:	fe 01       	movw	r30, r28
 854:	ec 5f       	subi	r30, 0xFC	; 252
 856:	fe 4f       	sbci	r31, 0xFE	; 254
 858:	e8 0f       	add	r30, r24
 85a:	f9 1f       	adc	r31, r25
 85c:	40 e0       	ldi	r20, 0x00	; 0
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	61 e0       	ldi	r22, 0x01	; 1
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <shift>
		matrix_on();													// turn on the matrix
 86c:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 86e:	87 eb       	ldi	r24, 0xB7	; 183
 870:	9b e0       	ldi	r25, 0x0B	; 11
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	f1 f7       	brne	.-4      	; 0x872 <matrix_print+0x36>
 876:	00 c0       	rjmp	.+0      	; 0x878 <matrix_print+0x3c>
 878:	00 00       	nop
		delayus(MATRIX_DISPLAY_TIME_PER_COLUMN);						// delay for a specified period of time (to allow the LEDs to turn on and be visible for some time)
		matrix_off();													// turn the matrix off
 87a:	42 98       	cbi	0x08, 2	; 8
		matrix_clock_decade();											// clock the decade counter to advance to the next column of LEDs
 87c:	44 98       	cbi	0x08, 4	; 8
 87e:	44 9a       	sbi	0x08, 4	; 8
 880:	21 96       	adiw	r28, 0x01	; 1
	matrix_off();								// display matrix
	matrix_reset_decade();						// reset decade counter state
	
	unsigned char i;							// this increments through the song[] array
	// loop through each column
	for(i=0; i<BEATS_PER_MEASURE; i++){
 882:	c8 30       	cpi	r28, 0x08	; 8
 884:	d1 05       	cpc	r29, r1
 886:	09 f7       	brne	.-62     	; 0x84a <matrix_print+0xe>
		matrix_on();													// turn on the matrix
		delayus(MATRIX_DISPLAY_TIME_PER_COLUMN);						// delay for a specified period of time (to allow the LEDs to turn on and be visible for some time)
		matrix_off();													// turn the matrix off
		matrix_clock_decade();											// clock the decade counter to advance to the next column of LEDs
	}
}
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	08 95       	ret

0000088e <main>:
	//----------------------------------------------------------------------------------------------
	// initial setup
	//----------------------------------------------------------------------------------------------
	
	// set the 8x8 LED Matrix pins as outputs
	set_output(DDRC, p_shift_clock);
 88e:	38 9a       	sbi	0x07, 0	; 7
	set_output(DDRC, p_shift_data);
 890:	39 9a       	sbi	0x07, 1	; 7
	set_output(DDRC, p_enable_matrix);
 892:	3a 9a       	sbi	0x07, 2	; 7
	set_output(DDRC, p_decade_reset);
 894:	3b 9a       	sbi	0x07, 3	; 7
	set_output(DDRC, p_decade_clock);
 896:	3c 9a       	sbi	0x07, 4	; 7
	
	set_output(DDRB, p_tone);
 898:	21 9a       	sbi	0x04, 1	; 4
	
	DDRD = 0xff;		// make all pins on port D outputs
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	8a b9       	out	0x0a, r24	; 10
	
	// set all shift register and decade counter outputs to low
	low(PORTC,p_decade_clock);
 89e:	44 98       	cbi	0x08, 4	; 8
	low(PORTC,p_decade_reset);
 8a0:	43 98       	cbi	0x08, 3	; 8
	low(PORTC,p_shift_data);
 8a2:	41 98       	cbi	0x08, 1	; 8
	low(PORTC,p_shift_clock);
 8a4:	40 98       	cbi	0x08, 0	; 8
	// disable matrix
	matrix_off();
 8a6:	42 98       	cbi	0x08, 2	; 8
	// reset decade counter state
	matrix_reset_decade();
 8a8:	43 9a       	sbi	0x08, 3	; 8
 8aa:	43 98       	cbi	0x08, 3	; 8
// 		delay(1);
// 	}
	
	
	//initialize the timer(s)
	timer0_init();
 8ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <timer0_init>
	timer1_init();
 8b0:	0e 94 8d 02 	call	0x51a	; 0x51a <timer1_init>
	init_song_data();
 8b4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <init_song_data>
 8b8:	e8 e0       	ldi	r30, 0x08	; 8
 8ba:	f1 e0       	ldi	r31, 0x01	; 1
 8bc:	aa e0       	ldi	r26, 0x0A	; 10
 8be:	b1 e0       	ldi	r27, 0x01	; 1
// 			}
// 		}
// 	}
	int i;
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
		song[i+0] = 1;
 8c4:	cc 24       	eor	r12, r12
 8c6:	c3 94       	inc	r12
		song[i+1] = 2;
 8c8:	68 94       	set
 8ca:	dd 24       	eor	r13, r13
 8cc:	d1 f8       	bld	r13, 1
		song[i+2] = 4;
 8ce:	68 94       	set
 8d0:	ee 24       	eor	r14, r14
 8d2:	e2 f8       	bld	r14, 2
		song[i+3] = 8;
 8d4:	68 94       	set
 8d6:	ff 24       	eor	r15, r15
 8d8:	f3 f8       	bld	r15, 3
		song[i+4] = 16;
 8da:	00 e1       	ldi	r16, 0x10	; 16
		song[i+5] = 32;
 8dc:	10 e2       	ldi	r17, 0x20	; 32
		song[i+6] = 64;
 8de:	70 e4       	ldi	r23, 0x40	; 64
		song[i+7] = 128;
 8e0:	60 e8       	ldi	r22, 0x80	; 128
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 8e2:	5f 01       	movw	r10, r30
 8e4:	9f 01       	movw	r18, r30
 8e6:	24 50       	subi	r18, 0x04	; 4
 8e8:	31 09       	sbc	r19, r1
// 		}
// 	}
	int i;
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
		song[i+0] = 1;
 8ea:	e9 01       	movw	r28, r18
 8ec:	c8 82       	st	Y, r12
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 8ee:	9f 01       	movw	r18, r30
 8f0:	23 50       	subi	r18, 0x03	; 3
 8f2:	31 09       	sbc	r19, r1
// 	}
	int i;
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
		song[i+0] = 1;
		song[i+1] = 2;
 8f4:	e9 01       	movw	r28, r18
 8f6:	d8 82       	st	Y, r13
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 8f8:	9f 01       	movw	r18, r30
 8fa:	22 50       	subi	r18, 0x02	; 2
 8fc:	31 09       	sbc	r19, r1
	int i;
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
		song[i+0] = 1;
		song[i+1] = 2;
		song[i+2] = 4;
 8fe:	e9 01       	movw	r28, r18
 900:	e8 82       	st	Y, r14
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 902:	9f 01       	movw	r18, r30
 904:	21 50       	subi	r18, 0x01	; 1
 906:	31 09       	sbc	r19, r1
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
		song[i+0] = 1;
		song[i+1] = 2;
		song[i+2] = 4;
		song[i+3] = 8;
 908:	e9 01       	movw	r28, r18
 90a:	f8 82       	st	Y, r15
		song[i+4] = 16;
 90c:	00 83       	st	Z, r16
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 90e:	ad 01       	movw	r20, r26
 910:	9d 01       	movw	r18, r26
 912:	21 50       	subi	r18, 0x01	; 1
 914:	31 09       	sbc	r19, r1
		song[i+0] = 1;
		song[i+1] = 2;
		song[i+2] = 4;
		song[i+3] = 8;
		song[i+4] = 16;
		song[i+5] = 32;
 916:	e9 01       	movw	r28, r18
 918:	18 83       	st	Y, r17
		song[i+6] = 64;
 91a:	7c 93       	st	X, r23
//----------------------------------------------------------------------------------------------
// main section of the code
//----------------------------------------------------------------------------------------------


int main(void)
 91c:	9c 01       	movw	r18, r24
 91e:	2c 5f       	subi	r18, 0xFC	; 252
 920:	3e 4f       	sbci	r19, 0xFE	; 254
		song[i+2] = 4;
		song[i+3] = 8;
		song[i+4] = 16;
		song[i+5] = 32;
		song[i+6] = 64;
		song[i+7] = 128;
 922:	e9 01       	movw	r28, r18
 924:	6f 83       	std	Y+7, r22	; 0x07
		if(i%32 == 24){
 926:	9c 01       	movw	r18, r24
 928:	2f 71       	andi	r18, 0x1F	; 31
 92a:	30 78       	andi	r19, 0x80	; 128
 92c:	33 23       	and	r19, r19
 92e:	34 f4       	brge	.+12     	; 0x93c <__stack+0x3d>
 930:	21 50       	subi	r18, 0x01	; 1
 932:	31 09       	sbc	r19, r1
 934:	20 6e       	ori	r18, 0xE0	; 224
 936:	3f 6f       	ori	r19, 0xFF	; 255
 938:	2f 5f       	subi	r18, 0xFF	; 255
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	28 31       	cpi	r18, 0x18	; 24
 93e:	31 05       	cpc	r19, r1
 940:	49 f4       	brne	.+18     	; 0x954 <__stack+0x55>
			song[i+4] |= 1;
 942:	e5 01       	movw	r28, r10
 944:	28 81       	ld	r18, Y
 946:	21 60       	ori	r18, 0x01	; 1
 948:	28 83       	st	Y, r18
			song[i+6] |= 1;
 94a:	ea 01       	movw	r28, r20
 94c:	28 81       	ld	r18, Y
 94e:	21 60       	ori	r18, 0x01	; 1
 950:	28 83       	st	Y, r18
 952:	07 c0       	rjmp	.+14     	; 0x962 <__stack+0x63>
		}
		if(i%32 == 8){
 954:	28 30       	cpi	r18, 0x08	; 8
 956:	31 05       	cpc	r19, r1
 958:	21 f4       	brne	.+8      	; 0x962 <__stack+0x63>
			song[i+4] |= 1;
 95a:	e5 01       	movw	r28, r10
 95c:	28 81       	ld	r18, Y
 95e:	21 60       	ori	r18, 0x01	; 1
 960:	28 83       	st	Y, r18
// 			}
// 		}
// 	}
	int i;
	// set the song data
	for(i=0; i<TOTAL_BEATS-8; i+=8){
 962:	08 96       	adiw	r24, 0x08	; 8
 964:	38 96       	adiw	r30, 0x08	; 8
 966:	18 96       	adiw	r26, 0x08	; 8
 968:	88 3f       	cpi	r24, 0xF8	; 248
 96a:	91 05       	cpc	r25, r1
 96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
 96e:	b9 cf       	rjmp	.-142    	; 0x8e2 <main+0x54>
		}
		if(i%32 == 8){
			song[i+4] |= 1;
		}
	}
	PORTD = song[0];
 970:	80 91 04 01 	lds	r24, 0x0104
 974:	8b b9       	out	0x0b, r24	; 11
	while(1){
		matrix_print(offset);	// display the current song data
 976:	80 91 02 01 	lds	r24, 0x0102
 97a:	90 91 03 01 	lds	r25, 0x0103
 97e:	0e 94 1e 04 	call	0x83c	; 0x83c <matrix_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 982:	8f e0       	ldi	r24, 0x0F	; 15
 984:	97 e2       	ldi	r25, 0x27	; 39
 986:	01 97       	sbiw	r24, 0x01	; 1
 988:	f1 f7       	brne	.-4      	; 0x986 <__stack+0x87>
 98a:	00 c0       	rjmp	.+0      	; 0x98c <__stack+0x8d>
 98c:	00 00       	nop
 98e:	f3 cf       	rjmp	.-26     	; 0x976 <__stack+0x77>

00000990 <advance_song>:
}


// this will add beatDiff number of beats to the current song offset.
void advance_song(int beatDiff){
	offset += beatDiff;
 990:	20 91 02 01 	lds	r18, 0x0102
 994:	30 91 03 01 	lds	r19, 0x0103
 998:	82 0f       	add	r24, r18
 99a:	93 1f       	adc	r25, r19
 99c:	90 93 03 01 	sts	0x0103, r25
 9a0:	80 93 02 01 	sts	0x0102, r24
	if(offset >= 128) offset = 0;
 9a4:	80 91 02 01 	lds	r24, 0x0102
 9a8:	90 91 03 01 	lds	r25, 0x0103
 9ac:	80 38       	cpi	r24, 0x80	; 128
 9ae:	91 05       	cpc	r25, r1
 9b0:	20 f0       	brcs	.+8      	; 0x9ba <advance_song+0x2a>
 9b2:	10 92 03 01 	sts	0x0103, r1
 9b6:	10 92 02 01 	sts	0x0102, r1
 9ba:	08 95       	ret

000009bc <__vector_14>:
}

// whenever timer0 overflows, this function is evaluated
// this function moves the song along
ISR(TIMER0_COMPA_vect)
{
 9bc:	1f 92       	push	r1
 9be:	0f 92       	push	r0
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	0f 92       	push	r0
 9c4:	11 24       	eor	r1, r1
 9c6:	2f 93       	push	r18
 9c8:	3f 93       	push	r19
 9ca:	4f 93       	push	r20
 9cc:	5f 93       	push	r21
 9ce:	6f 93       	push	r22
 9d0:	7f 93       	push	r23
 9d2:	8f 93       	push	r24
 9d4:	9f 93       	push	r25
 9d6:	af 93       	push	r26
 9d8:	bf 93       	push	r27
 9da:	ef 93       	push	r30
 9dc:	ff 93       	push	r31
	// keep a track of number of overflows
	timer0_overflow++;
 9de:	80 91 04 02 	lds	r24, 0x0204
 9e2:	8f 5f       	subi	r24, 0xFF	; 255
 9e4:	80 93 04 02 	sts	0x0204, r24
	if(timer0_overflow >= speed){
 9e8:	90 91 04 02 	lds	r25, 0x0204
 9ec:	80 91 00 01 	lds	r24, 0x0100
 9f0:	98 17       	cp	r25, r24
 9f2:	c8 f0       	brcs	.+50     	; 0xa26 <__vector_14+0x6a>
		timer0_overflow = 0;			// reset timer0_overflow to 0
 9f4:	10 92 04 02 	sts	0x0204, r1
		advance_song(1);				// move the song ahead by 1 beat
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 c8 04 	call	0x990	; 0x990 <advance_song>
		PORTD = song[offset];			// set port D to the current song data
 a00:	e0 91 02 01 	lds	r30, 0x0102
 a04:	f0 91 03 01 	lds	r31, 0x0103
 a08:	ec 5f       	subi	r30, 0xFC	; 252
 a0a:	fe 4f       	sbci	r31, 0xFE	; 254
 a0c:	80 81       	ld	r24, Z
 a0e:	8b b9       	out	0x0b, r24	; 11
		tone(get_freq(tones[offset]));	// play a certain tone
 a10:	e0 91 02 01 	lds	r30, 0x0102
 a14:	f0 91 03 01 	lds	r31, 0x0103
 a18:	eb 5f       	subi	r30, 0xFB	; 251
 a1a:	fd 4f       	sbci	r31, 0xFD	; 253
 a1c:	80 81       	ld	r24, Z
 a1e:	0e 94 ac 00 	call	0x158	; 0x158 <get_freq>
 a22:	0e 94 aa 02 	call	0x554	; 0x554 <tone>
	}
}
 a26:	ff 91       	pop	r31
 a28:	ef 91       	pop	r30
 a2a:	bf 91       	pop	r27
 a2c:	af 91       	pop	r26
 a2e:	9f 91       	pop	r25
 a30:	8f 91       	pop	r24
 a32:	7f 91       	pop	r23
 a34:	6f 91       	pop	r22
 a36:	5f 91       	pop	r21
 a38:	4f 91       	pop	r20
 a3a:	3f 91       	pop	r19
 a3c:	2f 91       	pop	r18
 a3e:	0f 90       	pop	r0
 a40:	0f be       	out	0x3f, r0	; 63
 a42:	0f 90       	pop	r0
 a44:	1f 90       	pop	r1
 a46:	18 95       	reti

00000a48 <__subsf3>:
 a48:	50 58       	subi	r21, 0x80	; 128

00000a4a <__addsf3>:
 a4a:	bb 27       	eor	r27, r27
 a4c:	aa 27       	eor	r26, r26
 a4e:	0e d0       	rcall	.+28     	; 0xa6c <__addsf3x>
 a50:	38 c1       	rjmp	.+624    	; 0xcc2 <__fp_round>
 a52:	29 d1       	rcall	.+594    	; 0xca6 <__fp_pscA>
 a54:	30 f0       	brcs	.+12     	; 0xa62 <__addsf3+0x18>
 a56:	2e d1       	rcall	.+604    	; 0xcb4 <__fp_pscB>
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__addsf3+0x18>
 a5a:	31 f4       	brne	.+12     	; 0xa68 <__addsf3+0x1e>
 a5c:	9f 3f       	cpi	r25, 0xFF	; 255
 a5e:	11 f4       	brne	.+4      	; 0xa64 <__addsf3+0x1a>
 a60:	1e f4       	brtc	.+6      	; 0xa68 <__addsf3+0x1e>
 a62:	1e c1       	rjmp	.+572    	; 0xca0 <__fp_nan>
 a64:	0e f4       	brtc	.+2      	; 0xa68 <__addsf3+0x1e>
 a66:	e0 95       	com	r30
 a68:	e7 fb       	bst	r30, 7
 a6a:	14 c1       	rjmp	.+552    	; 0xc94 <__fp_inf>

00000a6c <__addsf3x>:
 a6c:	e9 2f       	mov	r30, r25
 a6e:	3a d1       	rcall	.+628    	; 0xce4 <__fp_split3>
 a70:	80 f3       	brcs	.-32     	; 0xa52 <__addsf3+0x8>
 a72:	ba 17       	cp	r27, r26
 a74:	62 07       	cpc	r22, r18
 a76:	73 07       	cpc	r23, r19
 a78:	84 07       	cpc	r24, r20
 a7a:	95 07       	cpc	r25, r21
 a7c:	18 f0       	brcs	.+6      	; 0xa84 <__addsf3x+0x18>
 a7e:	71 f4       	brne	.+28     	; 0xa9c <__addsf3x+0x30>
 a80:	9e f5       	brtc	.+102    	; 0xae8 <__addsf3x+0x7c>
 a82:	52 c1       	rjmp	.+676    	; 0xd28 <__fp_zero>
 a84:	0e f4       	brtc	.+2      	; 0xa88 <__addsf3x+0x1c>
 a86:	e0 95       	com	r30
 a88:	0b 2e       	mov	r0, r27
 a8a:	ba 2f       	mov	r27, r26
 a8c:	a0 2d       	mov	r26, r0
 a8e:	0b 01       	movw	r0, r22
 a90:	b9 01       	movw	r22, r18
 a92:	90 01       	movw	r18, r0
 a94:	0c 01       	movw	r0, r24
 a96:	ca 01       	movw	r24, r20
 a98:	a0 01       	movw	r20, r0
 a9a:	11 24       	eor	r1, r1
 a9c:	ff 27       	eor	r31, r31
 a9e:	59 1b       	sub	r21, r25
 aa0:	99 f0       	breq	.+38     	; 0xac8 <__addsf3x+0x5c>
 aa2:	59 3f       	cpi	r21, 0xF9	; 249
 aa4:	50 f4       	brcc	.+20     	; 0xaba <__addsf3x+0x4e>
 aa6:	50 3e       	cpi	r21, 0xE0	; 224
 aa8:	68 f1       	brcs	.+90     	; 0xb04 <__addsf3x+0x98>
 aaa:	1a 16       	cp	r1, r26
 aac:	f0 40       	sbci	r31, 0x00	; 0
 aae:	a2 2f       	mov	r26, r18
 ab0:	23 2f       	mov	r18, r19
 ab2:	34 2f       	mov	r19, r20
 ab4:	44 27       	eor	r20, r20
 ab6:	58 5f       	subi	r21, 0xF8	; 248
 ab8:	f3 cf       	rjmp	.-26     	; 0xaa0 <__addsf3x+0x34>
 aba:	46 95       	lsr	r20
 abc:	37 95       	ror	r19
 abe:	27 95       	ror	r18
 ac0:	a7 95       	ror	r26
 ac2:	f0 40       	sbci	r31, 0x00	; 0
 ac4:	53 95       	inc	r21
 ac6:	c9 f7       	brne	.-14     	; 0xaba <__addsf3x+0x4e>
 ac8:	7e f4       	brtc	.+30     	; 0xae8 <__addsf3x+0x7c>
 aca:	1f 16       	cp	r1, r31
 acc:	ba 0b       	sbc	r27, r26
 ace:	62 0b       	sbc	r22, r18
 ad0:	73 0b       	sbc	r23, r19
 ad2:	84 0b       	sbc	r24, r20
 ad4:	ba f0       	brmi	.+46     	; 0xb04 <__addsf3x+0x98>
 ad6:	91 50       	subi	r25, 0x01	; 1
 ad8:	a1 f0       	breq	.+40     	; 0xb02 <__addsf3x+0x96>
 ada:	ff 0f       	add	r31, r31
 adc:	bb 1f       	adc	r27, r27
 ade:	66 1f       	adc	r22, r22
 ae0:	77 1f       	adc	r23, r23
 ae2:	88 1f       	adc	r24, r24
 ae4:	c2 f7       	brpl	.-16     	; 0xad6 <__addsf3x+0x6a>
 ae6:	0e c0       	rjmp	.+28     	; 0xb04 <__addsf3x+0x98>
 ae8:	ba 0f       	add	r27, r26
 aea:	62 1f       	adc	r22, r18
 aec:	73 1f       	adc	r23, r19
 aee:	84 1f       	adc	r24, r20
 af0:	48 f4       	brcc	.+18     	; 0xb04 <__addsf3x+0x98>
 af2:	87 95       	ror	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	9e 3f       	cpi	r25, 0xFE	; 254
 afe:	08 f0       	brcs	.+2      	; 0xb02 <__addsf3x+0x96>
 b00:	b3 cf       	rjmp	.-154    	; 0xa68 <__addsf3+0x1e>
 b02:	93 95       	inc	r25
 b04:	88 0f       	add	r24, r24
 b06:	08 f0       	brcs	.+2      	; 0xb0a <__addsf3x+0x9e>
 b08:	99 27       	eor	r25, r25
 b0a:	ee 0f       	add	r30, r30
 b0c:	97 95       	ror	r25
 b0e:	87 95       	ror	r24
 b10:	08 95       	ret

00000b12 <__cmpsf2>:
 b12:	9c d0       	rcall	.+312    	; 0xc4c <__fp_cmp>
 b14:	08 f4       	brcc	.+2      	; 0xb18 <__cmpsf2+0x6>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	08 95       	ret

00000b1a <__divsf3>:
 b1a:	0c d0       	rcall	.+24     	; 0xb34 <__divsf3x>
 b1c:	d2 c0       	rjmp	.+420    	; 0xcc2 <__fp_round>
 b1e:	ca d0       	rcall	.+404    	; 0xcb4 <__fp_pscB>
 b20:	40 f0       	brcs	.+16     	; 0xb32 <__divsf3+0x18>
 b22:	c1 d0       	rcall	.+386    	; 0xca6 <__fp_pscA>
 b24:	30 f0       	brcs	.+12     	; 0xb32 <__divsf3+0x18>
 b26:	21 f4       	brne	.+8      	; 0xb30 <__divsf3+0x16>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	19 f0       	breq	.+6      	; 0xb32 <__divsf3+0x18>
 b2c:	b3 c0       	rjmp	.+358    	; 0xc94 <__fp_inf>
 b2e:	51 11       	cpse	r21, r1
 b30:	fc c0       	rjmp	.+504    	; 0xd2a <__fp_szero>
 b32:	b6 c0       	rjmp	.+364    	; 0xca0 <__fp_nan>

00000b34 <__divsf3x>:
 b34:	d7 d0       	rcall	.+430    	; 0xce4 <__fp_split3>
 b36:	98 f3       	brcs	.-26     	; 0xb1e <__divsf3+0x4>

00000b38 <__divsf3_pse>:
 b38:	99 23       	and	r25, r25
 b3a:	c9 f3       	breq	.-14     	; 0xb2e <__divsf3+0x14>
 b3c:	55 23       	and	r21, r21
 b3e:	b1 f3       	breq	.-20     	; 0xb2c <__divsf3+0x12>
 b40:	95 1b       	sub	r25, r21
 b42:	55 0b       	sbc	r21, r21
 b44:	bb 27       	eor	r27, r27
 b46:	aa 27       	eor	r26, r26
 b48:	62 17       	cp	r22, r18
 b4a:	73 07       	cpc	r23, r19
 b4c:	84 07       	cpc	r24, r20
 b4e:	38 f0       	brcs	.+14     	; 0xb5e <__divsf3_pse+0x26>
 b50:	9f 5f       	subi	r25, 0xFF	; 255
 b52:	5f 4f       	sbci	r21, 0xFF	; 255
 b54:	22 0f       	add	r18, r18
 b56:	33 1f       	adc	r19, r19
 b58:	44 1f       	adc	r20, r20
 b5a:	aa 1f       	adc	r26, r26
 b5c:	a9 f3       	breq	.-22     	; 0xb48 <__divsf3_pse+0x10>
 b5e:	33 d0       	rcall	.+102    	; 0xbc6 <__divsf3_pse+0x8e>
 b60:	0e 2e       	mov	r0, r30
 b62:	3a f0       	brmi	.+14     	; 0xb72 <__divsf3_pse+0x3a>
 b64:	e0 e8       	ldi	r30, 0x80	; 128
 b66:	30 d0       	rcall	.+96     	; 0xbc8 <__divsf3_pse+0x90>
 b68:	91 50       	subi	r25, 0x01	; 1
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	e6 95       	lsr	r30
 b6e:	00 1c       	adc	r0, r0
 b70:	ca f7       	brpl	.-14     	; 0xb64 <__divsf3_pse+0x2c>
 b72:	29 d0       	rcall	.+82     	; 0xbc6 <__divsf3_pse+0x8e>
 b74:	fe 2f       	mov	r31, r30
 b76:	27 d0       	rcall	.+78     	; 0xbc6 <__divsf3_pse+0x8e>
 b78:	66 0f       	add	r22, r22
 b7a:	77 1f       	adc	r23, r23
 b7c:	88 1f       	adc	r24, r24
 b7e:	bb 1f       	adc	r27, r27
 b80:	26 17       	cp	r18, r22
 b82:	37 07       	cpc	r19, r23
 b84:	48 07       	cpc	r20, r24
 b86:	ab 07       	cpc	r26, r27
 b88:	b0 e8       	ldi	r27, 0x80	; 128
 b8a:	09 f0       	breq	.+2      	; 0xb8e <__divsf3_pse+0x56>
 b8c:	bb 0b       	sbc	r27, r27
 b8e:	80 2d       	mov	r24, r0
 b90:	bf 01       	movw	r22, r30
 b92:	ff 27       	eor	r31, r31
 b94:	93 58       	subi	r25, 0x83	; 131
 b96:	5f 4f       	sbci	r21, 0xFF	; 255
 b98:	2a f0       	brmi	.+10     	; 0xba4 <__divsf3_pse+0x6c>
 b9a:	9e 3f       	cpi	r25, 0xFE	; 254
 b9c:	51 05       	cpc	r21, r1
 b9e:	68 f0       	brcs	.+26     	; 0xbba <__divsf3_pse+0x82>
 ba0:	79 c0       	rjmp	.+242    	; 0xc94 <__fp_inf>
 ba2:	c3 c0       	rjmp	.+390    	; 0xd2a <__fp_szero>
 ba4:	5f 3f       	cpi	r21, 0xFF	; 255
 ba6:	ec f3       	brlt	.-6      	; 0xba2 <__divsf3_pse+0x6a>
 ba8:	98 3e       	cpi	r25, 0xE8	; 232
 baa:	dc f3       	brlt	.-10     	; 0xba2 <__divsf3_pse+0x6a>
 bac:	86 95       	lsr	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b7 95       	ror	r27
 bb4:	f7 95       	ror	r31
 bb6:	9f 5f       	subi	r25, 0xFF	; 255
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__divsf3_pse+0x74>
 bba:	88 0f       	add	r24, r24
 bbc:	91 1d       	adc	r25, r1
 bbe:	96 95       	lsr	r25
 bc0:	87 95       	ror	r24
 bc2:	97 f9       	bld	r25, 7
 bc4:	08 95       	ret
 bc6:	e1 e0       	ldi	r30, 0x01	; 1
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	bb 1f       	adc	r27, r27
 bd0:	62 17       	cp	r22, r18
 bd2:	73 07       	cpc	r23, r19
 bd4:	84 07       	cpc	r24, r20
 bd6:	ba 07       	cpc	r27, r26
 bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__divsf3_pse+0xaa>
 bda:	62 1b       	sub	r22, r18
 bdc:	73 0b       	sbc	r23, r19
 bde:	84 0b       	sbc	r24, r20
 be0:	ba 0b       	sbc	r27, r26
 be2:	ee 1f       	adc	r30, r30
 be4:	88 f7       	brcc	.-30     	; 0xbc8 <__divsf3_pse+0x90>
 be6:	e0 95       	com	r30
 be8:	08 95       	ret

00000bea <__fixsfsi>:
 bea:	04 d0       	rcall	.+8      	; 0xbf4 <__fixunssfsi>
 bec:	68 94       	set
 bee:	b1 11       	cpse	r27, r1
 bf0:	9c c0       	rjmp	.+312    	; 0xd2a <__fp_szero>
 bf2:	08 95       	ret

00000bf4 <__fixunssfsi>:
 bf4:	7f d0       	rcall	.+254    	; 0xcf4 <__fp_splitA>
 bf6:	88 f0       	brcs	.+34     	; 0xc1a <__fixunssfsi+0x26>
 bf8:	9f 57       	subi	r25, 0x7F	; 127
 bfa:	90 f0       	brcs	.+36     	; 0xc20 <__fixunssfsi+0x2c>
 bfc:	b9 2f       	mov	r27, r25
 bfe:	99 27       	eor	r25, r25
 c00:	b7 51       	subi	r27, 0x17	; 23
 c02:	a0 f0       	brcs	.+40     	; 0xc2c <__fixunssfsi+0x38>
 c04:	d1 f0       	breq	.+52     	; 0xc3a <__fixunssfsi+0x46>
 c06:	66 0f       	add	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	1a f0       	brmi	.+6      	; 0xc16 <__fixunssfsi+0x22>
 c10:	ba 95       	dec	r27
 c12:	c9 f7       	brne	.-14     	; 0xc06 <__fixunssfsi+0x12>
 c14:	12 c0       	rjmp	.+36     	; 0xc3a <__fixunssfsi+0x46>
 c16:	b1 30       	cpi	r27, 0x01	; 1
 c18:	81 f0       	breq	.+32     	; 0xc3a <__fixunssfsi+0x46>
 c1a:	86 d0       	rcall	.+268    	; 0xd28 <__fp_zero>
 c1c:	b1 e0       	ldi	r27, 0x01	; 1
 c1e:	08 95       	ret
 c20:	83 c0       	rjmp	.+262    	; 0xd28 <__fp_zero>
 c22:	67 2f       	mov	r22, r23
 c24:	78 2f       	mov	r23, r24
 c26:	88 27       	eor	r24, r24
 c28:	b8 5f       	subi	r27, 0xF8	; 248
 c2a:	39 f0       	breq	.+14     	; 0xc3a <__fixunssfsi+0x46>
 c2c:	b9 3f       	cpi	r27, 0xF9	; 249
 c2e:	cc f3       	brlt	.-14     	; 0xc22 <__fixunssfsi+0x2e>
 c30:	86 95       	lsr	r24
 c32:	77 95       	ror	r23
 c34:	67 95       	ror	r22
 c36:	b3 95       	inc	r27
 c38:	d9 f7       	brne	.-10     	; 0xc30 <__fixunssfsi+0x3c>
 c3a:	3e f4       	brtc	.+14     	; 0xc4a <__fixunssfsi+0x56>
 c3c:	90 95       	com	r25
 c3e:	80 95       	com	r24
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	08 95       	ret

00000c4c <__fp_cmp>:
 c4c:	99 0f       	add	r25, r25
 c4e:	00 08       	sbc	r0, r0
 c50:	55 0f       	add	r21, r21
 c52:	aa 0b       	sbc	r26, r26
 c54:	e0 e8       	ldi	r30, 0x80	; 128
 c56:	fe ef       	ldi	r31, 0xFE	; 254
 c58:	16 16       	cp	r1, r22
 c5a:	17 06       	cpc	r1, r23
 c5c:	e8 07       	cpc	r30, r24
 c5e:	f9 07       	cpc	r31, r25
 c60:	c0 f0       	brcs	.+48     	; 0xc92 <__fp_cmp+0x46>
 c62:	12 16       	cp	r1, r18
 c64:	13 06       	cpc	r1, r19
 c66:	e4 07       	cpc	r30, r20
 c68:	f5 07       	cpc	r31, r21
 c6a:	98 f0       	brcs	.+38     	; 0xc92 <__fp_cmp+0x46>
 c6c:	62 1b       	sub	r22, r18
 c6e:	73 0b       	sbc	r23, r19
 c70:	84 0b       	sbc	r24, r20
 c72:	95 0b       	sbc	r25, r21
 c74:	39 f4       	brne	.+14     	; 0xc84 <__fp_cmp+0x38>
 c76:	0a 26       	eor	r0, r26
 c78:	61 f0       	breq	.+24     	; 0xc92 <__fp_cmp+0x46>
 c7a:	23 2b       	or	r18, r19
 c7c:	24 2b       	or	r18, r20
 c7e:	25 2b       	or	r18, r21
 c80:	21 f4       	brne	.+8      	; 0xc8a <__fp_cmp+0x3e>
 c82:	08 95       	ret
 c84:	0a 26       	eor	r0, r26
 c86:	09 f4       	brne	.+2      	; 0xc8a <__fp_cmp+0x3e>
 c88:	a1 40       	sbci	r26, 0x01	; 1
 c8a:	a6 95       	lsr	r26
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	81 1d       	adc	r24, r1
 c90:	81 1d       	adc	r24, r1
 c92:	08 95       	ret

00000c94 <__fp_inf>:
 c94:	97 f9       	bld	r25, 7
 c96:	9f 67       	ori	r25, 0x7F	; 127
 c98:	80 e8       	ldi	r24, 0x80	; 128
 c9a:	70 e0       	ldi	r23, 0x00	; 0
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	08 95       	ret

00000ca0 <__fp_nan>:
 ca0:	9f ef       	ldi	r25, 0xFF	; 255
 ca2:	80 ec       	ldi	r24, 0xC0	; 192
 ca4:	08 95       	ret

00000ca6 <__fp_pscA>:
 ca6:	00 24       	eor	r0, r0
 ca8:	0a 94       	dec	r0
 caa:	16 16       	cp	r1, r22
 cac:	17 06       	cpc	r1, r23
 cae:	18 06       	cpc	r1, r24
 cb0:	09 06       	cpc	r0, r25
 cb2:	08 95       	ret

00000cb4 <__fp_pscB>:
 cb4:	00 24       	eor	r0, r0
 cb6:	0a 94       	dec	r0
 cb8:	12 16       	cp	r1, r18
 cba:	13 06       	cpc	r1, r19
 cbc:	14 06       	cpc	r1, r20
 cbe:	05 06       	cpc	r0, r21
 cc0:	08 95       	ret

00000cc2 <__fp_round>:
 cc2:	09 2e       	mov	r0, r25
 cc4:	03 94       	inc	r0
 cc6:	00 0c       	add	r0, r0
 cc8:	11 f4       	brne	.+4      	; 0xcce <__fp_round+0xc>
 cca:	88 23       	and	r24, r24
 ccc:	52 f0       	brmi	.+20     	; 0xce2 <__fp_round+0x20>
 cce:	bb 0f       	add	r27, r27
 cd0:	40 f4       	brcc	.+16     	; 0xce2 <__fp_round+0x20>
 cd2:	bf 2b       	or	r27, r31
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0x18>
 cd6:	60 ff       	sbrs	r22, 0
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__fp_round+0x20>
 cda:	6f 5f       	subi	r22, 0xFF	; 255
 cdc:	7f 4f       	sbci	r23, 0xFF	; 255
 cde:	8f 4f       	sbci	r24, 0xFF	; 255
 ce0:	9f 4f       	sbci	r25, 0xFF	; 255
 ce2:	08 95       	ret

00000ce4 <__fp_split3>:
 ce4:	57 fd       	sbrc	r21, 7
 ce6:	90 58       	subi	r25, 0x80	; 128
 ce8:	44 0f       	add	r20, r20
 cea:	55 1f       	adc	r21, r21
 cec:	59 f0       	breq	.+22     	; 0xd04 <__fp_splitA+0x10>
 cee:	5f 3f       	cpi	r21, 0xFF	; 255
 cf0:	71 f0       	breq	.+28     	; 0xd0e <__fp_splitA+0x1a>
 cf2:	47 95       	ror	r20

00000cf4 <__fp_splitA>:
 cf4:	88 0f       	add	r24, r24
 cf6:	97 fb       	bst	r25, 7
 cf8:	99 1f       	adc	r25, r25
 cfa:	61 f0       	breq	.+24     	; 0xd14 <__fp_splitA+0x20>
 cfc:	9f 3f       	cpi	r25, 0xFF	; 255
 cfe:	79 f0       	breq	.+30     	; 0xd1e <__fp_splitA+0x2a>
 d00:	87 95       	ror	r24
 d02:	08 95       	ret
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	55 1f       	adc	r21, r21
 d0c:	f2 cf       	rjmp	.-28     	; 0xcf2 <__fp_split3+0xe>
 d0e:	46 95       	lsr	r20
 d10:	f1 df       	rcall	.-30     	; 0xcf4 <__fp_splitA>
 d12:	08 c0       	rjmp	.+16     	; 0xd24 <__fp_splitA+0x30>
 d14:	16 16       	cp	r1, r22
 d16:	17 06       	cpc	r1, r23
 d18:	18 06       	cpc	r1, r24
 d1a:	99 1f       	adc	r25, r25
 d1c:	f1 cf       	rjmp	.-30     	; 0xd00 <__fp_splitA+0xc>
 d1e:	86 95       	lsr	r24
 d20:	71 05       	cpc	r23, r1
 d22:	61 05       	cpc	r22, r1
 d24:	08 94       	sec
 d26:	08 95       	ret

00000d28 <__fp_zero>:
 d28:	e8 94       	clt

00000d2a <__fp_szero>:
 d2a:	bb 27       	eor	r27, r27
 d2c:	66 27       	eor	r22, r22
 d2e:	77 27       	eor	r23, r23
 d30:	cb 01       	movw	r24, r22
 d32:	97 f9       	bld	r25, 7
 d34:	08 95       	ret

00000d36 <__tablejump2__>:
 d36:	ee 0f       	add	r30, r30
 d38:	ff 1f       	adc	r31, r31

00000d3a <__tablejump__>:
 d3a:	05 90       	lpm	r0, Z+
 d3c:	f4 91       	lpm	r31, Z
 d3e:	e0 2d       	mov	r30, r0
 d40:	09 94       	ijmp

00000d42 <_exit>:
 d42:	f8 94       	cli

00000d44 <__stop_program>:
 d44:	ff cf       	rjmp	.-2      	; 0xd44 <__stop_program>
