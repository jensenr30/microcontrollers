
Testing LED Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000014c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001e0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000012b  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a6  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000015e  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000f7  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000092  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_10>:
	TIMSK |= (1 << OCIE0);		// enable an interrupt upon output compare match for the timer.
	
}

// this function handles when the timer0 has a compare match.
ISR(TIMER0_COMP_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
	/*
	PORTD ^= (1 << PORTD7);		// toggle pin 7 of portd.
	_delay_us(2);				// wait for a bit.
	PORTD ^= (1 << PORTD7);		// toggle pin 7 of portd.
	*/
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <init_ADC>:

// initialize all of the Analog-to-Digital Subsystems.
// This function prepares the ADC subsystem to read from any one of the 8 ADC inputs with the interrupt enbaled.
// The result from the conversion will be stored in the AnalogReturn variable.
void init_ADC(){
	ADCSRA |= (1 << ADEN); // enable the ADC.
  90:	37 9a       	sbi	0x06, 7	; 6
	
	ADMUX &= !(1 << MUX4);		// turn off mux pins 4 and 3. These are only used for differential analog inputs. lets disregard that for now.
  92:	87 b1       	in	r24, 0x07	; 7
  94:	17 b8       	out	0x07, r1	; 7
	ADMUX &= !(1 << MUX3);
  96:	87 b1       	in	r24, 0x07	; 7
  98:	17 b8       	out	0x07, r1	; 7
	
	ADCSRA |= (1 << ADIE);		// enable analog read complete interrupts.
  9a:	33 9a       	sbi	0x06, 3	; 6
  9c:	08 95       	ret

0000009e <analog_read_0>:
		ADMUX &= !(1 << MUX0);
	}
	*/
	
	
	ADCSRA |= (1 << ADSC);		// start converting analog to digital.
  9e:	36 9a       	sbi	0x06, 6	; 6
  a0:	08 95       	ret

000000a2 <__vector_16>:
	
}


// This function handles the analog-to-digital conversion complete interrupt.
ISR(ADC_vect){
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	
	analogReturn = 0 | ADCL | (ADCH << 8);	// combine the two bytes to form a 10-bit number for the analogReturn value.
  b4:	24 b1       	in	r18, 0x04	; 4
  b6:	35 b1       	in	r19, 0x05	; 5
  b8:	93 2f       	mov	r25, r19
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	82 2b       	or	r24, r18
  be:	90 93 61 00 	sts	0x0061, r25
  c2:	80 93 60 00 	sts	0x0060, r24
	
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:
		_delay_us(200);		// wait for 14 us
	}
	*/
	
	
	sei();				// enable global interrupts.
  d8:	78 94       	sei
	
	init_ADC();			// initialize the ADC subsystems
  da:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	DDRD = 0xff;		// set PORTD as an output port
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;		// set the first two pins of portc as outputs.
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	84 bb       	out	0x14, r24	; 20
	DDRA = 0;			// set PORTA to inputs
  e6:	1a ba       	out	0x1a, r1	; 26
	PORTD = 0;			// turn off all PORTD pins
  e8:	12 ba       	out	0x12, r1	; 18
	
	// main program infinite loop
	while(1){
		
		analogReturn = -1;			// set analogReturn to invalid value
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	df ef       	ldi	r29, 0xFF	; 255
  ee:	d0 93 61 00 	sts	0x0061, r29
  f2:	c0 93 60 00 	sts	0x0060, r28
		
		analog_read_0();				// start ADC conversion.
  f6:	0e 94 4f 00 	call	0x9e	; 0x9e <analog_read_0>
		
		while(analogReturn == -1);	// wait until analgReturn is written to by the ADC interrupt handler
  fa:	80 91 60 00 	lds	r24, 0x0060
  fe:	90 91 61 00 	lds	r25, 0x0061
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	d1 f3       	breq	.-12     	; 0xfa <main+0x22>
		
		PORTD = analogReturn/4;							// PORTD is the higher eight bits of the 10 bit number. bits 9-2.
 106:	80 91 60 00 	lds	r24, 0x0060
 10a:	90 91 61 00 	lds	r25, 0x0061
 10e:	99 23       	and	r25, r25
 110:	0c f4       	brge	.+2      	; 0x114 <main+0x3c>
 112:	03 96       	adiw	r24, 0x03	; 3
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	82 bb       	out	0x12, r24	; 18
		
		if(analogReturn & 2) PORTC |= (1 << PORTC1);	// PORTC1 is the second lowest bit in the 10 bit number. bit 1.
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	90 91 61 00 	lds	r25, 0x0061
 126:	81 ff       	sbrs	r24, 1
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0x56>
 12a:	a9 9a       	sbi	0x15, 1	; 21
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x5a>
		else PORTC &= !(1 << PORTC1);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	15 ba       	out	0x15, r1	; 21
		
		if(analogReturn & 1) PORTC |= (1 << PORTC0);	// PORTC0 is the lowest bit in the 10 bit number. bit 0.
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	90 91 61 00 	lds	r25, 0x0061
 13a:	80 ff       	sbrs	r24, 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x6a>
 13e:	a8 9a       	sbi	0x15, 0	; 21
 140:	d6 cf       	rjmp	.-84     	; 0xee <main+0x16>
		else PORTC &= !(1 << PORTC0);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	15 ba       	out	0x15, r1	; 21
 146:	d3 cf       	rjmp	.-90     	; 0xee <main+0x16>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
