
BSI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000336  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000207  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000fd  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000017f  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d4  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000158  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000018a  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	ee c0       	rjmp	.+476    	; 0x1ea <__vector_6>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a9 36       	cpi	r26, 0x69	; 105
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d1       	rcall	.+516    	; 0x240 <main>
  3c:	30 c1       	rjmp	.+608    	; 0x29e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <init_timer0>:

// this starts timer0
void init_timer0()
{
	// select a clock source that runs at one eighth the frequency as the I/O clock
	TCCR0B |= (1<<CS00);
  40:	83 b7       	in	r24, 0x33	; 51
  42:	81 60       	ori	r24, 0x01	; 1
  44:	83 bf       	out	0x33, r24	; 51
	// this sets up PWM.
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
  46:	80 b7       	in	r24, 0x30	; 48
  48:	83 60       	ori	r24, 0x03	; 3
  4a:	80 bf       	out	0x30, r24	; 48
	// this sets up pin toggling (non-inverted PWM)
	TCCR0A |= (1<<COM0A1);
  4c:	80 b7       	in	r24, 0x30	; 48
  4e:	80 68       	ori	r24, 0x80	; 128
  50:	80 bf       	out	0x30, r24	; 48
	// this is the default setting for PWM (50 % duty cycle)
	OCR0A = 55;
  52:	87 e3       	ldi	r24, 0x37	; 55
  54:	86 bf       	out	0x36, r24	; 54
  56:	08 95       	ret

00000058 <init_timer1>:
// this gets timer1 up and running
// timer one will take care keeping track of time for measuring the line position.
void init_timer1()
{
	
	TCCR1B |= (1<<CS11);			// timer1 has a prescaler of 8
  58:	8e b5       	in	r24, 0x2e	; 46
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
  5e:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;						// "
  60:	1c bc       	out	0x2c, r1	; 44
	
	OCR1AH = 0xff;					// set initial high byte of the output compare register
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0xff;					// set initial low  byte of the output compare register
  66:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK1 |= (1<<OCIE1A);			// enable the output-compare interrupt for register A
  68:	61 9a       	sbi	0x0c, 1	; 12
  6a:	08 95       	ret

0000006c <__vector_3>:
	
}

// this handles when either of the two input pins changes states
ISR(PCINT1_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	//-----------------------------------------------------------------
	// First things first: read port and record time. These are time-crucial.
	//-----------------------------------------------------------------
	// read data on PORTB
	portBdata = PINB;
  92:	86 b3       	in	r24, 0x16	; 22
  94:	80 93 62 00 	sts	0x0062, r24
	
	// record the current time (from timer1)
	// this is useful when doing calculations on the line position
	// read from low byte then add the high byte (low byte first)
	uint16_t currentTimer1 = TCNT1L;
  98:	2c b5       	in	r18, 0x2c	; 44
	currentTimer1 += TCNT1H<<8;
  9a:	3d b5       	in	r19, 0x2d	; 45
	
	// these keep track of when the pulses occur.
	static uint16_t rEdge = 0;
	
	// extract data  bit from portBdata
	currentData =    ( (portBdata & (1<<p_data))  >> p_data );
  9c:	80 91 62 00 	lds	r24, 0x0062
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	80 93 64 00 	sts	0x0064, r24
	// extract sweep bit
	sweepDirection = ( (portBdata & (1<<p_sweep)) >> p_sweep);
  a6:	80 91 62 00 	lds	r24, 0x0062
  aa:	86 95       	lsr	r24
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	80 93 63 00 	sts	0x0063, r24
	//-----------------------------------------------------------------
	// handle sweep pin
	//-----------------------------------------------------------------
	
	// if a change in sweepDirection just occurred, then enter phase_warmup.
	if(sweepDirection != lastSweepDirection)
  b2:	90 91 63 00 	lds	r25, 0x0063
  b6:	80 91 65 00 	lds	r24, 0x0065
  ba:	98 17       	cp	r25, r24
  bc:	99 f0       	breq	.+38     	; 0xe4 <__stack+0x5>
	{
		// reset timer1 (high byte first)
		TCNT1H = 0;
  be:	1d bc       	out	0x2d, r1	; 45
		TCNT1L = 0;
  c0:	1c bc       	out	0x2c, r1	; 44
		// set compareA value to data_warmup time (high byte first)
		OCR1AH = (data_warmup & 0xff00)>>8;
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8b bd       	out	0x2b, r24	; 43
		OCR1AL = (data_warmup & 0x00ff);
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	8a bd       	out	0x2a, r24	; 42
		
		// enter the warmup phase
		phase = phase_warmup;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 60 00 	sts	0x0060, r24
		
		// reset the foundValidPulse variable
		foundValidPulse = 0;
  d0:	10 92 61 00 	sts	0x0061, r1
		// reset the edge variables
		rEdge = 0;
  d4:	10 92 67 00 	sts	0x0067, r1
  d8:	10 92 66 00 	sts	0x0066, r1
		
		// if the linePosition signal is still on, turn it off. This is just to make sure the linePosition doesn't roll over into the next cycle of data.
		low(PORTA, p_linePosition);
  dc:	db 98       	cbi	0x1b, 3	; 27
		
		// sensitize the data pin.
		// it is now time to start looking for data on that pin.
		PCMSK1 |= (1<<PCINT8);
  de:	80 b5       	in	r24, 0x20	; 32
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 bd       	out	0x20, r24	; 32
	//-----------------------------------------------------------------
	// handle data pin
	//-----------------------------------------------------------------
	
	// if the data pin value has changed,
	if((currentData != lastData) && phase == phase_active)
  e4:	80 91 64 00 	lds	r24, 0x0064
  e8:	90 91 68 00 	lds	r25, 0x0068
  ec:	89 17       	cp	r24, r25
  ee:	09 f4       	brne	.+2      	; 0xf2 <__stack+0x13>
  f0:	61 c0       	rjmp	.+194    	; 0x1b4 <__stack+0xd5>
  f2:	90 91 60 00 	lds	r25, 0x0060
  f6:	92 30       	cpi	r25, 0x02	; 2
  f8:	09 f0       	breq	.+2      	; 0xfc <__stack+0x1d>
  fa:	5c c0       	rjmp	.+184    	; 0x1b4 <__stack+0xd5>
	
	// record the current time (from timer1)
	// this is useful when doing calculations on the line position
	// read from low byte then add the high byte (low byte first)
	uint16_t currentTimer1 = TCNT1L;
	currentTimer1 += TCNT1H<<8;
  fc:	d3 2f       	mov	r29, r19
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	c9 2f       	mov	r28, r25
 102:	c2 0f       	add	r28, r18
 104:	d1 1d       	adc	r29, r1
	
	// if the data pin value has changed,
	if((currentData != lastData) && phase == phase_active)
	{
		// if the data pin just went high,
		if(currentData)
 106:	88 23       	and	r24, r24
 108:	09 f4       	brne	.+2      	; 0x10c <__stack+0x2d>
 10a:	47 c0       	rjmp	.+142    	; 0x19a <__stack+0xbb>
		{
			// if you have not yet found a valid pulse,
			if(!foundValidPulse)
 10c:	80 91 61 00 	lds	r24, 0x0061
 110:	81 11       	cpse	r24, r1
 112:	05 c0       	rjmp	.+10     	; 0x11e <__stack+0x3f>
			{
				// record where the most recent rising edge was located
				rEdge = currentTimer1;
 114:	d0 93 67 00 	sts	0x0067, r29
 118:	c0 93 66 00 	sts	0x0066, r28
 11c:	4b c0       	rjmp	.+150    	; 0x1b4 <__stack+0xd5>
			}
			// otherwise, if you have already found a valid pulse,
			else
			{
				// record where the middle of the barcode scanner line was.
				uint32_t middlePosition = rEdge + currentTimer1;
 11e:	60 91 66 00 	lds	r22, 0x0066
 122:	70 91 67 00 	lds	r23, 0x0067
 126:	6c 0f       	add	r22, r28
 128:	7d 1f       	adc	r23, r29
 12a:	cb 01       	movw	r24, r22
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
				// calculate the line value [0, 255] based on the middlePosition of the line inside the range of [0, data_active]
				// then store that value in the OCRA so that the duty cycle of the PWM waveform is representative of the line's position.
				OCR0A = (uint8_t)( (middlePosition<<7)/data_active );
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	aa 1f       	adc	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	aa 1f       	adc	r26, r26
 146:	bb 1f       	adc	r27, r27
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	aa 1f       	adc	r26, r26
 14e:	bb 1f       	adc	r27, r27
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	aa 1f       	adc	r26, r26
 156:	bb 1f       	adc	r27, r27
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	aa 1f       	adc	r26, r26
 15e:	bb 1f       	adc	r27, r27
 160:	bc 01       	movw	r22, r24
 162:	cd 01       	movw	r24, r26
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	20 eb       	ldi	r18, 0xB0	; 176
 16e:	36 e3       	ldi	r19, 0x36	; 54
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	72 d0       	rcall	.+228    	; 0x25a <__udivmodsi4>
 176:	26 bf       	out	0x36, r18	; 54
				// if the sweep direction is one way, the duty cycle has to be inverted
				if(sweepDirection) OCR0A = 255-OCR0A;
 178:	80 91 63 00 	lds	r24, 0x0063
 17c:	88 23       	and	r24, r24
 17e:	19 f0       	breq	.+6      	; 0x186 <__stack+0xa7>
 180:	86 b7       	in	r24, 0x36	; 54
 182:	80 95       	com	r24
 184:	86 bf       	out	0x36, r24	; 54
				// turn off the linePosition signal to signal that the edge of the line has been found.
				low(PORTA, p_linePosition);
 186:	db 98       	cbi	0x1b, 3	; 27
				// turn off the dataReady signal.
				// Because the duty cycle of the linePosition has just changed, the analog signal needs some time to settle.
				// therefore, the data isn't ready right away.
				// this pin is turned high when the program enters the waiting period.
				low(PORTA,p_dataReady);
 188:	df 98       	cbi	0x1b, 7	; 27
				
				// record the currentTimer1 just in case this is the start of the next valid pulse
				rEdge = currentTimer1;
 18a:	d0 93 67 00 	sts	0x0067, r29
 18e:	c0 93 66 00 	sts	0x0066, r28
				// desensitize the data pin.
				// we don't need to be bothering the processor with unnecessary interrupts now that we have found the line.
				// the data pin will re-sensitize when the sweep direction changes state.
				PCMSK1 &= ~(1<<PCINT8);
 192:	80 b5       	in	r24, 0x20	; 32
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	80 bd       	out	0x20, r24	; 32
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <__stack+0xd5>
		}
		// if the data pin just went low
		else
		{
			// if the falling edge (currentTimer1) occurrs at least [PULSE_TIME_MIN] later than rEdge, then the pulse is wide enough to be considered a valid pulse.
			if(currentTimer1 >= PULSE_TIME_MIN + rEdge)
 19a:	80 91 66 00 	lds	r24, 0x0066
 19e:	90 91 67 00 	lds	r25, 0x0067
 1a2:	80 57       	subi	r24, 0x70	; 112
 1a4:	9e 4f       	sbci	r25, 0xFE	; 254
 1a6:	c8 17       	cp	r28, r24
 1a8:	d9 07       	cpc	r29, r25
 1aa:	20 f0       	brcs	.+8      	; 0x1b4 <__stack+0xd5>
			{
				// turn on the linePosition indicating that a valid pulse has been found (thus indicating that a line has been found)
				high(PORTA, p_linePosition);
 1ac:	db 9a       	sbi	0x1b, 3	; 27
				// record that a valid pulse was found.
				foundValidPulse = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 61 00 	sts	0x0061, r24
		}
		
	}
	
	// record the current sweep direction as the last one
	lastSweepDirection = sweepDirection;
 1b4:	80 91 63 00 	lds	r24, 0x0063
 1b8:	80 93 65 00 	sts	0x0065, r24
	// record the current data pin state as the last one
	lastData = currentData;
 1bc:	80 91 64 00 	lds	r24, 0x0064
 1c0:	80 93 68 00 	sts	0x0068, r24
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_6>:


// this function handles when the timer0 has a compare match.
// mainly, this function simply handles changing the state of the device between warmup, active, and waiting
ISR(TIM1_COMPA_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
	// reset the timer 1 count (high byte first)
	TCNT1H = 0;
 1f6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 1f8:	1c bc       	out	0x2c, r1	; 44
	
	// if the current phase was "warmup", then we must switch to the active phase now
	if(phase == phase_warmup)
 1fa:	80 91 60 00 	lds	r24, 0x0060
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	41 f4       	brne	.+16     	; 0x212 <__vector_6+0x28>
	{
		// set the timer to interrupt in data_active time.
		// the data_active phase lasts only this long before the waiting stage begins.
		OCR1AH = ((data_active+data_warmup) & 0xff00)>>8;
 202:	8a e3       	ldi	r24, 0x3A	; 58
 204:	8b bd       	out	0x2b, r24	; 43
		OCR1AL = ((data_active+data_warmup) & 0x00ff);
 206:	88 e9       	ldi	r24, 0x98	; 152
 208:	8a bd       	out	0x2a, r24	; 42
		
		
		// switch to the active phase
		phase = phase_active;
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	80 93 60 00 	sts	0x0060, r24
 210:	0a c0       	rjmp	.+20     	; 0x226 <__vector_6+0x3c>
	}
	// if the current phase was "active", then the active phase has expired and we are now going to WAIT for the next change in sweep direciton.
	else if(phase == phase_active)
 212:	80 91 60 00 	lds	r24, 0x0060
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	31 f4       	brne	.+12     	; 0x226 <__vector_6+0x3c>
	{
		// if the active-data period just ended, enter the waiting-phase.
		// the waiting phase will take as long as it needs to (until the sweep direction changes).
		// this phase doesn't have a specified length, but it is usually a few milliseconds or so.
		phase = phase_wait;
 21a:	10 92 60 00 	sts	0x0060, r1
		// turn on the dataReadyPin if a valid pulse was found.
		// Surely, by now, the PWM-to-analog signal has approached its steady-state value.
		// ( it takes approximately a millisecond is the minimum value with two passive low-pass RC filters with 10kohm resistors and 0.01 microfarad ceramic caps).
		// this will happen right after the active phase, so in all likelyhood,
		if(foundValidPulse)
 21e:	80 91 61 00 	lds	r24, 0x0061
 222:	81 11       	cpse	r24, r1
			high(PORTA,p_dataReady);
 224:	df 9a       	sbi	0x1b, 7	; 27
	}
}
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <init_input_interrupts>:


void init_input_interrupts()
{
	// enable interrupts for port B pins (PCINT 11:8).
	GIMSK |= (1<<PCIE1);
 232:	8b b7       	in	r24, 0x3b	; 59
 234:	80 62       	ori	r24, 0x20	; 32
 236:	8b bf       	out	0x3b, r24	; 59
	
	// enable interrupts for PCINT 8 and 9 specifically (PORTB pins B0, B1) (ATtiny24A DIP package pins 2 and 3).
	// this interrupt will be triggered on a logical state change (rising/falling edge)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);
 238:	80 b5       	in	r24, 0x20	; 32
 23a:	83 60       	ori	r24, 0x03	; 3
 23c:	80 bd       	out	0x20, r24	; 32
 23e:	08 95       	ret

00000240 <main>:
// this is where the program starts
int main(void)
{
	 // PORTB
	 // set individual pin I/O directions
	set_input(DDRB, p_data);
 240:	b8 98       	cbi	0x17, 0	; 23
	set_input(DDRB, p_sweep);
 242:	b9 98       	cbi	0x17, 1	; 23
	set_output(DDRB, p_line);
 244:	ba 9a       	sbi	0x17, 2	; 23
	// set initial states
	low(PORTB, p_line);
 246:	c2 98       	cbi	0x18, 2	; 24
	
	// PORTA
	// set individual pin I/O directions
	set_output(DDRA, p_linePosition);
 248:	d3 9a       	sbi	0x1a, 3	; 26
	set_output(DDRA, p_dataReady);
 24a:	d7 9a       	sbi	0x1a, 7	; 26
	// initial states
	low(PORTA, p_linePosition);
 24c:	db 98       	cbi	0x1b, 3	; 27
	low(PORTA, p_dataReady);
 24e:	df 98       	cbi	0x1b, 7	; 27
	
	// set up timers and interrupts
	sei();								// enable global interrupts
 250:	78 94       	sei
	init_timer0();						// initialize timer0
 252:	f6 de       	rcall	.-532    	; 0x40 <init_timer0>
	init_timer1();						// initialize timer1
 254:	01 df       	rcall	.-510    	; 0x58 <init_timer1>
	init_input_interrupts();			// initialize input interrupts
 256:	ed df       	rcall	.-38     	; 0x232 <init_input_interrupts>
 258:	ff cf       	rjmp	.-2      	; 0x258 <main+0x18>

0000025a <__udivmodsi4>:
 25a:	a1 e2       	ldi	r26, 0x21	; 33
 25c:	1a 2e       	mov	r1, r26
 25e:	aa 1b       	sub	r26, r26
 260:	bb 1b       	sub	r27, r27
 262:	fd 01       	movw	r30, r26
 264:	0d c0       	rjmp	.+26     	; 0x280 <__udivmodsi4_ep>

00000266 <__udivmodsi4_loop>:
 266:	aa 1f       	adc	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	ee 1f       	adc	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	a2 17       	cp	r26, r18
 270:	b3 07       	cpc	r27, r19
 272:	e4 07       	cpc	r30, r20
 274:	f5 07       	cpc	r31, r21
 276:	20 f0       	brcs	.+8      	; 0x280 <__udivmodsi4_ep>
 278:	a2 1b       	sub	r26, r18
 27a:	b3 0b       	sbc	r27, r19
 27c:	e4 0b       	sbc	r30, r20
 27e:	f5 0b       	sbc	r31, r21

00000280 <__udivmodsi4_ep>:
 280:	66 1f       	adc	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a 94       	dec	r1
 28a:	69 f7       	brne	.-38     	; 0x266 <__udivmodsi4_loop>
 28c:	60 95       	com	r22
 28e:	70 95       	com	r23
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	bd 01       	movw	r22, r26
 29a:	cf 01       	movw	r24, r30
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
