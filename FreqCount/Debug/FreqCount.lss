
FreqCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000800  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000345  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b2  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f7  00000000  00000000  00000e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000294  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000449  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	7a c0       	rjmp	.+244    	; 0xfc <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	0b c1       	rjmp	.+534    	; 0x224 <__vector_6>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e0       	ldi	r30, 0x00	; 0
  32:	f8 e0       	ldi	r31, 0x08	; 8
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 36       	cpi	r26, 0x6A	; 106
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa e6       	ldi	r26, 0x6A	; 106
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 37       	cpi	r26, 0x78	; 120
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	01 d1       	rcall	.+514    	; 0x254 <main>
  52:	d4 c3       	rjmp	.+1960   	; 0x7fc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <shift_out_24_PORTA>:
	// The clockPin and dataPin of the port need to be configured as outputs before attempting to shift out data.
// bits is the number of bits that need to be shifted out.
// data is the data to be shifted out.
// bitDirection is 'm' or 'M' if you want to shift out the most significant bit first (MSBF). Any other character will be interpreted as LSBF.
// this will shift out (at most) 16 bits of information at a time.
void shift_out_24_PORTA(uint8_t clockPin, uint8_t dataPin, uint8_t bits, uint16_t data, int8_t bitDirection){
  56:	ef 92       	push	r14
  58:	ff 92       	push	r15
  5a:	0f 93       	push	r16
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
	
	uint16_t mask;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
  60:	0f 7d       	andi	r16, 0xDF	; 223
  62:	0d 34       	cpi	r16, 0x4D	; 77
  64:	51 f4       	brne	.+20     	; 0x7a <shift_out_24_PORTA+0x24>
		mask = 1 << (bits-1);
  66:	e1 e0       	ldi	r30, 0x01	; 1
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	9f ef       	ldi	r25, 0xFF	; 255
  6c:	94 0f       	add	r25, r20
  6e:	02 c0       	rjmp	.+4      	; 0x74 <shift_out_24_PORTA+0x1e>
  70:	ee 0f       	add	r30, r30
  72:	ff 1f       	adc	r31, r31
  74:	9a 95       	dec	r25
  76:	e2 f7       	brpl	.-8      	; 0x70 <shift_out_24_PORTA+0x1a>
  78:	02 c0       	rjmp	.+4      	; 0x7e <shift_out_24_PORTA+0x28>
	}
	else
	{
		mask = 1;
  7a:	e1 e0       	ldi	r30, 0x01	; 1
  7c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	for(; bits > 0; bits--)
  7e:	44 23       	and	r20, r20
  80:	79 f1       	breq	.+94     	; 0xe0 <__stack+0x1>
	{
		//set data bit high if needed
		if(data&mask)
		{
			PORTA |=  (1 << dataPin);
  82:	a1 e0       	ldi	r26, 0x01	; 1
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	7d 01       	movw	r14, r26
  88:	02 c0       	rjmp	.+4      	; 0x8e <shift_out_24_PORTA+0x38>
  8a:	ee 0c       	add	r14, r14
  8c:	ff 1c       	adc	r15, r15
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <shift_out_24_PORTA+0x34>
  92:	ce 2d       	mov	r28, r14
		}
		// otherwise, set the data bit low
		else
		{
			PORTA &= ~(1 << dataPin);
  94:	7e 2d       	mov	r23, r14
  96:	70 95       	com	r23
		}
			
		//clock data into the register.
		PORTA &= ~(1 << clockPin);
  98:	7d 01       	movw	r14, r26
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <shift_out_24_PORTA+0x4a>
  9c:	ee 0c       	add	r14, r14
  9e:	ff 1c       	adc	r15, r15
  a0:	8a 95       	dec	r24
  a2:	e2 f7       	brpl	.-8      	; 0x9c <shift_out_24_PORTA+0x46>
  a4:	6e 2d       	mov	r22, r14
  a6:	60 95       	com	r22
		PORTA |=  (1 << clockPin);
  a8:	5e 2d       	mov	r21, r14
	}
	
	for(; bits > 0; bits--)
	{
		//set data bit high if needed
		if(data&mask)
  aa:	cf 01       	movw	r24, r30
  ac:	82 23       	and	r24, r18
  ae:	93 23       	and	r25, r19
  b0:	89 2b       	or	r24, r25
  b2:	21 f0       	breq	.+8      	; 0xbc <shift_out_24_PORTA+0x66>
		{
			PORTA |=  (1 << dataPin);
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8c 2b       	or	r24, r28
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <shift_out_24_PORTA+0x6c>
		}
		// otherwise, set the data bit low
		else
		{
			PORTA &= ~(1 << dataPin);
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	87 23       	and	r24, r23
  c0:	8b bb       	out	0x1b, r24	; 27
		}
			
		//clock data into the register.
		PORTA &= ~(1 << clockPin);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	86 23       	and	r24, r22
  c6:	8b bb       	out	0x1b, r24	; 27
		PORTA |=  (1 << clockPin);
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	85 2b       	or	r24, r21
  cc:	8b bb       	out	0x1b, r24	; 27
		
		// modify mask for the next loop iteration.
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
  ce:	0d 34       	cpi	r16, 0x4D	; 77
  d0:	19 f4       	brne	.+6      	; 0xd8 <shift_out_24_PORTA+0x82>
			mask >>= 1;										// shift the mask right (decrease the bit mask).
  d2:	f6 95       	lsr	r31
  d4:	e7 95       	ror	r30
  d6:	02 c0       	rjmp	.+4      	; 0xdc <shift_out_24_PORTA+0x86>
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
	else
	{
		mask = 1;
	}
	
	for(; bits > 0; bits--)
  dc:	41 50       	subi	r20, 0x01	; 1
  de:	29 f7       	brne	.-54     	; 0xaa <shift_out_24_PORTA+0x54>
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
			mask >>= 1;										// shift the mask right (decrease the bit mask).
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	0f 91       	pop	r16
  e6:	ff 90       	pop	r15
  e8:	ef 90       	pop	r14
  ea:	08 95       	ret

000000ec <init_timer1>:
// this gets timer1 up and running
// timer one will take care keeping track of time for measuring the line position.
void init_timer1()
{
	
	TCCR1B |= (1<<CS10);			// timer1 is clokced from the main clock (20 MHz)
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	8e bd       	out	0x2e, r24	; 46
	
	//TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
	//TCNT1L = 0;						// "
	
	OCR1AH = 0xff;					// set high byte of the output compare register
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0xff;					// set low  byte of the output compare register
  f6:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK1 |= (1<<OCIE1A);			// enable the output-compare interrupt for register A
  f8:	61 9a       	sbi	0x0c, 1	; 12
  fa:	08 95       	ret

000000fc <__vector_3>:
}


// this handles when either of the two input pins changes states
ISR(PCINT1_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 92       	push	r8
 108:	9f 92       	push	r9
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	//-----------------------------------------------------------------
	// First things first: read port and record time. These are time-crucial.
	//-----------------------------------------------------------------
	// read data on PORTB
	uint8_t portBdata = PINB;
 132:	86 b3       	in	r24, 0x16	; 22
	
	// record the current time (from timer1)
	// this is useful when doing calculations on the line position
	// read from low byte then add the high byte (low byte first)
	uint16_t currentTimer1 = TCNT1L;
 134:	9c b5       	in	r25, 0x2c	; 44
	currentTimer1 += TCNT1H<<8;
 136:	cd b5       	in	r28, 0x2d	; 45
	
	// grab the state of the freq_in pin.
	uint8_t freq_in_state = ( (portBdata & (1<<p_freq_in))  >> p_freq_in );
	
	// if the signal went high,
	if( freq_in_state )
 138:	82 ff       	sbrs	r24, 2
 13a:	59 c0       	rjmp	.+178    	; 0x1ee <__vector_3+0xf2>
	
	// record the current time (from timer1)
	// this is useful when doing calculations on the line position
	// read from low byte then add the high byte (low byte first)
	uint16_t currentTimer1 = TCNT1L;
	currentTimer1 += TCNT1H<<8;
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	dc 2f       	mov	r29, r28
 140:	cc 27       	eor	r28, r28
 142:	c9 0f       	add	r28, r25
 144:	d1 1d       	adc	r29, r1
	
	// if the signal went high,
	if( freq_in_state )
	{
		// record that the input signal DID, in fact, have a (possibly another) rising edge.
		freq_in_cycles++;
 146:	80 91 6f 00 	lds	r24, 0x006F
 14a:	90 91 70 00 	lds	r25, 0x0070
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 70 00 	sts	0x0070, r25
 154:	80 93 6f 00 	sts	0x006F, r24
		
		// if the current sample has been going for at least the number of cycles needed to get 1 ppm resolution,
		if( ((uint32_t)overflows<<16) + (uint16_t)currentTimer1 >= min_clock_cycles_1ppm)
 158:	80 91 71 00 	lds	r24, 0x0071
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	a0 e0       	ldi	r26, 0x00	; 0
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	dc 01       	movw	r26, r24
 164:	99 27       	eor	r25, r25
 166:	88 27       	eor	r24, r24
 168:	8c 0f       	add	r24, r28
 16a:	9d 1f       	adc	r25, r29
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	80 32       	cpi	r24, 0x20	; 32
 172:	91 4a       	sbci	r25, 0xA1	; 161
 174:	a7 40       	sbci	r26, 0x07	; 7
 176:	b1 05       	cpc	r27, r1
 178:	d0 f1       	brcs	.+116    	; 0x1ee <__vector_3+0xf2>
		{	
			// start your next sample by resetting Timer1.
			TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
 17a:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;						// "
 17c:	1c bc       	out	0x2c, r1	; 44
				
			// calculate the period over which this sampled was performed.
			double period_sec =  (currentTimer1*clock_period_sec) + (overflows        *overflow_period_sec);
			// record the frequency
			freq_in_measurement_Hz = freq_in_cycles/period_sec;
 17e:	60 91 6f 00 	lds	r22, 0x006F
 182:	70 91 70 00 	lds	r23, 0x0070
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	1b d2       	rcall	.+1078   	; 0x5c2 <__floatunsisf>
 18c:	6b 01       	movw	r12, r22
 18e:	7c 01       	movw	r14, r24
			// start your next sample by resetting Timer1.
			TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
			TCNT1L = 0;						// "
				
			// calculate the period over which this sampled was performed.
			double period_sec =  (currentTimer1*clock_period_sec) + (overflows        *overflow_period_sec);
 190:	be 01       	movw	r22, r28
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	15 d2       	rcall	.+1066   	; 0x5c2 <__floatunsisf>
 198:	25 e9       	ldi	r18, 0x95	; 149
 19a:	3f eb       	ldi	r19, 0xBF	; 191
 19c:	46 e5       	ldi	r20, 0x56	; 86
 19e:	53 e3       	ldi	r21, 0x33	; 51
 1a0:	c2 d2       	rcall	.+1412   	; 0x726 <__mulsf3>
 1a2:	4b 01       	movw	r8, r22
 1a4:	5c 01       	movw	r10, r24
 1a6:	80 91 71 00 	lds	r24, 0x0071
 1aa:	68 2f       	mov	r22, r24
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	09 d2       	rcall	.+1042   	; 0x5c6 <__floatsisf>
 1b4:	25 e9       	ldi	r18, 0x95	; 149
 1b6:	3f eb       	ldi	r19, 0xBF	; 191
 1b8:	46 e5       	ldi	r20, 0x56	; 86
 1ba:	5b e3       	ldi	r21, 0x3B	; 59
 1bc:	b4 d2       	rcall	.+1384   	; 0x726 <__mulsf3>
 1be:	9b 01       	movw	r18, r22
 1c0:	ac 01       	movw	r20, r24
 1c2:	c5 01       	movw	r24, r10
 1c4:	b4 01       	movw	r22, r8
 1c6:	01 d1       	rcall	.+514    	; 0x3ca <__addsf3>
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
			// record the frequency
			freq_in_measurement_Hz = freq_in_cycles/period_sec;
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	64 d1       	rcall	.+712    	; 0x49a <__divsf3>
 1d2:	60 93 6b 00 	sts	0x006B, r22
 1d6:	70 93 6c 00 	sts	0x006C, r23
 1da:	80 93 6d 00 	sts	0x006D, r24
 1de:	90 93 6e 00 	sts	0x006E, r25
			//double ON_time_sec = (ON_time_timer*clock_period_sec) + (ON_time_overflows*overflow_period_sec);
			// record the duty cycle
			//freq_in_duty_cycle = ON_time_sec/period_sec;
				
			// reset all variables (Timer1 was already reset above)
			freq_in_cycles = 0;
 1e2:	10 92 70 00 	sts	0x0070, r1
 1e6:	10 92 6f 00 	sts	0x006F, r1
			overflows = 0;
 1ea:	10 92 71 00 	sts	0x0071, r1
		//ON_time_overflows = overflows;
		
	}
	
	
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	9f 90       	pop	r9
 218:	8f 90       	pop	r8
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_6>:


// this function handles when the timer1 has a compare match.
// mainly, this function simply handles changing the state of the device between warmup, active, and waiting
ISR(TIM1_COMPA_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	// reset the timer 1 count (high byte first)
	//TCNT1H = 0;
	//TCNT1L = 0;
	// increment the counter that keeps track of how many times Timer1 has overflowed.
	overflows++;
 230:	80 91 71 00 	lds	r24, 0x0071
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 71 00 	sts	0x0071, r24
}
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <init_input_interrupts>:

// enable and configure the input pin interrupts.
void init_input_interrupts()
{
	// enable interrupts for port B pins (PCINT 11:8).
	GIMSK |= (1<<PCIE1);
 246:	8b b7       	in	r24, 0x3b	; 59
 248:	80 62       	ori	r24, 0x20	; 32
 24a:	8b bf       	out	0x3b, r24	; 59
	
	// enable interrupts for PCINT 10 specifically.
	// This corresponds to PORTB PB2 - ATtiny24A DIP package pin5.
	// this interrupt will be triggered on a logical state change (rising/falling edge).
	PCMSK1 |= (1<<PCINT10);
 24c:	80 b5       	in	r24, 0x20	; 32
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	80 bd       	out	0x20, r24	; 32
 252:	08 95       	ret

00000254 <main>:
}


// this is where the program starts
int main(void)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <main+0x6>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	dd 27       	eor	r29, r29
	 // PORTB
	 // set individual pin I/O directions
	set_input(DDRB, p_freq_in);
 25e:	ba 98       	cbi	0x17, 2	; 23
	
	
	// PORTA
	// set individual pin I/O directions
	set_output(DDRA, p_SR_data);
 260:	d3 9a       	sbi	0x1a, 3	; 26
	set_output(DDRA, p_SR_SCK);
 262:	d5 9a       	sbi	0x1a, 5	; 26
	set_output(DDRA, p_SR_RCK);
 264:	d4 9a       	sbi	0x1a, 4	; 26
	//low(PORTA, p_SR_data);
	//low(PORTA, p_SR_SCK);
	//low(PORTA, p_SR_RCK);
	
	// set up timers and interrupts
	sei();								// enable global interrupts
 266:	78 94       	sei
	init_timer1();						// initialize timer1
 268:	41 df       	rcall	.-382    	; 0xec <init_timer1>
	init_input_interrupts();			// initialize input interrupts
 26a:	ed df       	rcall	.-38     	; 0x246 <init_input_interrupts>
	while(1)
    {
		// check if we are starting a new frame (a new set of six display digits)
		if(digit >= 6)
		{
			digit = 0;
 26c:	31 2c       	mov	r3, r1
			{
				// if you have found the first significant digit,
				if(currentFreq >= decade && sigfig == 99)
				{
					// start processing the number into 
					sigfig = 0;
 26e:	23 2c       	mov	r2, r3
		//if(data) data <<= 1;
		//if(data >= ((uint32_t)1 << 6)) data = 1;
		//if(data == 0) data = 1;
		
		// build data and shift it into the registers
		shift_out_24_PORTA(p_SR_SCK, p_SR_data, 16, ((uint16_t)1<<(digit+8))|(uint16_t)disp_data[digit], 'm');
 270:	44 24       	eor	r4, r4
 272:	43 94       	inc	r4
 274:	51 2c       	mov	r5, r1
	
	// the main() function only serves to setup the program. everything happens based on interrupts, so our work in the main() function is done. we can kick back
	while(1)
    {
		// check if we are starting a new frame (a new set of six display digits)
		if(digit >= 6)
 276:	80 91 6a 00 	lds	r24, 0x006A
 27a:	86 30       	cpi	r24, 0x06	; 6
 27c:	08 f4       	brcc	.+2      	; 0x280 <main+0x2c>
 27e:	82 c0       	rjmp	.+260    	; 0x384 <main+0x130>
		{
			digit = 0;
 280:	30 92 6a 00 	sts	0x006A, r3
			double decade;
			
			// grab the current frequency measurement
			double currentFreq = freq_in_measurement_Hz;
 284:	c0 90 6b 00 	lds	r12, 0x006B
 288:	d0 90 6c 00 	lds	r13, 0x006C
 28c:	e0 90 6d 00 	lds	r14, 0x006D
 290:	f0 90 6e 00 	lds	r15, 0x006E
 294:	0f 2e       	mov	r0, r31
 296:	fd e0       	ldi	r31, 0x0D	; 13
 298:	6f 2e       	mov	r6, r31
 29a:	f0 2d       	mov	r31, r0
 29c:	71 2c       	mov	r7, r1
			
			// records which significant figure of the number we are currently processing
			// default is a bogus value
			int8_t sigfig = 99;
 29e:	13 e6       	ldi	r17, 0x63	; 99
			for(decade = 10e6; decade >= 1e-6; decade/=10.0)
 2a0:	00 e8       	ldi	r16, 0x80	; 128
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f6 e9       	ldi	r31, 0x96	; 150
 2a6:	bf 2e       	mov	r11, r31
 2a8:	f0 2d       	mov	r31, r0
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f8 e1       	ldi	r31, 0x18	; 24
 2ae:	af 2e       	mov	r10, r31
 2b0:	f0 2d       	mov	r31, r0
 2b2:	0f 2e       	mov	r0, r31
 2b4:	fb e4       	ldi	r31, 0x4B	; 75
 2b6:	9f 2e       	mov	r9, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	39 82       	std	Y+1, r3	; 0x01
 2bc:	aa 82       	std	Y+2, r10	; 0x02
 2be:	a2 2c       	mov	r10, r2
 2c0:	13 01       	movw	r2, r6
 2c2:	71 2e       	mov	r7, r17
 2c4:	1b 2d       	mov	r17, r11
 2c6:	69 2c       	mov	r6, r9
			{
				// if you have found the first significant digit,
				if(currentFreq >= decade && sigfig == 99)
 2c8:	a7 01       	movw	r20, r14
 2ca:	96 01       	movw	r18, r12
 2cc:	60 2f       	mov	r22, r16
 2ce:	71 2f       	mov	r23, r17
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	96 2d       	mov	r25, r6
 2d4:	de d0       	rcall	.+444    	; 0x492 <__cmpsf2>
 2d6:	18 16       	cp	r1, r24
 2d8:	1c f0       	brlt	.+6      	; 0x2e0 <main+0x8c>
 2da:	83 e6       	ldi	r24, 0x63	; 99
 2dc:	78 16       	cp	r7, r24
 2de:	21 f0       	breq	.+8      	; 0x2e8 <main+0x94>
				{
					// start processing the number into 
					sigfig = 0;
				}
				// if you have found at least the first significant digit,
				if(sigfig <= 5)
 2e0:	95 e0       	ldi	r25, 0x05	; 5
 2e2:	97 15       	cp	r25, r7
 2e4:	dc f1       	brlt	.+118    	; 0x35c <main+0x108>
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <main+0x96>
			{
				// if you have found the first significant digit,
				if(currentFreq >= decade && sigfig == 99)
				{
					// start processing the number into 
					sigfig = 0;
 2e8:	7a 2c       	mov	r7, r10
				}
				// if you have found at least the first significant digit,
				if(sigfig <= 5)
				{
					// record what this digit was by putting it in the disp_data
					disp_data[sigfig] = (uint8_t)(currentFreq/decade);
 2ea:	87 2c       	mov	r8, r7
 2ec:	07 2c       	mov	r0, r7
 2ee:	00 0c       	add	r0, r0
 2f0:	99 08       	sbc	r9, r9
 2f2:	20 2f       	mov	r18, r16
 2f4:	31 2f       	mov	r19, r17
 2f6:	4a 81       	ldd	r20, Y+2	; 0x02
 2f8:	56 2d       	mov	r21, r6
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	cd d0       	rcall	.+410    	; 0x49a <__divsf3>
 300:	34 d1       	rcall	.+616    	; 0x56a <__fixunssfsi>
 302:	b6 2e       	mov	r11, r22
					// subtract the digit that has already been accounted for
					currentFreq -= (double)disp_data[sigfig]*decade;
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	5b d1       	rcall	.+694    	; 0x5c2 <__floatunsisf>
 30c:	20 2f       	mov	r18, r16
 30e:	31 2f       	mov	r19, r17
 310:	4a 81       	ldd	r20, Y+2	; 0x02
 312:	56 2d       	mov	r21, r6
 314:	08 d2       	rcall	.+1040   	; 0x726 <__mulsf3>
 316:	9b 01       	movw	r18, r22
 318:	ac 01       	movw	r20, r24
 31a:	c7 01       	movw	r24, r14
 31c:	b6 01       	movw	r22, r12
 31e:	54 d0       	rcall	.+168    	; 0x3c8 <__subsf3>
 320:	6b 01       	movw	r12, r22
 322:	7c 01       	movw	r14, r24
					// replace the digit with the data that will produce a digit on the seven segment display
					disp_data[sigfig] = sevenseg[disp_data[sigfig]];
 324:	eb 2d       	mov	r30, r11
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	e0 5a       	subi	r30, 0xA0	; 160
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	b0 80       	ld	r11, Z
					// if this is the ones place,
					if(decade == 1)
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e8       	ldi	r20, 0x80	; 128
 334:	5f e3       	ldi	r21, 0x3F	; 63
 336:	60 2f       	mov	r22, r16
 338:	71 2f       	mov	r23, r17
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	96 2d       	mov	r25, r6
 33e:	a9 d0       	rcall	.+338    	; 0x492 <__cmpsf2>
 340:	88 23       	and	r24, r24
 342:	29 f0       	breq	.+10     	; 0x34e <main+0xfa>
					// record what this digit was by putting it in the disp_data
					disp_data[sigfig] = (uint8_t)(currentFreq/decade);
					// subtract the digit that has already been accounted for
					currentFreq -= (double)disp_data[sigfig]*decade;
					// replace the digit with the data that will produce a digit on the seven segment display
					disp_data[sigfig] = sevenseg[disp_data[sigfig]];
 344:	f4 01       	movw	r30, r8
 346:	ee 58       	subi	r30, 0x8E	; 142
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	b0 82       	st	Z, r11
 34c:	06 c0       	rjmp	.+12     	; 0x35a <main+0x106>
					// if this is the ones place,
					if(decade == 1)
					{
						// add the decimal place
						disp_data[sigfig] |= 0x80;
 34e:	f4 01       	movw	r30, r8
 350:	ee 58       	subi	r30, 0x8E	; 142
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	8b 2d       	mov	r24, r11
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24
					}
					// increment the sigfig
					sigfig++;
 35a:	73 94       	inc	r7
			double currentFreq = freq_in_measurement_Hz;
			
			// records which significant figure of the number we are currently processing
			// default is a bogus value
			int8_t sigfig = 99;
			for(decade = 10e6; decade >= 1e-6; decade/=10.0)
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e2       	ldi	r20, 0x20	; 32
 362:	51 e4       	ldi	r21, 0x41	; 65
 364:	60 2f       	mov	r22, r16
 366:	71 2f       	mov	r23, r17
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	96 2d       	mov	r25, r6
 36c:	96 d0       	rcall	.+300    	; 0x49a <__divsf3>
 36e:	06 2f       	mov	r16, r22
 370:	17 2f       	mov	r17, r23
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	69 2e       	mov	r6, r25
 376:	e1 e0       	ldi	r30, 0x01	; 1
 378:	2e 1a       	sub	r2, r30
 37a:	31 08       	sbc	r3, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0x12c>
 37e:	a4 cf       	rjmp	.-184    	; 0x2c8 <main+0x74>
 380:	39 80       	ldd	r3, Y+1	; 0x01
 382:	2a 2c       	mov	r2, r10
		//if(data) data <<= 1;
		//if(data >= ((uint32_t)1 << 6)) data = 1;
		//if(data == 0) data = 1;
		
		// build data and shift it into the registers
		shift_out_24_PORTA(p_SR_SCK, p_SR_data, 16, ((uint16_t)1<<(digit+8))|(uint16_t)disp_data[digit], 'm');
 384:	80 91 6a 00 	lds	r24, 0x006A
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	ee 58       	subi	r30, 0x8E	; 142
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	40 81       	ld	r20, Z
 392:	08 96       	adiw	r24, 0x08	; 8
 394:	92 01       	movw	r18, r4
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x148>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <main+0x144>
 3a0:	24 2b       	or	r18, r20
 3a2:	0d e6       	ldi	r16, 0x6D	; 109
 3a4:	40 e1       	ldi	r20, 0x10	; 16
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	55 de       	rcall	.-854    	; 0x56 <shift_out_24_PORTA>
		
		// update the output registers
		low(PORTA,p_SR_RCK);
 3ac:	dc 98       	cbi	0x1b, 4	; 27
		high(PORTA,p_SR_RCK);
 3ae:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b0:	8f e0       	ldi	r24, 0x0F	; 15
 3b2:	97 e2       	ldi	r25, 0x27	; 39
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x160>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x166>
 3ba:	00 00       	nop
		_delay_ms(2);
		
		// We have just displayed a digit. It is time to 
		digit++;
 3bc:	80 91 6a 00 	lds	r24, 0x006A
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 6a 00 	sts	0x006A, r24
	}
 3c6:	57 cf       	rjmp	.-338    	; 0x276 <main+0x22>

000003c8 <__subsf3>:
 3c8:	50 58       	subi	r21, 0x80	; 128

000003ca <__addsf3>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	0e d0       	rcall	.+28     	; 0x3ec <__addsf3x>
 3d0:	70 c1       	rjmp	.+736    	; 0x6b2 <__fp_round>
 3d2:	61 d1       	rcall	.+706    	; 0x696 <__fp_pscA>
 3d4:	30 f0       	brcs	.+12     	; 0x3e2 <__addsf3+0x18>
 3d6:	66 d1       	rcall	.+716    	; 0x6a4 <__fp_pscB>
 3d8:	20 f0       	brcs	.+8      	; 0x3e2 <__addsf3+0x18>
 3da:	31 f4       	brne	.+12     	; 0x3e8 <__addsf3+0x1e>
 3dc:	9f 3f       	cpi	r25, 0xFF	; 255
 3de:	11 f4       	brne	.+4      	; 0x3e4 <__addsf3+0x1a>
 3e0:	1e f4       	brtc	.+6      	; 0x3e8 <__addsf3+0x1e>
 3e2:	56 c1       	rjmp	.+684    	; 0x690 <__fp_nan>
 3e4:	0e f4       	brtc	.+2      	; 0x3e8 <__addsf3+0x1e>
 3e6:	e0 95       	com	r30
 3e8:	e7 fb       	bst	r30, 7
 3ea:	4c c1       	rjmp	.+664    	; 0x684 <__fp_inf>

000003ec <__addsf3x>:
 3ec:	e9 2f       	mov	r30, r25
 3ee:	72 d1       	rcall	.+740    	; 0x6d4 <__fp_split3>
 3f0:	80 f3       	brcs	.-32     	; 0x3d2 <__addsf3+0x8>
 3f2:	ba 17       	cp	r27, r26
 3f4:	62 07       	cpc	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	95 07       	cpc	r25, r21
 3fc:	18 f0       	brcs	.+6      	; 0x404 <__addsf3x+0x18>
 3fe:	71 f4       	brne	.+28     	; 0x41c <__addsf3x+0x30>
 400:	9e f5       	brtc	.+102    	; 0x468 <__addsf3x+0x7c>
 402:	8a c1       	rjmp	.+788    	; 0x718 <__fp_zero>
 404:	0e f4       	brtc	.+2      	; 0x408 <__addsf3x+0x1c>
 406:	e0 95       	com	r30
 408:	0b 2e       	mov	r0, r27
 40a:	ba 2f       	mov	r27, r26
 40c:	a0 2d       	mov	r26, r0
 40e:	0b 01       	movw	r0, r22
 410:	b9 01       	movw	r22, r18
 412:	90 01       	movw	r18, r0
 414:	0c 01       	movw	r0, r24
 416:	ca 01       	movw	r24, r20
 418:	a0 01       	movw	r20, r0
 41a:	11 24       	eor	r1, r1
 41c:	ff 27       	eor	r31, r31
 41e:	59 1b       	sub	r21, r25
 420:	99 f0       	breq	.+38     	; 0x448 <__addsf3x+0x5c>
 422:	59 3f       	cpi	r21, 0xF9	; 249
 424:	50 f4       	brcc	.+20     	; 0x43a <__addsf3x+0x4e>
 426:	50 3e       	cpi	r21, 0xE0	; 224
 428:	68 f1       	brcs	.+90     	; 0x484 <__addsf3x+0x98>
 42a:	1a 16       	cp	r1, r26
 42c:	f0 40       	sbci	r31, 0x00	; 0
 42e:	a2 2f       	mov	r26, r18
 430:	23 2f       	mov	r18, r19
 432:	34 2f       	mov	r19, r20
 434:	44 27       	eor	r20, r20
 436:	58 5f       	subi	r21, 0xF8	; 248
 438:	f3 cf       	rjmp	.-26     	; 0x420 <__addsf3x+0x34>
 43a:	46 95       	lsr	r20
 43c:	37 95       	ror	r19
 43e:	27 95       	ror	r18
 440:	a7 95       	ror	r26
 442:	f0 40       	sbci	r31, 0x00	; 0
 444:	53 95       	inc	r21
 446:	c9 f7       	brne	.-14     	; 0x43a <__addsf3x+0x4e>
 448:	7e f4       	brtc	.+30     	; 0x468 <__addsf3x+0x7c>
 44a:	1f 16       	cp	r1, r31
 44c:	ba 0b       	sbc	r27, r26
 44e:	62 0b       	sbc	r22, r18
 450:	73 0b       	sbc	r23, r19
 452:	84 0b       	sbc	r24, r20
 454:	ba f0       	brmi	.+46     	; 0x484 <__addsf3x+0x98>
 456:	91 50       	subi	r25, 0x01	; 1
 458:	a1 f0       	breq	.+40     	; 0x482 <__addsf3x+0x96>
 45a:	ff 0f       	add	r31, r31
 45c:	bb 1f       	adc	r27, r27
 45e:	66 1f       	adc	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	c2 f7       	brpl	.-16     	; 0x456 <__addsf3x+0x6a>
 466:	0e c0       	rjmp	.+28     	; 0x484 <__addsf3x+0x98>
 468:	ba 0f       	add	r27, r26
 46a:	62 1f       	adc	r22, r18
 46c:	73 1f       	adc	r23, r19
 46e:	84 1f       	adc	r24, r20
 470:	48 f4       	brcc	.+18     	; 0x484 <__addsf3x+0x98>
 472:	87 95       	ror	r24
 474:	77 95       	ror	r23
 476:	67 95       	ror	r22
 478:	b7 95       	ror	r27
 47a:	f7 95       	ror	r31
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	08 f0       	brcs	.+2      	; 0x482 <__addsf3x+0x96>
 480:	b3 cf       	rjmp	.-154    	; 0x3e8 <__addsf3+0x1e>
 482:	93 95       	inc	r25
 484:	88 0f       	add	r24, r24
 486:	08 f0       	brcs	.+2      	; 0x48a <__addsf3x+0x9e>
 488:	99 27       	eor	r25, r25
 48a:	ee 0f       	add	r30, r30
 48c:	97 95       	ror	r25
 48e:	87 95       	ror	r24
 490:	08 95       	ret

00000492 <__cmpsf2>:
 492:	d4 d0       	rcall	.+424    	; 0x63c <__fp_cmp>
 494:	08 f4       	brcc	.+2      	; 0x498 <__cmpsf2+0x6>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <__divsf3>:
 49a:	0c d0       	rcall	.+24     	; 0x4b4 <__divsf3x>
 49c:	0a c1       	rjmp	.+532    	; 0x6b2 <__fp_round>
 49e:	02 d1       	rcall	.+516    	; 0x6a4 <__fp_pscB>
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <__divsf3+0x18>
 4a2:	f9 d0       	rcall	.+498    	; 0x696 <__fp_pscA>
 4a4:	30 f0       	brcs	.+12     	; 0x4b2 <__divsf3+0x18>
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <__divsf3+0x16>
 4a8:	5f 3f       	cpi	r21, 0xFF	; 255
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__divsf3+0x18>
 4ac:	eb c0       	rjmp	.+470    	; 0x684 <__fp_inf>
 4ae:	51 11       	cpse	r21, r1
 4b0:	34 c1       	rjmp	.+616    	; 0x71a <__fp_szero>
 4b2:	ee c0       	rjmp	.+476    	; 0x690 <__fp_nan>

000004b4 <__divsf3x>:
 4b4:	0f d1       	rcall	.+542    	; 0x6d4 <__fp_split3>
 4b6:	98 f3       	brcs	.-26     	; 0x49e <__divsf3+0x4>

000004b8 <__divsf3_pse>:
 4b8:	99 23       	and	r25, r25
 4ba:	c9 f3       	breq	.-14     	; 0x4ae <__divsf3+0x14>
 4bc:	55 23       	and	r21, r21
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__divsf3+0x12>
 4c0:	95 1b       	sub	r25, r21
 4c2:	55 0b       	sbc	r21, r21
 4c4:	bb 27       	eor	r27, r27
 4c6:	aa 27       	eor	r26, r26
 4c8:	62 17       	cp	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	38 f0       	brcs	.+14     	; 0x4de <__divsf3_pse+0x26>
 4d0:	9f 5f       	subi	r25, 0xFF	; 255
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	aa 1f       	adc	r26, r26
 4dc:	a9 f3       	breq	.-22     	; 0x4c8 <__divsf3_pse+0x10>
 4de:	33 d0       	rcall	.+102    	; 0x546 <__divsf3_pse+0x8e>
 4e0:	0e 2e       	mov	r0, r30
 4e2:	3a f0       	brmi	.+14     	; 0x4f2 <__divsf3_pse+0x3a>
 4e4:	e0 e8       	ldi	r30, 0x80	; 128
 4e6:	30 d0       	rcall	.+96     	; 0x548 <__divsf3_pse+0x90>
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	e6 95       	lsr	r30
 4ee:	00 1c       	adc	r0, r0
 4f0:	ca f7       	brpl	.-14     	; 0x4e4 <__divsf3_pse+0x2c>
 4f2:	29 d0       	rcall	.+82     	; 0x546 <__divsf3_pse+0x8e>
 4f4:	fe 2f       	mov	r31, r30
 4f6:	27 d0       	rcall	.+78     	; 0x546 <__divsf3_pse+0x8e>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	bb 1f       	adc	r27, r27
 500:	26 17       	cp	r18, r22
 502:	37 07       	cpc	r19, r23
 504:	48 07       	cpc	r20, r24
 506:	ab 07       	cpc	r26, r27
 508:	b0 e8       	ldi	r27, 0x80	; 128
 50a:	09 f0       	breq	.+2      	; 0x50e <__divsf3_pse+0x56>
 50c:	bb 0b       	sbc	r27, r27
 50e:	80 2d       	mov	r24, r0
 510:	bf 01       	movw	r22, r30
 512:	ff 27       	eor	r31, r31
 514:	93 58       	subi	r25, 0x83	; 131
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	2a f0       	brmi	.+10     	; 0x524 <__divsf3_pse+0x6c>
 51a:	9e 3f       	cpi	r25, 0xFE	; 254
 51c:	51 05       	cpc	r21, r1
 51e:	68 f0       	brcs	.+26     	; 0x53a <__divsf3_pse+0x82>
 520:	b1 c0       	rjmp	.+354    	; 0x684 <__fp_inf>
 522:	fb c0       	rjmp	.+502    	; 0x71a <__fp_szero>
 524:	5f 3f       	cpi	r21, 0xFF	; 255
 526:	ec f3       	brlt	.-6      	; 0x522 <__divsf3_pse+0x6a>
 528:	98 3e       	cpi	r25, 0xE8	; 232
 52a:	dc f3       	brlt	.-10     	; 0x522 <__divsf3_pse+0x6a>
 52c:	86 95       	lsr	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b7 95       	ror	r27
 534:	f7 95       	ror	r31
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	c9 f7       	brne	.-14     	; 0x52c <__divsf3_pse+0x74>
 53a:	88 0f       	add	r24, r24
 53c:	91 1d       	adc	r25, r1
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret
 546:	e1 e0       	ldi	r30, 0x01	; 1
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	bb 1f       	adc	r27, r27
 550:	62 17       	cp	r22, r18
 552:	73 07       	cpc	r23, r19
 554:	84 07       	cpc	r24, r20
 556:	ba 07       	cpc	r27, r26
 558:	20 f0       	brcs	.+8      	; 0x562 <__divsf3_pse+0xaa>
 55a:	62 1b       	sub	r22, r18
 55c:	73 0b       	sbc	r23, r19
 55e:	84 0b       	sbc	r24, r20
 560:	ba 0b       	sbc	r27, r26
 562:	ee 1f       	adc	r30, r30
 564:	88 f7       	brcc	.-30     	; 0x548 <__divsf3_pse+0x90>
 566:	e0 95       	com	r30
 568:	08 95       	ret

0000056a <__fixunssfsi>:
 56a:	bc d0       	rcall	.+376    	; 0x6e4 <__fp_splitA>
 56c:	88 f0       	brcs	.+34     	; 0x590 <__fixunssfsi+0x26>
 56e:	9f 57       	subi	r25, 0x7F	; 127
 570:	90 f0       	brcs	.+36     	; 0x596 <__fixunssfsi+0x2c>
 572:	b9 2f       	mov	r27, r25
 574:	99 27       	eor	r25, r25
 576:	b7 51       	subi	r27, 0x17	; 23
 578:	a0 f0       	brcs	.+40     	; 0x5a2 <__fixunssfsi+0x38>
 57a:	d1 f0       	breq	.+52     	; 0x5b0 <__fixunssfsi+0x46>
 57c:	66 0f       	add	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	1a f0       	brmi	.+6      	; 0x58c <__fixunssfsi+0x22>
 586:	ba 95       	dec	r27
 588:	c9 f7       	brne	.-14     	; 0x57c <__fixunssfsi+0x12>
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <__fixunssfsi+0x46>
 58c:	b1 30       	cpi	r27, 0x01	; 1
 58e:	81 f0       	breq	.+32     	; 0x5b0 <__fixunssfsi+0x46>
 590:	c3 d0       	rcall	.+390    	; 0x718 <__fp_zero>
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	08 95       	ret
 596:	c0 c0       	rjmp	.+384    	; 0x718 <__fp_zero>
 598:	67 2f       	mov	r22, r23
 59a:	78 2f       	mov	r23, r24
 59c:	88 27       	eor	r24, r24
 59e:	b8 5f       	subi	r27, 0xF8	; 248
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <__fixunssfsi+0x46>
 5a2:	b9 3f       	cpi	r27, 0xF9	; 249
 5a4:	cc f3       	brlt	.-14     	; 0x598 <__fixunssfsi+0x2e>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b3 95       	inc	r27
 5ae:	d9 f7       	brne	.-10     	; 0x5a6 <__fixunssfsi+0x3c>
 5b0:	3e f4       	brtc	.+14     	; 0x5c0 <__fixunssfsi+0x56>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__floatunsisf>:
 5c2:	e8 94       	clt
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__floatsisf+0x12>

000005c6 <__floatsisf>:
 5c6:	97 fb       	bst	r25, 7
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__floatsisf+0x12>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	99 23       	and	r25, r25
 5da:	a9 f0       	breq	.+42     	; 0x606 <__floatsisf+0x40>
 5dc:	f9 2f       	mov	r31, r25
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	bb 27       	eor	r27, r27
 5e2:	93 95       	inc	r25
 5e4:	f6 95       	lsr	r31
 5e6:	87 95       	ror	r24
 5e8:	77 95       	ror	r23
 5ea:	67 95       	ror	r22
 5ec:	b7 95       	ror	r27
 5ee:	f1 11       	cpse	r31, r1
 5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <__floatsisf+0x1c>
 5f2:	fa f4       	brpl	.+62     	; 0x632 <__floatsisf+0x6c>
 5f4:	bb 0f       	add	r27, r27
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__floatsisf+0x36>
 5f8:	60 ff       	sbrs	r22, 0
 5fa:	1b c0       	rjmp	.+54     	; 0x632 <__floatsisf+0x6c>
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	16 c0       	rjmp	.+44     	; 0x632 <__floatsisf+0x6c>
 606:	88 23       	and	r24, r24
 608:	11 f0       	breq	.+4      	; 0x60e <__floatsisf+0x48>
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	11 c0       	rjmp	.+34     	; 0x630 <__floatsisf+0x6a>
 60e:	77 23       	and	r23, r23
 610:	21 f0       	breq	.+8      	; 0x61a <__floatsisf+0x54>
 612:	9e e8       	ldi	r25, 0x8E	; 142
 614:	87 2f       	mov	r24, r23
 616:	76 2f       	mov	r23, r22
 618:	05 c0       	rjmp	.+10     	; 0x624 <__floatsisf+0x5e>
 61a:	66 23       	and	r22, r22
 61c:	71 f0       	breq	.+28     	; 0x63a <__floatsisf+0x74>
 61e:	96 e8       	ldi	r25, 0x86	; 134
 620:	86 2f       	mov	r24, r22
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	2a f0       	brmi	.+10     	; 0x632 <__floatsisf+0x6c>
 628:	9a 95       	dec	r25
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	da f7       	brpl	.-10     	; 0x628 <__floatsisf+0x62>
 632:	88 0f       	add	r24, r24
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__fp_cmp>:
 63c:	99 0f       	add	r25, r25
 63e:	00 08       	sbc	r0, r0
 640:	55 0f       	add	r21, r21
 642:	aa 0b       	sbc	r26, r26
 644:	e0 e8       	ldi	r30, 0x80	; 128
 646:	fe ef       	ldi	r31, 0xFE	; 254
 648:	16 16       	cp	r1, r22
 64a:	17 06       	cpc	r1, r23
 64c:	e8 07       	cpc	r30, r24
 64e:	f9 07       	cpc	r31, r25
 650:	c0 f0       	brcs	.+48     	; 0x682 <__fp_cmp+0x46>
 652:	12 16       	cp	r1, r18
 654:	13 06       	cpc	r1, r19
 656:	e4 07       	cpc	r30, r20
 658:	f5 07       	cpc	r31, r21
 65a:	98 f0       	brcs	.+38     	; 0x682 <__fp_cmp+0x46>
 65c:	62 1b       	sub	r22, r18
 65e:	73 0b       	sbc	r23, r19
 660:	84 0b       	sbc	r24, r20
 662:	95 0b       	sbc	r25, r21
 664:	39 f4       	brne	.+14     	; 0x674 <__fp_cmp+0x38>
 666:	0a 26       	eor	r0, r26
 668:	61 f0       	breq	.+24     	; 0x682 <__fp_cmp+0x46>
 66a:	23 2b       	or	r18, r19
 66c:	24 2b       	or	r18, r20
 66e:	25 2b       	or	r18, r21
 670:	21 f4       	brne	.+8      	; 0x67a <__fp_cmp+0x3e>
 672:	08 95       	ret
 674:	0a 26       	eor	r0, r26
 676:	09 f4       	brne	.+2      	; 0x67a <__fp_cmp+0x3e>
 678:	a1 40       	sbci	r26, 0x01	; 1
 67a:	a6 95       	lsr	r26
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	81 1d       	adc	r24, r1
 680:	81 1d       	adc	r24, r1
 682:	08 95       	ret

00000684 <__fp_inf>:
 684:	97 f9       	bld	r25, 7
 686:	9f 67       	ori	r25, 0x7F	; 127
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	08 95       	ret

00000690 <__fp_nan>:
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	80 ec       	ldi	r24, 0xC0	; 192
 694:	08 95       	ret

00000696 <__fp_pscA>:
 696:	00 24       	eor	r0, r0
 698:	0a 94       	dec	r0
 69a:	16 16       	cp	r1, r22
 69c:	17 06       	cpc	r1, r23
 69e:	18 06       	cpc	r1, r24
 6a0:	09 06       	cpc	r0, r25
 6a2:	08 95       	ret

000006a4 <__fp_pscB>:
 6a4:	00 24       	eor	r0, r0
 6a6:	0a 94       	dec	r0
 6a8:	12 16       	cp	r1, r18
 6aa:	13 06       	cpc	r1, r19
 6ac:	14 06       	cpc	r1, r20
 6ae:	05 06       	cpc	r0, r21
 6b0:	08 95       	ret

000006b2 <__fp_round>:
 6b2:	09 2e       	mov	r0, r25
 6b4:	03 94       	inc	r0
 6b6:	00 0c       	add	r0, r0
 6b8:	11 f4       	brne	.+4      	; 0x6be <__fp_round+0xc>
 6ba:	88 23       	and	r24, r24
 6bc:	52 f0       	brmi	.+20     	; 0x6d2 <__fp_round+0x20>
 6be:	bb 0f       	add	r27, r27
 6c0:	40 f4       	brcc	.+16     	; 0x6d2 <__fp_round+0x20>
 6c2:	bf 2b       	or	r27, r31
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__fp_round+0x18>
 6c6:	60 ff       	sbrs	r22, 0
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <__fp_round+0x20>
 6ca:	6f 5f       	subi	r22, 0xFF	; 255
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__fp_split3>:
 6d4:	57 fd       	sbrc	r21, 7
 6d6:	90 58       	subi	r25, 0x80	; 128
 6d8:	44 0f       	add	r20, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	59 f0       	breq	.+22     	; 0x6f4 <__fp_splitA+0x10>
 6de:	5f 3f       	cpi	r21, 0xFF	; 255
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__fp_splitA+0x1a>
 6e2:	47 95       	ror	r20

000006e4 <__fp_splitA>:
 6e4:	88 0f       	add	r24, r24
 6e6:	97 fb       	bst	r25, 7
 6e8:	99 1f       	adc	r25, r25
 6ea:	61 f0       	breq	.+24     	; 0x704 <__fp_splitA+0x20>
 6ec:	9f 3f       	cpi	r25, 0xFF	; 255
 6ee:	79 f0       	breq	.+30     	; 0x70e <__fp_splitA+0x2a>
 6f0:	87 95       	ror	r24
 6f2:	08 95       	ret
 6f4:	12 16       	cp	r1, r18
 6f6:	13 06       	cpc	r1, r19
 6f8:	14 06       	cpc	r1, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	f2 cf       	rjmp	.-28     	; 0x6e2 <__fp_split3+0xe>
 6fe:	46 95       	lsr	r20
 700:	f1 df       	rcall	.-30     	; 0x6e4 <__fp_splitA>
 702:	08 c0       	rjmp	.+16     	; 0x714 <__fp_splitA+0x30>
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	18 06       	cpc	r1, r24
 70a:	99 1f       	adc	r25, r25
 70c:	f1 cf       	rjmp	.-30     	; 0x6f0 <__fp_splitA+0xc>
 70e:	86 95       	lsr	r24
 710:	71 05       	cpc	r23, r1
 712:	61 05       	cpc	r22, r1
 714:	08 94       	sec
 716:	08 95       	ret

00000718 <__fp_zero>:
 718:	e8 94       	clt

0000071a <__fp_szero>:
 71a:	bb 27       	eor	r27, r27
 71c:	66 27       	eor	r22, r22
 71e:	77 27       	eor	r23, r23
 720:	cb 01       	movw	r24, r22
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret

00000726 <__mulsf3>:
 726:	0a d0       	rcall	.+20     	; 0x73c <__mulsf3x>
 728:	c4 cf       	rjmp	.-120    	; 0x6b2 <__fp_round>
 72a:	b5 df       	rcall	.-150    	; 0x696 <__fp_pscA>
 72c:	28 f0       	brcs	.+10     	; 0x738 <__mulsf3+0x12>
 72e:	ba df       	rcall	.-140    	; 0x6a4 <__fp_pscB>
 730:	18 f0       	brcs	.+6      	; 0x738 <__mulsf3+0x12>
 732:	95 23       	and	r25, r21
 734:	09 f0       	breq	.+2      	; 0x738 <__mulsf3+0x12>
 736:	a6 cf       	rjmp	.-180    	; 0x684 <__fp_inf>
 738:	ab cf       	rjmp	.-170    	; 0x690 <__fp_nan>
 73a:	ef cf       	rjmp	.-34     	; 0x71a <__fp_szero>

0000073c <__mulsf3x>:
 73c:	cb df       	rcall	.-106    	; 0x6d4 <__fp_split3>
 73e:	a8 f3       	brcs	.-22     	; 0x72a <__mulsf3+0x4>

00000740 <__mulsf3_pse>:
 740:	99 23       	and	r25, r25
 742:	d9 f3       	breq	.-10     	; 0x73a <__mulsf3+0x14>
 744:	55 23       	and	r21, r21
 746:	c9 f3       	breq	.-14     	; 0x73a <__mulsf3+0x14>
 748:	95 0f       	add	r25, r21
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	55 1f       	adc	r21, r21
 74e:	aa 27       	eor	r26, r26
 750:	ee 27       	eor	r30, r30
 752:	ff 27       	eor	r31, r31
 754:	bb 27       	eor	r27, r27
 756:	00 24       	eor	r0, r0
 758:	08 94       	sec
 75a:	67 95       	ror	r22
 75c:	20 f4       	brcc	.+8      	; 0x766 <__mulsf3_pse+0x26>
 75e:	e2 0f       	add	r30, r18
 760:	f3 1f       	adc	r31, r19
 762:	b4 1f       	adc	r27, r20
 764:	0a 1e       	adc	r0, r26
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	44 1f       	adc	r20, r20
 76c:	aa 1f       	adc	r26, r26
 76e:	66 95       	lsr	r22
 770:	a9 f7       	brne	.-22     	; 0x75c <__mulsf3_pse+0x1c>
 772:	77 95       	ror	r23
 774:	30 f4       	brcc	.+12     	; 0x782 <__mulsf3_pse+0x42>
 776:	f3 0f       	add	r31, r19
 778:	b4 1f       	adc	r27, r20
 77a:	0a 1e       	adc	r0, r26
 77c:	12 1e       	adc	r1, r18
 77e:	08 f4       	brcc	.+2      	; 0x782 <__mulsf3_pse+0x42>
 780:	63 95       	inc	r22
 782:	33 0f       	add	r19, r19
 784:	44 1f       	adc	r20, r20
 786:	aa 1f       	adc	r26, r26
 788:	22 1f       	adc	r18, r18
 78a:	76 95       	lsr	r23
 78c:	99 f7       	brne	.-26     	; 0x774 <__mulsf3_pse+0x34>
 78e:	87 95       	ror	r24
 790:	20 f4       	brcc	.+8      	; 0x79a <__mulsf3_pse+0x5a>
 792:	b4 0f       	add	r27, r20
 794:	0a 1e       	adc	r0, r26
 796:	12 1e       	adc	r1, r18
 798:	63 1f       	adc	r22, r19
 79a:	44 0f       	add	r20, r20
 79c:	aa 1f       	adc	r26, r26
 79e:	22 1f       	adc	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	86 95       	lsr	r24
 7a4:	a9 f7       	brne	.-22     	; 0x790 <__mulsf3_pse+0x50>
 7a6:	86 2f       	mov	r24, r22
 7a8:	71 2d       	mov	r23, r1
 7aa:	60 2d       	mov	r22, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	8a f0       	brmi	.+34     	; 0x7d6 <__mulsf3_pse+0x96>
 7b4:	e1 f0       	breq	.+56     	; 0x7ee <__mulsf3_pse+0xae>
 7b6:	88 23       	and	r24, r24
 7b8:	4a f0       	brmi	.+18     	; 0x7cc <__mulsf3_pse+0x8c>
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	bb 1f       	adc	r27, r27
 7c0:	66 1f       	adc	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	91 50       	subi	r25, 0x01	; 1
 7c8:	50 40       	sbci	r21, 0x00	; 0
 7ca:	a9 f7       	brne	.-22     	; 0x7b6 <__mulsf3_pse+0x76>
 7cc:	9e 3f       	cpi	r25, 0xFE	; 254
 7ce:	51 05       	cpc	r21, r1
 7d0:	70 f0       	brcs	.+28     	; 0x7ee <__mulsf3_pse+0xae>
 7d2:	58 cf       	rjmp	.-336    	; 0x684 <__fp_inf>
 7d4:	a2 cf       	rjmp	.-188    	; 0x71a <__fp_szero>
 7d6:	5f 3f       	cpi	r21, 0xFF	; 255
 7d8:	ec f3       	brlt	.-6      	; 0x7d4 <__mulsf3_pse+0x94>
 7da:	98 3e       	cpi	r25, 0xE8	; 232
 7dc:	dc f3       	brlt	.-10     	; 0x7d4 <__mulsf3_pse+0x94>
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	f7 95       	ror	r31
 7e8:	e7 95       	ror	r30
 7ea:	9f 5f       	subi	r25, 0xFF	; 255
 7ec:	c1 f7       	brne	.-16     	; 0x7de <__mulsf3_pse+0x9e>
 7ee:	fe 2b       	or	r31, r30
 7f0:	88 0f       	add	r24, r24
 7f2:	91 1d       	adc	r25, r1
 7f4:	96 95       	lsr	r25
 7f6:	87 95       	ror	r24
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret

000007fc <_exit>:
 7fc:	f8 94       	cli

000007fe <__stop_program>:
 7fe:	ff cf       	rjmp	.-2      	; 0x7fe <__stop_program>
