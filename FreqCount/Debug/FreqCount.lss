
FreqCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000684  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006a  0080006a  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000254  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ee  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000122  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025d  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b0  00000000  00000000  00000fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	42 c1       	rjmp	.+644    	; 0x292 <__vector_6>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 e8       	ldi	r30, 0x84	; 132
  32:	f6 e0       	ldi	r31, 0x06	; 6
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 36       	cpi	r26, 0x6A	; 106
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa e6       	ldi	r26, 0x6A	; 106
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 38       	cpi	r26, 0x80	; 128
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4c d1       	rcall	.+664    	; 0x2ea <main>
  52:	16 c3       	rjmp	.+1580   	; 0x680 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_timer1>:
// this gets timer1 up and running
// timer one will take care keeping track of time for measuring the line position.
void init_timer1()
{
	
	TCCR1B |= (1<<CS10);			// timer1 is clokced from the main clock (20 MHz)
  56:	8e b5       	in	r24, 0x2e	; 46
  58:	81 60       	ori	r24, 0x01	; 1
  5a:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
  5c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;						// "
  5e:	1c bc       	out	0x2c, r1	; 44
	
	OCR1AH = 0xff;					// set initial high byte of the output compare register
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0xff;					// set initial low  byte of the output compare register
  64:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK1 |= (1<<OCIE1A);			// enable the output-compare interrupt for register A
  66:	61 9a       	sbi	0x0c, 1	; 12
  68:	08 95       	ret

0000006a <__vector_3>:
}


// this handles when either of the two input pins changes states
ISR(PCINT1_vect)
{
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	4f 92       	push	r4
  76:	5f 92       	push	r5
  78:	6f 92       	push	r6
  7a:	7f 92       	push	r7
  7c:	8f 92       	push	r8
  7e:	9f 92       	push	r9
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	6f 93       	push	r22
  96:	7f 93       	push	r23
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	dd 27       	eor	r29, r29
  ac:	c4 50       	subi	r28, 0x04	; 4
  ae:	cd bf       	out	0x3d, r28	; 61
	//-----------------------------------------------------------------
	// First things first: read port and record time. These are time-crucial.
	//-----------------------------------------------------------------
	// read data on PORTB
	portBdata = PINB;
  b0:	86 b3       	in	r24, 0x16	; 22
  b2:	80 93 7f 00 	sts	0x007F, r24
	
	// record the current time (from timer1)
	// this is useful when doing calculations on the line position
	// read from low byte then add the high byte (low byte first)
	uint16_t currentTimer1 = TCNT1L;
  b6:	8c b5       	in	r24, 0x2c	; 44
	currentTimer1 += TCNT1H<<8;
  b8:	6d b5       	in	r22, 0x2d	; 45
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	76 2f       	mov	r23, r22
  be:	66 27       	eor	r22, r22
  c0:	68 0f       	add	r22, r24
  c2:	71 1d       	adc	r23, r1
	//-----------------------------------------------------------------
	// Next up: figure out what the state of the pin is
	//-----------------------------------------------------------------
	
	// grab the state of the freq_in pin.
	uint8_t freq_in_state = ( (portBdata & (1<<p_freq_in))  >> p_freq_in );
  c4:	80 91 7f 00 	lds	r24, 0x007F
	
	// if the signal went high,
	if( freq_in_state )
  c8:	82 ff       	sbrs	r24, 2
  ca:	ae c0       	rjmp	.+348    	; 0x228 <__stack+0x149>
	{
		
		// if the p_freq_in pin has gone from high to low before (has triggered before) then we can make an acurate measurement.
		if( triggered )
  cc:	80 91 76 00 	lds	r24, 0x0076
  d0:	88 23       	and	r24, r24
  d2:	09 f4       	brne	.+2      	; 0xd6 <__vector_3+0x6c>
  d4:	a5 c0       	rjmp	.+330    	; 0x220 <__stack+0x141>
		{
			// if the current sample has been going for at least the number of cycles needed to get 1 ppm resolution,
			if( (overflows<<16) + currentTimer1 >= min_clock_cycles_1ppm)
  d6:	80 91 7b 00 	lds	r24, 0x007B
  da:	90 91 7c 00 	lds	r25, 0x007C
  de:	a0 91 7d 00 	lds	r26, 0x007D
  e2:	b0 91 7e 00 	lds	r27, 0x007E
  e6:	dc 01       	movw	r26, r24
  e8:	99 27       	eor	r25, r25
  ea:	88 27       	eor	r24, r24
  ec:	86 0f       	add	r24, r22
  ee:	97 1f       	adc	r25, r23
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	80 32       	cpi	r24, 0x20	; 32
  f6:	91 4a       	sbci	r25, 0xA1	; 161
  f8:	a7 40       	sbci	r26, 0x07	; 7
  fa:	b1 05       	cpc	r27, r1
  fc:	08 f4       	brcc	.+2      	; 0x100 <__stack+0x21>
  fe:	7c c0       	rjmp	.+248    	; 0x1f8 <__stack+0x119>
			{	
				// start your next sample by resetting Timer1.
				TCNT1H = 0;						// reset the timer1 count (both the high and low bytes)
 100:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0;						// "
 102:	1c bc       	out	0x2c, r1	; 44
				
				// calculate the period over which this sampled was performed.
				double period_sec =  (currentTimer1*clock_period_sec) + (overflows        *overflow_period_sec);
 104:	80 90 66 00 	lds	r8, 0x0066
 108:	90 90 67 00 	lds	r9, 0x0067
 10c:	a0 90 68 00 	lds	r10, 0x0068
 110:	b0 90 69 00 	lds	r11, 0x0069
 114:	40 90 7b 00 	lds	r4, 0x007B
 118:	50 90 7c 00 	lds	r5, 0x007C
 11c:	60 90 7d 00 	lds	r6, 0x007D
 120:	70 90 7e 00 	lds	r7, 0x007E
 124:	c0 90 62 00 	lds	r12, 0x0062
 128:	d0 90 63 00 	lds	r13, 0x0063
 12c:	e0 90 64 00 	lds	r14, 0x0064
 130:	f0 90 65 00 	lds	r15, 0x0065
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	aa d1       	rcall	.+852    	; 0x48e <__floatunsisf>
 13a:	a5 01       	movw	r20, r10
 13c:	94 01       	movw	r18, r8
 13e:	35 d2       	rcall	.+1130   	; 0x5aa <__mulsf3>
 140:	69 83       	std	Y+1, r22	; 0x01
 142:	7a 83       	std	Y+2, r23	; 0x02
 144:	8b 83       	std	Y+3, r24	; 0x03
 146:	9c 83       	std	Y+4, r25	; 0x04
 148:	c3 01       	movw	r24, r6
 14a:	b2 01       	movw	r22, r4
 14c:	a0 d1       	rcall	.+832    	; 0x48e <__floatunsisf>
 14e:	a7 01       	movw	r20, r14
 150:	96 01       	movw	r18, r12
 152:	2b d2       	rcall	.+1110   	; 0x5aa <__mulsf3>
 154:	9b 01       	movw	r18, r22
 156:	ac 01       	movw	r20, r24
 158:	69 81       	ldd	r22, Y+1	; 0x01
 15a:	7a 81       	ldd	r23, Y+2	; 0x02
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	ca d0       	rcall	.+404    	; 0x2f6 <__addsf3>
 162:	69 83       	std	Y+1, r22	; 0x01
 164:	7a 83       	std	Y+2, r23	; 0x02
 166:	8b 83       	std	Y+3, r24	; 0x03
 168:	9c 83       	std	Y+4, r25	; 0x04
				// record the frequency
				freq_in_measurement_Hz = freq_in_cycles/period_sec;
 16a:	60 91 77 00 	lds	r22, 0x0077
 16e:	70 91 78 00 	lds	r23, 0x0078
 172:	80 91 79 00 	lds	r24, 0x0079
 176:	90 91 7a 00 	lds	r25, 0x007A
 17a:	89 d1       	rcall	.+786    	; 0x48e <__floatunsisf>
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	3a 81       	ldd	r19, Y+2	; 0x02
 180:	4b 81       	ldd	r20, Y+3	; 0x03
 182:	5c 81       	ldd	r21, Y+4	; 0x04
 184:	1c d1       	rcall	.+568    	; 0x3be <__divsf3>
 186:	60 93 6e 00 	sts	0x006E, r22
 18a:	70 93 6f 00 	sts	0x006F, r23
 18e:	80 93 70 00 	sts	0x0070, r24
 192:	90 93 71 00 	sts	0x0071, r25
				// calculate the ON_time in seconds
				double ON_time_sec = (ON_time_timer*clock_period_sec) + (ON_time_overflows*overflow_period_sec);
 196:	60 91 60 00 	lds	r22, 0x0060
 19a:	70 91 61 00 	lds	r23, 0x0061
 19e:	40 90 72 00 	lds	r4, 0x0072
 1a2:	50 90 73 00 	lds	r5, 0x0073
 1a6:	60 90 74 00 	lds	r6, 0x0074
 1aa:	70 90 75 00 	lds	r7, 0x0075
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	6d d1       	rcall	.+730    	; 0x48e <__floatunsisf>
 1b4:	9b 01       	movw	r18, r22
 1b6:	ac 01       	movw	r20, r24
 1b8:	c5 01       	movw	r24, r10
 1ba:	b4 01       	movw	r22, r8
 1bc:	f6 d1       	rcall	.+1004   	; 0x5aa <__mulsf3>
 1be:	4b 01       	movw	r8, r22
 1c0:	5c 01       	movw	r10, r24
 1c2:	c3 01       	movw	r24, r6
 1c4:	b2 01       	movw	r22, r4
 1c6:	63 d1       	rcall	.+710    	; 0x48e <__floatunsisf>
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	ec d1       	rcall	.+984    	; 0x5aa <__mulsf3>
 1d2:	9b 01       	movw	r18, r22
 1d4:	ac 01       	movw	r20, r24
 1d6:	c5 01       	movw	r24, r10
 1d8:	b4 01       	movw	r22, r8
 1da:	8d d0       	rcall	.+282    	; 0x2f6 <__addsf3>
				// record the duty cycle
				freq_in_duty_cycle = ON_time_sec/period_sec;
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	3a 81       	ldd	r19, Y+2	; 0x02
 1e0:	4b 81       	ldd	r20, Y+3	; 0x03
 1e2:	5c 81       	ldd	r21, Y+4	; 0x04
 1e4:	ec d0       	rcall	.+472    	; 0x3be <__divsf3>
 1e6:	60 93 6a 00 	sts	0x006A, r22
 1ea:	70 93 6b 00 	sts	0x006B, r23
 1ee:	80 93 6c 00 	sts	0x006C, r24
 1f2:	90 93 6d 00 	sts	0x006D, r25
 1f6:	2c c0       	rjmp	.+88     	; 0x250 <__stack+0x171>
			}
			// if it is not yet time to measure the frequency,
			else
			{
				// record that the input signal DID, in fact, have another rising edge.
				freq_in_cycles++;
 1f8:	80 91 77 00 	lds	r24, 0x0077
 1fc:	90 91 78 00 	lds	r25, 0x0078
 200:	a0 91 79 00 	lds	r26, 0x0079
 204:	b0 91 7a 00 	lds	r27, 0x007A
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	a1 1d       	adc	r26, r1
 20c:	b1 1d       	adc	r27, r1
 20e:	80 93 77 00 	sts	0x0077, r24
 212:	90 93 78 00 	sts	0x0078, r25
 216:	a0 93 79 00 	sts	0x0079, r26
 21a:	b0 93 7a 00 	sts	0x007A, r27
 21e:	18 c0       	rjmp	.+48     	; 0x250 <__stack+0x171>
		}
		// if p_freq_in has never gone high before,  the device was probably just powered up.
		else
		{
			 // record this as the first trigger.
			triggered = 1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 76 00 	sts	0x0076, r24
 226:	14 c0       	rjmp	.+40     	; 0x250 <__stack+0x171>
		//-----------------------------------------------------------------
		// Or record the midpoint
		//-----------------------------------------------------------------
		
		// record when the digital signal went low
		ON_time_timer = currentTimer1;
 228:	70 93 61 00 	sts	0x0061, r23
 22c:	60 93 60 00 	sts	0x0060, r22
		ON_time_overflows = overflows;
 230:	80 91 7b 00 	lds	r24, 0x007B
 234:	90 91 7c 00 	lds	r25, 0x007C
 238:	a0 91 7d 00 	lds	r26, 0x007D
 23c:	b0 91 7e 00 	lds	r27, 0x007E
 240:	80 93 72 00 	sts	0x0072, r24
 244:	90 93 73 00 	sts	0x0073, r25
 248:	a0 93 74 00 	sts	0x0074, r26
 24c:	b0 93 75 00 	sts	0x0075, r27
		
	}
	
	
}
 250:	cc 5f       	subi	r28, 0xFC	; 252
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	7f 90       	pop	r7
 282:	6f 90       	pop	r6
 284:	5f 90       	pop	r5
 286:	4f 90       	pop	r4
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_6>:


// this function handles when the timer1 has a compare match.
// mainly, this function simply handles changing the state of the device between warmup, active, and waiting
ISR(TIM1_COMPA_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
	// reset the timer 1 count (high byte first)
	//TCNT1H = 0;
	//TCNT1L = 0;
	// increment the counter that keeps track of how many times Timer1 has overflowed.
	overflows++;
 2a4:	80 91 7b 00 	lds	r24, 0x007B
 2a8:	90 91 7c 00 	lds	r25, 0x007C
 2ac:	a0 91 7d 00 	lds	r26, 0x007D
 2b0:	b0 91 7e 00 	lds	r27, 0x007E
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	a1 1d       	adc	r26, r1
 2b8:	b1 1d       	adc	r27, r1
 2ba:	80 93 7b 00 	sts	0x007B, r24
 2be:	90 93 7c 00 	sts	0x007C, r25
 2c2:	a0 93 7d 00 	sts	0x007D, r26
 2c6:	b0 93 7e 00 	sts	0x007E, r27
}
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <init_input_interrupts>:

// enable and configure the input pin interrupts.
void init_input_interrupts()
{
	// enable interrupts for port B pins (PCINT 11:8).
	GIMSK |= (1<<PCIE1);
 2dc:	8b b7       	in	r24, 0x3b	; 59
 2de:	80 62       	ori	r24, 0x20	; 32
 2e0:	8b bf       	out	0x3b, r24	; 59
	
	// enable interrupts for PCINT 10 specifically.
	// This corresponds to PORTB PB2 - ATtiny24A DIP package pin5.
	// this interrupt will be triggered on a logical state change (rising/falling edge).
	PCMSK1 |= (1<<PCINT10);
 2e2:	80 b5       	in	r24, 0x20	; 32
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	08 95       	ret

000002ea <main>:
// this is where the program starts
int main(void)
{
	 // PORTB
	 // set individual pin I/O directions
	set_input(DDRB, p_freq_in);
 2ea:	ba 98       	cbi	0x17, 2	; 23
	low(PORTA, p_linePosition);
	low(PORTA, p_dataReady);
	*/
	
	// set up timers and interrupts
	sei();								// enable global interrupts
 2ec:	78 94       	sei
	init_timer1();						// initialize timer1
 2ee:	b3 de       	rcall	.-666    	; 0x56 <init_timer1>
	init_input_interrupts();			// initialize input interrupts
 2f0:	f5 df       	rcall	.-22     	; 0x2dc <init_input_interrupts>
	// the main() function only serves to setup the program. everything happens based on interrupts, so our work in the main() function is done. we can kick back
	while(1)
    {
		// You do nothing!
		// As if the solution to all your problems will just fall right out of the sky!
	}
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <main+0x8>

000002f4 <__subsf3>:
 2f4:	50 58       	subi	r21, 0x80	; 128

000002f6 <__addsf3>:
 2f6:	bb 27       	eor	r27, r27
 2f8:	aa 27       	eor	r26, r26
 2fa:	0e d0       	rcall	.+28     	; 0x318 <__addsf3x>
 2fc:	1c c1       	rjmp	.+568    	; 0x536 <__fp_round>
 2fe:	0d d1       	rcall	.+538    	; 0x51a <__fp_pscA>
 300:	30 f0       	brcs	.+12     	; 0x30e <__addsf3+0x18>
 302:	12 d1       	rcall	.+548    	; 0x528 <__fp_pscB>
 304:	20 f0       	brcs	.+8      	; 0x30e <__addsf3+0x18>
 306:	31 f4       	brne	.+12     	; 0x314 <__addsf3+0x1e>
 308:	9f 3f       	cpi	r25, 0xFF	; 255
 30a:	11 f4       	brne	.+4      	; 0x310 <__addsf3+0x1a>
 30c:	1e f4       	brtc	.+6      	; 0x314 <__addsf3+0x1e>
 30e:	02 c1       	rjmp	.+516    	; 0x514 <__fp_nan>
 310:	0e f4       	brtc	.+2      	; 0x314 <__addsf3+0x1e>
 312:	e0 95       	com	r30
 314:	e7 fb       	bst	r30, 7
 316:	f8 c0       	rjmp	.+496    	; 0x508 <__fp_inf>

00000318 <__addsf3x>:
 318:	e9 2f       	mov	r30, r25
 31a:	1e d1       	rcall	.+572    	; 0x558 <__fp_split3>
 31c:	80 f3       	brcs	.-32     	; 0x2fe <__addsf3+0x8>
 31e:	ba 17       	cp	r27, r26
 320:	62 07       	cpc	r22, r18
 322:	73 07       	cpc	r23, r19
 324:	84 07       	cpc	r24, r20
 326:	95 07       	cpc	r25, r21
 328:	18 f0       	brcs	.+6      	; 0x330 <__addsf3x+0x18>
 32a:	71 f4       	brne	.+28     	; 0x348 <__addsf3x+0x30>
 32c:	9e f5       	brtc	.+102    	; 0x394 <__addsf3x+0x7c>
 32e:	36 c1       	rjmp	.+620    	; 0x59c <__fp_zero>
 330:	0e f4       	brtc	.+2      	; 0x334 <__addsf3x+0x1c>
 332:	e0 95       	com	r30
 334:	0b 2e       	mov	r0, r27
 336:	ba 2f       	mov	r27, r26
 338:	a0 2d       	mov	r26, r0
 33a:	0b 01       	movw	r0, r22
 33c:	b9 01       	movw	r22, r18
 33e:	90 01       	movw	r18, r0
 340:	0c 01       	movw	r0, r24
 342:	ca 01       	movw	r24, r20
 344:	a0 01       	movw	r20, r0
 346:	11 24       	eor	r1, r1
 348:	ff 27       	eor	r31, r31
 34a:	59 1b       	sub	r21, r25
 34c:	99 f0       	breq	.+38     	; 0x374 <__addsf3x+0x5c>
 34e:	59 3f       	cpi	r21, 0xF9	; 249
 350:	50 f4       	brcc	.+20     	; 0x366 <__addsf3x+0x4e>
 352:	50 3e       	cpi	r21, 0xE0	; 224
 354:	68 f1       	brcs	.+90     	; 0x3b0 <__addsf3x+0x98>
 356:	1a 16       	cp	r1, r26
 358:	f0 40       	sbci	r31, 0x00	; 0
 35a:	a2 2f       	mov	r26, r18
 35c:	23 2f       	mov	r18, r19
 35e:	34 2f       	mov	r19, r20
 360:	44 27       	eor	r20, r20
 362:	58 5f       	subi	r21, 0xF8	; 248
 364:	f3 cf       	rjmp	.-26     	; 0x34c <__addsf3x+0x34>
 366:	46 95       	lsr	r20
 368:	37 95       	ror	r19
 36a:	27 95       	ror	r18
 36c:	a7 95       	ror	r26
 36e:	f0 40       	sbci	r31, 0x00	; 0
 370:	53 95       	inc	r21
 372:	c9 f7       	brne	.-14     	; 0x366 <__addsf3x+0x4e>
 374:	7e f4       	brtc	.+30     	; 0x394 <__addsf3x+0x7c>
 376:	1f 16       	cp	r1, r31
 378:	ba 0b       	sbc	r27, r26
 37a:	62 0b       	sbc	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	ba f0       	brmi	.+46     	; 0x3b0 <__addsf3x+0x98>
 382:	91 50       	subi	r25, 0x01	; 1
 384:	a1 f0       	breq	.+40     	; 0x3ae <__addsf3x+0x96>
 386:	ff 0f       	add	r31, r31
 388:	bb 1f       	adc	r27, r27
 38a:	66 1f       	adc	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	88 1f       	adc	r24, r24
 390:	c2 f7       	brpl	.-16     	; 0x382 <__addsf3x+0x6a>
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <__addsf3x+0x98>
 394:	ba 0f       	add	r27, r26
 396:	62 1f       	adc	r22, r18
 398:	73 1f       	adc	r23, r19
 39a:	84 1f       	adc	r24, r20
 39c:	48 f4       	brcc	.+18     	; 0x3b0 <__addsf3x+0x98>
 39e:	87 95       	ror	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	b7 95       	ror	r27
 3a6:	f7 95       	ror	r31
 3a8:	9e 3f       	cpi	r25, 0xFE	; 254
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__addsf3x+0x96>
 3ac:	b3 cf       	rjmp	.-154    	; 0x314 <__addsf3+0x1e>
 3ae:	93 95       	inc	r25
 3b0:	88 0f       	add	r24, r24
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__addsf3x+0x9e>
 3b4:	99 27       	eor	r25, r25
 3b6:	ee 0f       	add	r30, r30
 3b8:	97 95       	ror	r25
 3ba:	87 95       	ror	r24
 3bc:	08 95       	ret

000003be <__divsf3>:
 3be:	0c d0       	rcall	.+24     	; 0x3d8 <__divsf3x>
 3c0:	ba c0       	rjmp	.+372    	; 0x536 <__fp_round>
 3c2:	b2 d0       	rcall	.+356    	; 0x528 <__fp_pscB>
 3c4:	40 f0       	brcs	.+16     	; 0x3d6 <__divsf3+0x18>
 3c6:	a9 d0       	rcall	.+338    	; 0x51a <__fp_pscA>
 3c8:	30 f0       	brcs	.+12     	; 0x3d6 <__divsf3+0x18>
 3ca:	21 f4       	brne	.+8      	; 0x3d4 <__divsf3+0x16>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <__divsf3+0x18>
 3d0:	9b c0       	rjmp	.+310    	; 0x508 <__fp_inf>
 3d2:	51 11       	cpse	r21, r1
 3d4:	e4 c0       	rjmp	.+456    	; 0x59e <__fp_szero>
 3d6:	9e c0       	rjmp	.+316    	; 0x514 <__fp_nan>

000003d8 <__divsf3x>:
 3d8:	bf d0       	rcall	.+382    	; 0x558 <__fp_split3>
 3da:	98 f3       	brcs	.-26     	; 0x3c2 <__divsf3+0x4>

000003dc <__divsf3_pse>:
 3dc:	99 23       	and	r25, r25
 3de:	c9 f3       	breq	.-14     	; 0x3d2 <__divsf3+0x14>
 3e0:	55 23       	and	r21, r21
 3e2:	b1 f3       	breq	.-20     	; 0x3d0 <__divsf3+0x12>
 3e4:	95 1b       	sub	r25, r21
 3e6:	55 0b       	sbc	r21, r21
 3e8:	bb 27       	eor	r27, r27
 3ea:	aa 27       	eor	r26, r26
 3ec:	62 17       	cp	r22, r18
 3ee:	73 07       	cpc	r23, r19
 3f0:	84 07       	cpc	r24, r20
 3f2:	38 f0       	brcs	.+14     	; 0x402 <__divsf3_pse+0x26>
 3f4:	9f 5f       	subi	r25, 0xFF	; 255
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	44 1f       	adc	r20, r20
 3fe:	aa 1f       	adc	r26, r26
 400:	a9 f3       	breq	.-22     	; 0x3ec <__divsf3_pse+0x10>
 402:	33 d0       	rcall	.+102    	; 0x46a <__divsf3_pse+0x8e>
 404:	0e 2e       	mov	r0, r30
 406:	3a f0       	brmi	.+14     	; 0x416 <__divsf3_pse+0x3a>
 408:	e0 e8       	ldi	r30, 0x80	; 128
 40a:	30 d0       	rcall	.+96     	; 0x46c <__divsf3_pse+0x90>
 40c:	91 50       	subi	r25, 0x01	; 1
 40e:	50 40       	sbci	r21, 0x00	; 0
 410:	e6 95       	lsr	r30
 412:	00 1c       	adc	r0, r0
 414:	ca f7       	brpl	.-14     	; 0x408 <__divsf3_pse+0x2c>
 416:	29 d0       	rcall	.+82     	; 0x46a <__divsf3_pse+0x8e>
 418:	fe 2f       	mov	r31, r30
 41a:	27 d0       	rcall	.+78     	; 0x46a <__divsf3_pse+0x8e>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	bb 1f       	adc	r27, r27
 424:	26 17       	cp	r18, r22
 426:	37 07       	cpc	r19, r23
 428:	48 07       	cpc	r20, r24
 42a:	ab 07       	cpc	r26, r27
 42c:	b0 e8       	ldi	r27, 0x80	; 128
 42e:	09 f0       	breq	.+2      	; 0x432 <__divsf3_pse+0x56>
 430:	bb 0b       	sbc	r27, r27
 432:	80 2d       	mov	r24, r0
 434:	bf 01       	movw	r22, r30
 436:	ff 27       	eor	r31, r31
 438:	93 58       	subi	r25, 0x83	; 131
 43a:	5f 4f       	sbci	r21, 0xFF	; 255
 43c:	2a f0       	brmi	.+10     	; 0x448 <__divsf3_pse+0x6c>
 43e:	9e 3f       	cpi	r25, 0xFE	; 254
 440:	51 05       	cpc	r21, r1
 442:	68 f0       	brcs	.+26     	; 0x45e <__divsf3_pse+0x82>
 444:	61 c0       	rjmp	.+194    	; 0x508 <__fp_inf>
 446:	ab c0       	rjmp	.+342    	; 0x59e <__fp_szero>
 448:	5f 3f       	cpi	r21, 0xFF	; 255
 44a:	ec f3       	brlt	.-6      	; 0x446 <__divsf3_pse+0x6a>
 44c:	98 3e       	cpi	r25, 0xE8	; 232
 44e:	dc f3       	brlt	.-10     	; 0x446 <__divsf3_pse+0x6a>
 450:	86 95       	lsr	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f7 95       	ror	r31
 45a:	9f 5f       	subi	r25, 0xFF	; 255
 45c:	c9 f7       	brne	.-14     	; 0x450 <__divsf3_pse+0x74>
 45e:	88 0f       	add	r24, r24
 460:	91 1d       	adc	r25, r1
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	97 f9       	bld	r25, 7
 468:	08 95       	ret
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	bb 1f       	adc	r27, r27
 474:	62 17       	cp	r22, r18
 476:	73 07       	cpc	r23, r19
 478:	84 07       	cpc	r24, r20
 47a:	ba 07       	cpc	r27, r26
 47c:	20 f0       	brcs	.+8      	; 0x486 <__divsf3_pse+0xaa>
 47e:	62 1b       	sub	r22, r18
 480:	73 0b       	sbc	r23, r19
 482:	84 0b       	sbc	r24, r20
 484:	ba 0b       	sbc	r27, r26
 486:	ee 1f       	adc	r30, r30
 488:	88 f7       	brcc	.-30     	; 0x46c <__divsf3_pse+0x90>
 48a:	e0 95       	com	r30
 48c:	08 95       	ret

0000048e <__floatunsisf>:
 48e:	e8 94       	clt
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <__floatsisf+0x12>

00000492 <__floatsisf>:
 492:	97 fb       	bst	r25, 7
 494:	3e f4       	brtc	.+14     	; 0x4a4 <__floatsisf+0x12>
 496:	90 95       	com	r25
 498:	80 95       	com	r24
 49a:	70 95       	com	r23
 49c:	61 95       	neg	r22
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	99 23       	and	r25, r25
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <__floatsisf+0x40>
 4a8:	f9 2f       	mov	r31, r25
 4aa:	96 e9       	ldi	r25, 0x96	; 150
 4ac:	bb 27       	eor	r27, r27
 4ae:	93 95       	inc	r25
 4b0:	f6 95       	lsr	r31
 4b2:	87 95       	ror	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f1 11       	cpse	r31, r1
 4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <__floatsisf+0x1c>
 4be:	fa f4       	brpl	.+62     	; 0x4fe <__floatsisf+0x6c>
 4c0:	bb 0f       	add	r27, r27
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__floatsisf+0x36>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__floatsisf+0x6c>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	16 c0       	rjmp	.+44     	; 0x4fe <__floatsisf+0x6c>
 4d2:	88 23       	and	r24, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <__floatsisf+0x48>
 4d6:	96 e9       	ldi	r25, 0x96	; 150
 4d8:	11 c0       	rjmp	.+34     	; 0x4fc <__floatsisf+0x6a>
 4da:	77 23       	and	r23, r23
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <__floatsisf+0x54>
 4de:	9e e8       	ldi	r25, 0x8E	; 142
 4e0:	87 2f       	mov	r24, r23
 4e2:	76 2f       	mov	r23, r22
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__floatsisf+0x5e>
 4e6:	66 23       	and	r22, r22
 4e8:	71 f0       	breq	.+28     	; 0x506 <__floatsisf+0x74>
 4ea:	96 e8       	ldi	r25, 0x86	; 134
 4ec:	86 2f       	mov	r24, r22
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	2a f0       	brmi	.+10     	; 0x4fe <__floatsisf+0x6c>
 4f4:	9a 95       	dec	r25
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	da f7       	brpl	.-10     	; 0x4f4 <__floatsisf+0x62>
 4fe:	88 0f       	add	r24, r24
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret

00000508 <__fp_inf>:
 508:	97 f9       	bld	r25, 7
 50a:	9f 67       	ori	r25, 0x7F	; 127
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	08 95       	ret

00000514 <__fp_nan>:
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	80 ec       	ldi	r24, 0xC0	; 192
 518:	08 95       	ret

0000051a <__fp_pscA>:
 51a:	00 24       	eor	r0, r0
 51c:	0a 94       	dec	r0
 51e:	16 16       	cp	r1, r22
 520:	17 06       	cpc	r1, r23
 522:	18 06       	cpc	r1, r24
 524:	09 06       	cpc	r0, r25
 526:	08 95       	ret

00000528 <__fp_pscB>:
 528:	00 24       	eor	r0, r0
 52a:	0a 94       	dec	r0
 52c:	12 16       	cp	r1, r18
 52e:	13 06       	cpc	r1, r19
 530:	14 06       	cpc	r1, r20
 532:	05 06       	cpc	r0, r21
 534:	08 95       	ret

00000536 <__fp_round>:
 536:	09 2e       	mov	r0, r25
 538:	03 94       	inc	r0
 53a:	00 0c       	add	r0, r0
 53c:	11 f4       	brne	.+4      	; 0x542 <__fp_round+0xc>
 53e:	88 23       	and	r24, r24
 540:	52 f0       	brmi	.+20     	; 0x556 <__fp_round+0x20>
 542:	bb 0f       	add	r27, r27
 544:	40 f4       	brcc	.+16     	; 0x556 <__fp_round+0x20>
 546:	bf 2b       	or	r27, r31
 548:	11 f4       	brne	.+4      	; 0x54e <__fp_round+0x18>
 54a:	60 ff       	sbrs	r22, 0
 54c:	04 c0       	rjmp	.+8      	; 0x556 <__fp_round+0x20>
 54e:	6f 5f       	subi	r22, 0xFF	; 255
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	08 95       	ret

00000558 <__fp_split3>:
 558:	57 fd       	sbrc	r21, 7
 55a:	90 58       	subi	r25, 0x80	; 128
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	59 f0       	breq	.+22     	; 0x578 <__fp_splitA+0x10>
 562:	5f 3f       	cpi	r21, 0xFF	; 255
 564:	71 f0       	breq	.+28     	; 0x582 <__fp_splitA+0x1a>
 566:	47 95       	ror	r20

00000568 <__fp_splitA>:
 568:	88 0f       	add	r24, r24
 56a:	97 fb       	bst	r25, 7
 56c:	99 1f       	adc	r25, r25
 56e:	61 f0       	breq	.+24     	; 0x588 <__fp_splitA+0x20>
 570:	9f 3f       	cpi	r25, 0xFF	; 255
 572:	79 f0       	breq	.+30     	; 0x592 <__fp_splitA+0x2a>
 574:	87 95       	ror	r24
 576:	08 95       	ret
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	14 06       	cpc	r1, r20
 57e:	55 1f       	adc	r21, r21
 580:	f2 cf       	rjmp	.-28     	; 0x566 <__fp_split3+0xe>
 582:	46 95       	lsr	r20
 584:	f1 df       	rcall	.-30     	; 0x568 <__fp_splitA>
 586:	08 c0       	rjmp	.+16     	; 0x598 <__fp_splitA+0x30>
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	18 06       	cpc	r1, r24
 58e:	99 1f       	adc	r25, r25
 590:	f1 cf       	rjmp	.-30     	; 0x574 <__fp_splitA+0xc>
 592:	86 95       	lsr	r24
 594:	71 05       	cpc	r23, r1
 596:	61 05       	cpc	r22, r1
 598:	08 94       	sec
 59a:	08 95       	ret

0000059c <__fp_zero>:
 59c:	e8 94       	clt

0000059e <__fp_szero>:
 59e:	bb 27       	eor	r27, r27
 5a0:	66 27       	eor	r22, r22
 5a2:	77 27       	eor	r23, r23
 5a4:	cb 01       	movw	r24, r22
 5a6:	97 f9       	bld	r25, 7
 5a8:	08 95       	ret

000005aa <__mulsf3>:
 5aa:	0a d0       	rcall	.+20     	; 0x5c0 <__mulsf3x>
 5ac:	c4 cf       	rjmp	.-120    	; 0x536 <__fp_round>
 5ae:	b5 df       	rcall	.-150    	; 0x51a <__fp_pscA>
 5b0:	28 f0       	brcs	.+10     	; 0x5bc <__mulsf3+0x12>
 5b2:	ba df       	rcall	.-140    	; 0x528 <__fp_pscB>
 5b4:	18 f0       	brcs	.+6      	; 0x5bc <__mulsf3+0x12>
 5b6:	95 23       	and	r25, r21
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__mulsf3+0x12>
 5ba:	a6 cf       	rjmp	.-180    	; 0x508 <__fp_inf>
 5bc:	ab cf       	rjmp	.-170    	; 0x514 <__fp_nan>
 5be:	ef cf       	rjmp	.-34     	; 0x59e <__fp_szero>

000005c0 <__mulsf3x>:
 5c0:	cb df       	rcall	.-106    	; 0x558 <__fp_split3>
 5c2:	a8 f3       	brcs	.-22     	; 0x5ae <__mulsf3+0x4>

000005c4 <__mulsf3_pse>:
 5c4:	99 23       	and	r25, r25
 5c6:	d9 f3       	breq	.-10     	; 0x5be <__mulsf3+0x14>
 5c8:	55 23       	and	r21, r21
 5ca:	c9 f3       	breq	.-14     	; 0x5be <__mulsf3+0x14>
 5cc:	95 0f       	add	r25, r21
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	55 1f       	adc	r21, r21
 5d2:	aa 27       	eor	r26, r26
 5d4:	ee 27       	eor	r30, r30
 5d6:	ff 27       	eor	r31, r31
 5d8:	bb 27       	eor	r27, r27
 5da:	00 24       	eor	r0, r0
 5dc:	08 94       	sec
 5de:	67 95       	ror	r22
 5e0:	20 f4       	brcc	.+8      	; 0x5ea <__mulsf3_pse+0x26>
 5e2:	e2 0f       	add	r30, r18
 5e4:	f3 1f       	adc	r31, r19
 5e6:	b4 1f       	adc	r27, r20
 5e8:	0a 1e       	adc	r0, r26
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	44 1f       	adc	r20, r20
 5f0:	aa 1f       	adc	r26, r26
 5f2:	66 95       	lsr	r22
 5f4:	a9 f7       	brne	.-22     	; 0x5e0 <__mulsf3_pse+0x1c>
 5f6:	77 95       	ror	r23
 5f8:	30 f4       	brcc	.+12     	; 0x606 <__mulsf3_pse+0x42>
 5fa:	f3 0f       	add	r31, r19
 5fc:	b4 1f       	adc	r27, r20
 5fe:	0a 1e       	adc	r0, r26
 600:	12 1e       	adc	r1, r18
 602:	08 f4       	brcc	.+2      	; 0x606 <__mulsf3_pse+0x42>
 604:	63 95       	inc	r22
 606:	33 0f       	add	r19, r19
 608:	44 1f       	adc	r20, r20
 60a:	aa 1f       	adc	r26, r26
 60c:	22 1f       	adc	r18, r18
 60e:	76 95       	lsr	r23
 610:	99 f7       	brne	.-26     	; 0x5f8 <__mulsf3_pse+0x34>
 612:	87 95       	ror	r24
 614:	20 f4       	brcc	.+8      	; 0x61e <__mulsf3_pse+0x5a>
 616:	b4 0f       	add	r27, r20
 618:	0a 1e       	adc	r0, r26
 61a:	12 1e       	adc	r1, r18
 61c:	63 1f       	adc	r22, r19
 61e:	44 0f       	add	r20, r20
 620:	aa 1f       	adc	r26, r26
 622:	22 1f       	adc	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	86 95       	lsr	r24
 628:	a9 f7       	brne	.-22     	; 0x614 <__mulsf3_pse+0x50>
 62a:	86 2f       	mov	r24, r22
 62c:	71 2d       	mov	r23, r1
 62e:	60 2d       	mov	r22, r0
 630:	11 24       	eor	r1, r1
 632:	9f 57       	subi	r25, 0x7F	; 127
 634:	50 40       	sbci	r21, 0x00	; 0
 636:	8a f0       	brmi	.+34     	; 0x65a <__mulsf3_pse+0x96>
 638:	e1 f0       	breq	.+56     	; 0x672 <__mulsf3_pse+0xae>
 63a:	88 23       	and	r24, r24
 63c:	4a f0       	brmi	.+18     	; 0x650 <__mulsf3_pse+0x8c>
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	bb 1f       	adc	r27, r27
 644:	66 1f       	adc	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	a9 f7       	brne	.-22     	; 0x63a <__mulsf3_pse+0x76>
 650:	9e 3f       	cpi	r25, 0xFE	; 254
 652:	51 05       	cpc	r21, r1
 654:	70 f0       	brcs	.+28     	; 0x672 <__mulsf3_pse+0xae>
 656:	58 cf       	rjmp	.-336    	; 0x508 <__fp_inf>
 658:	a2 cf       	rjmp	.-188    	; 0x59e <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	ec f3       	brlt	.-6      	; 0x658 <__mulsf3_pse+0x94>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	dc f3       	brlt	.-10     	; 0x658 <__mulsf3_pse+0x94>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	e7 95       	ror	r30
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	c1 f7       	brne	.-16     	; 0x662 <__mulsf3_pse+0x9e>
 672:	fe 2b       	or	r31, r30
 674:	88 0f       	add	r24, r24
 676:	91 1d       	adc	r25, r1
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
